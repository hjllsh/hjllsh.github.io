{"total":76,"pageSize":12,"pageCount":7,"data":[{"title":"Redis主从-哨兵-分片集群","uid":"e17bf8cdf59871b374971436072adfe0","slug":"Redis主从-哨兵-分片集群","date":"2023-06-15T09:27:23.000Z","updated":"2023-06-15T09:27:23.416Z","comments":true,"path":"api/articles/Redis主从-哨兵-分片集群.json","cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true},{"title":"Redis持久化","uid":"25530e52ab0638e424f51939c49f1051","slug":"Redis持久化","date":"2023-06-15T08:51:33.000Z","updated":"2023-06-15T09:24:04.798Z","comments":true,"path":"api/articles/Redis持久化.json","cover":[],"text":"Redis持久化RDB持久化RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，默认是...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":12,"path":"api/tags/redis.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true},{"title":"Git经典场景操作","uid":"a23f2d002fc146791ed8e3604cc7ab69","slug":"Git经典场景操作","date":"2023-06-14T14:29:11.000Z","updated":"2023-06-15T09:24:45.887Z","comments":true,"path":"api/articles/Git经典场景操作.json","cover":[],"text":"Git常用命令 命令名称 作用 git config –global user.name 用户名 设置用户签名 git config –global user.email 邮箱 设置用户签名 git init 初始化本地库 git status 查看本地库状态 git add 文...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Git","slug":"Git","count":1,"path":"api/tags/Git.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true},{"title":"MySQL实战","uid":"11fe232dbef934e03d9537a3a12675e0","slug":"MySQL-实战(1)","date":"2023-06-14T07:25:58.000Z","updated":"2023-06-14T13:13:20.284Z","comments":true,"path":"api/articles/MySQL-实战(1).json","cover":[],"text":"不建议使用长事务假设一个值从1被按顺序改成了2、3、4，在回滚日志里面就会有类似下面的记录 当前值是4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的read-view。如图中看到的，在视图A、B、C里面，这一个记录的值分别是1、2、4，同一条记录在系统中可以存在多个版本...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":12,"path":"api/tags/MySQL.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},{"title":"Mybatis(一)","uid":"9f1c39845db12e0e40a2bf8f9721b61a","slug":"Mybatis(1)","date":"2023-06-14T02:03:59.000Z","updated":"2023-06-14T13:16:35.005Z","comments":true,"path":"api/articles/Mybatis(1).json","cover":[],"text":"MybatisMyBatis 是一款优秀的持久层框架，一个半 ORM（对象关系映射）框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几 乎所有的 JDBC 代码和手动设置参数以及 获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","count":1,"path":"api/tags/Mybatis.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},{"title":"MySQL日志系统","uid":"1442087dfdabdc07946399fb7094e2fa","slug":"MySQL日志系统","date":"2023-06-11T04:33:43.000Z","updated":"2023-06-14T07:25:30.255Z","comments":true,"path":"api/articles/MySQL日志系统.json","cover":[],"text":"MySQL的基本架构比如，你有个最简单的表，表里只有一个ID字段，在执行下面这个查询语句时： mysql> select * from T where ID=10； MySQL内部的执行过程MySQL的基本架构示意图 大体来说，MySQL可以分为Server层和存储引擎层两部分。...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":12,"path":"api/tags/MySQL.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},{"title":"Lambda表达式","uid":"32a652994e7e566383677d79f35d7c59","slug":"Lambda表达式","date":"2023-06-10T07:21:11.000Z","updated":"2023-06-10T15:16:34.349Z","comments":true,"path":"api/articles/Lambda表达式.json","cover":[],"text":"函数式编程思想函数式编程思想类似于我们数学中的函数，它主要关注的是对数据进行了什么操作。 优点： 代码简洁，开发快速 接近自然语言，易于理解 易于“并发编程” Lambda表达式Lambda是JDK8中一个语法糖，它可以对某些匿名内部类的写法进行简化。它是函数式编程思想的一个重要...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":27,"path":"api/tags/Java.json"},{"name":"Lambda","slug":"Lambda","count":1,"path":"api/tags/Lambda.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},{"title":"接口优化技巧","uid":"a4984df6ed448f92b70760ecd7f1272b","slug":"接口优化技巧","date":"2023-06-10T06:32:07.000Z","updated":"2023-06-10T15:19:21.407Z","comments":true,"path":"api/articles/接口优化技巧.json","cover":[],"text":"接口优化的通用方案 1.批处理批量思想：批量操作数据库，这个很好理解，我们在循环插入场景的接口中，可以在批处理执行完成后一次性插入或更新数据库，避免多次 IO。 //for循环单笔入库 list.stream().forEatch(msg->&#123; insert(); &#...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"优化","slug":"优化","count":1,"path":"api/tags/优化.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},{"title":"进程与线程","uid":"89180d8ad200729090513c1ce4f6ad31","slug":"进程与线程","date":"2023-06-09T12:37:40.000Z","updated":"2023-06-14T14:27:21.010Z","comments":true,"path":"api/articles/进程与线程.json","cover":[],"text":"进程与线程进程程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。 进程就...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"JUC","slug":"JUC","count":1,"path":"api/tags/JUC.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},{"title":"微服务-基础","uid":"cbf42b2f3cbb0eee5de5bbaaf2ed03ea","slug":"微服务-基础","date":"2023-06-09T08:53:51.000Z","updated":"2023-06-10T15:55:32.177Z","comments":true,"path":"api/articles/微服务-基础.json","cover":[],"text":"Nacos配置管理Nacos除了可以做注册中心，同样可以做配置管理来使用。 统一配置管理当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。 Nacos一方面可以将配置集中管理，另...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[],"tags":[],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},{"title":"RabbitMQ","uid":"eb3ef2175aab37a16c1ed443702f7a7d","slug":"RabbitMQ-基础","date":"2023-06-08T14:02:31.000Z","updated":"2023-06-10T15:33:25.442Z","comments":true,"path":"api/articles/RabbitMQ-基础.json","cover":[],"text":"RabbitMQ一篇就够了同步通讯：就像打电话，需要实时响应。 异步通讯：就像发邮件，不需要马上回复。 同步通讯存在下面的问题： 总结： 同步调用的优点： 时效性较强，可以立即得到结果 同步调用的问题： 耦合度高 性能和吞吐能力下降 有额外的资源消耗 有级联失败问题 异步通讯异步...","link":"","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[],"tags":[{"name":"RabbitMQ","slug":"RabbitMQ","count":1,"path":"api/tags/RabbitMQ.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},{"title":"微服务_入门","uid":"fe3fb8c55b48b7e212cb33aae1728c63","slug":"微服务-入门","date":"2023-06-08T09:44:27.000Z","updated":"2023-06-10T15:48:11.230Z","comments":true,"path":"api/articles/微服务-入门.json","cover":[],"text":"认识微服务单体架构单体架构：将业务的所有功能集中在一个项目中开发，打成一个包部署。 单体架构的优缺点如下： 优点： 架构简单 部署成本低 缺点： 耦合度高（维护困难、升级困难） 分布式架构分布式架构：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。 分布...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"微服务","slug":"微服务","count":1,"path":"api/tags/微服务.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}]}
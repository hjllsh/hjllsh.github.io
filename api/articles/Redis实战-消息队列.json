{"title":"Redis实战-消息队列","uid":"4b50e524d6593265b35d48bd112d4791","slug":"Redis实战-消息队列","date":"2023-06-05T14:00:00.000Z","updated":"2023-06-14T14:23:58.325Z","comments":true,"path":"api/articles/Redis实战-消息队列.json","keywords":null,"cover":[],"content":"<h2 id=\"Redis消息队列\"><a href=\"#Redis消息队列\" class=\"headerlink\" title=\"Redis消息队列\"></a>Redis消息队列</h2><h3 id=\"认识消息队列\"><a href=\"#认识消息队列\" class=\"headerlink\" title=\"认识消息队列\"></a>认识消息队列</h3><p>什么是消息队列：字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色：</p>\n<ul>\n<li>消息队列：存储和管理消息，也被称为消息代理（Message Broker）</li>\n<li>生产者：发送消息到消息队列</li>\n<li>消费者：从消息队列获取消息并处理消息</li>\n</ul>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653574849336.png\" alt=\"1653574849336\"></p>\n<p>使用队列的好处在于 <strong>解耦：</strong>所谓解耦，举一个生活中的例子就是：快递员(生产者)把快递放到快递柜里边(Message Queue)去，我们(消费者)从快递柜里边去拿东西，这就是一个异步，如果耦合，那么这个快递员相当于直接把快递交给你，万一你不在家，那么快递员就会一直等你，这就浪费了快递员的时间，所以这种思想在我们日常开发中，是非常有必要的。</p>\n<p>这种场景在我们秒杀中就变成了：我们下单之后，利用redis去进行校验下单条件，再通过队列把消息发送出去，然后再启动一个线程去消费这个消息，完成解耦，同时也加快我们的响应速度。</p>\n<p>这里我们可以使用一些现成的mq，比如kafka，rabbitmq等等，也可以直接使用redis提供的mq方案</p>\n<h3 id=\"基于List实现消息队列\"><a href=\"#基于List实现消息队列\" class=\"headerlink\" title=\"基于List实现消息队列\"></a>基于List实现消息队列</h3><p><strong>基于List结构模拟消息队列</strong></p>\n<p>消息队列（Message Queue），字面意思就是存放消息的队列。而Redis的list数据结构是一个双向链表，很容易模拟出队列效果。</p>\n<p>队列是入口和出口不在一边，因此我们可以利用：LPUSH 结合 RPOP、或者 RPUSH 结合 LPOP来实现。<br>不过要注意的是，当队列中没有消息时RPOP或LPOP操作会返回null，并不像JVM的阻塞队列那样会阻塞并等待消息。因此这里应该使用BRPOP或者BLPOP来实现阻塞效果。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653575176451.png\" alt=\"1653575176451\"></p>\n<p>基于List的消息队列有哪些优缺点？<br>优点：</p>\n<ul>\n<li>利用Redis存储，不受限于JVM内存上限</li>\n<li>基于Redis的持久化机制，数据安全性有保证</li>\n<li>可以满足消息有序性</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>无法避免消息丢失</li>\n<li>只支持单消费者</li>\n</ul>\n<h3 id=\"基于PubSub的消息队列\"><a href=\"#基于PubSub的消息队列\" class=\"headerlink\" title=\"基于PubSub的消息队列\"></a>基于PubSub的消息队列</h3><p>PubSub（发布订阅）是Redis2.0版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息。</p>\n<p> SUBSCRIBE channel [channel] ：订阅一个或多个频道<br> PUBLISH channel msg ：向一个频道发送消息<br> PSUBSCRIBE pattern[pattern] ：订阅与pattern格式匹配的所有频道</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653575506373.png\" alt=\"1653575506373\"></p>\n<p>基于PubSub的消息队列有哪些优缺点？<br>优点：</p>\n<ul>\n<li>采用发布订阅模型，支持多生产、多消费</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>不支持数据持久化</li>\n<li>无法避免消息丢失</li>\n<li>消息堆积有上限，超出时数据丢失</li>\n</ul>\n<h3 id=\"基于Stream的消息队列\"><a href=\"#基于Stream的消息队列\" class=\"headerlink\" title=\"基于Stream的消息队列\"></a>基于Stream的消息队列</h3><p>Stream 是 Redis 5.0 引入的一种新数据类型，可以实现一个功能非常完善的消息队列。</p>\n<p>发送消息的命令：</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653577301737.png\" alt=\"1653577301737\"></p>\n<p>例如：</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653577349691.png\" alt=\"1653577349691\"></p>\n<p>读取消息的方式之一：XREAD</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653577445413.png\" alt=\"1653577445413\"></p>\n<p>例如，使用XREAD读取第一个消息：</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653577643629.png\" alt=\"1653577643629\"></p>\n<p>XREAD阻塞方式，读取最新的消息：</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653577659166.png\" alt=\"1653577659166\"></p>\n<p>在业务开发中，可以循环的调用XREAD阻塞方式来查询最新消息，从而实现持续监听队列的效果，伪代码如下</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653577689129.png\" alt=\"1653577689129\"></p>\n<p>注意：当我们指定起始ID为$时，代表读取最新的消息，如果我们处理一条消息的过程中，又有超过1条以上的消息到达队列，则下次获取时也只能获取到最新的一条，会出现漏读消息的问题</p>\n<p>STREAM类型消息队列的XREAD命令特点：</p>\n<ul>\n<li>消息可回溯</li>\n<li>一个消息可以被多个消费者读取</li>\n<li>可以阻塞读取</li>\n<li>有消息漏读的风险</li>\n</ul>\n<h3 id=\"基于Stream的消息队列-消费者组\"><a href=\"#基于Stream的消息队列-消费者组\" class=\"headerlink\" title=\"基于Stream的消息队列-消费者组\"></a>基于Stream的消息队列-消费者组</h3><p>消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列。具备下列特点：</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653577801668.png\" alt=\"1653577801668\"></p>\n<p>创建消费者组：<br><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653577984924.png\" alt=\"1653577984924\"><br>key：队列名称<br>groupName：消费者组名称<br>ID：起始ID标示，$代表队列中最后一个消息，0则代表队列中第一个消息<br>MKSTREAM：队列不存在时自动创建队列<br>其它常见命令：</p>\n<p> <strong>删除指定的消费者组</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token constant\">XGROUP</span> <span class=\"token constant\">DESTORY</span> key groupName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> <strong>给指定的消费者组添加消费者</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token constant\">XGROUP</span> <span class=\"token constant\">CREATECONSUMER</span> key groupname consumername<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> <strong>删除消费者组中的指定消费者</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token constant\">XGROUP</span> <span class=\"token constant\">DELCONSUMER</span> key groupname consumername<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>从消费者组读取消息：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token constant\">XREADGROUP</span> <span class=\"token constant\">GROUP</span> group consumer <span class=\"token punctuation\">[</span><span class=\"token constant\">COUNT</span> count<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">BLOCK</span> milliseconds<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">NOACK</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">STREAMS</span> key <span class=\"token punctuation\">[</span>key <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">ID</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">ID</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>group：消费组名称</li>\n<li>consumer：消费者名称，如果消费者不存在，会自动创建一个消费者</li>\n<li>count：本次查询的最大数量</li>\n<li>BLOCK milliseconds：当没有消息时最长等待时间</li>\n<li>NOACK：无需手动ACK，获取到消息后自动确认</li>\n<li>STREAMS key：指定队列名称</li>\n<li>ID：获取消息的起始ID：</li>\n</ul>\n<p>“&gt;”：从下一个未消费的消息开始<br>其它：根据指定id从pending-list中获取已消费但未确认的消息，例如0，是从pending-list中的第一个消息开始</p>\n<p>消费者监听消息的基本思路：</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653578211854.png\" alt=\"1653578211854\">STREAM类型消息队列的XREADGROUP命令特点：</p>\n<ul>\n<li>消息可回溯</li>\n<li>可以多消费者争抢消息，加快消费速度</li>\n<li>可以阻塞读取</li>\n<li>没有消息漏读的风险</li>\n<li>有消息确认机制，保证消息至少被消费一次</li>\n</ul>\n<p>最后我们来个小对比</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653578560691.png\" alt=\"1653578560691\"></p>\n<h3 id=\"基于Redis的Stream结构作为消息队列，实现异步秒杀下单\"><a href=\"#基于Redis的Stream结构作为消息队列，实现异步秒杀下单\" class=\"headerlink\" title=\"基于Redis的Stream结构作为消息队列，实现异步秒杀下单\"></a>基于Redis的Stream结构作为消息队列，实现异步秒杀下单</h3><p>需求：</p>\n<ul>\n<li>创建一个Stream类型的消息队列，名为stream.orders</li>\n<li>修改之前的秒杀下单Lua脚本，在认定有抢购资格后，直接向stream.orders中添加消息，内容包含voucherId、userId、orderId</li>\n<li>项目启动时，开启一个线程任务，尝试获取stream.orders中的消息，完成下单</li>\n</ul>\n<p>修改lua表达式,新增3.6 </p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1656082824939.png\" alt=\"1656082824939\"></p>\n<p>VoucherOrderServiceImpl</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VoucherOrderHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 1.获取消息队列中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 ></span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MapRecord</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">StreamReadOptions</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">StreamOffset</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stream.orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ReadOffset</span><span class=\"token punctuation\">.</span><span class=\"token function\">lastConsumed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 2.判断订单信息是否为空</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 如果为null，说明没有消息，继续下一次循环</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">// 解析数据</span>\n                <span class=\"token class-name\">MapRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> record <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> value <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">VoucherOrder</span> voucherOrder <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">fillBeanWithMap</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VoucherOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 3.创建订单</span>\n                <span class=\"token function\">createVoucherOrder</span><span class=\"token punctuation\">(</span>voucherOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 4.确认消息 XACK</span>\n                stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">acknowledge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g1\"</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"处理订单异常\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//处理异常消息</span>\n                <span class=\"token function\">handlePendingList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handlePendingList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 1.获取pending-list中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 0</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MapRecord</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">StreamReadOptions</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">StreamOffset</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stream.orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ReadOffset</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 2.判断订单信息是否为空</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 如果为null，说明没有异常消息，结束循环</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">// 解析数据</span>\n                <span class=\"token class-name\">MapRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> record <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> value <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">VoucherOrder</span> voucherOrder <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">fillBeanWithMap</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VoucherOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 3.创建订单</span>\n                <span class=\"token function\">createVoucherOrder</span><span class=\"token punctuation\">(</span>voucherOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 4.确认消息 XACK</span>\n                stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">acknowledge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g1\"</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"处理pendding订单异常\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"Redis消息队列认识消息队列什么是消息队列：字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色： 消息队列：存储和管理消息，也被称为消息代理（Message Broker） 生产者：发送消息到消息队列 消费者：从消息队列获取消息并处理消息 使用队列的好处在于 解耦：所...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":11,"path":"api/tags/redis.json"},{"name":"Redis实战","slug":"Redis实战","count":10,"path":"api/tags/Redis实战.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97\"><span class=\"toc-text\">Redis消息队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E8%AF%86%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97\"><span class=\"toc-text\">认识消息队列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EList%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97\"><span class=\"toc-text\">基于List实现消息队列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EPubSub%E7%9A%84%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97\"><span class=\"toc-text\">基于PubSub的消息队列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EStream%E7%9A%84%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97\"><span class=\"toc-text\">基于Stream的消息队列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EStream%E7%9A%84%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E6%B6%88%E8%B4%B9%E8%80%85%E7%BB%84\"><span class=\"toc-text\">基于Stream的消息队列-消费者组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8ERedis%E7%9A%84Stream%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%BA%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E7%A7%92%E6%9D%80%E4%B8%8B%E5%8D%95\"><span class=\"toc-text\">基于Redis的Stream结构作为消息队列，实现异步秒杀下单</span></a></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Redis实战-点赞排行榜","uid":"6b1fcf8efc840ca23645e7afc15b96ff","slug":"Redis实战-点赞排行榜","date":"2023-06-06T01:30:08.000Z","updated":"2023-06-14T14:21:58.800Z","comments":true,"path":"api/articles/Redis实战-点赞排行榜.json","keywords":null,"cover":[],"text":"点赞排行榜点赞功能初始代码 @GetMapping(\"/likes/&#123;id&#125;\") public Result queryBlogLikes(@PathVariable(\"id\") Long id) &#123; //修改点赞数量 blogService.upd...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":11,"path":"api/tags/redis.json"},{"name":"Redis实战","slug":"Redis实战","count":10,"path":"api/tags/Redis实战.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"Redis实战-Redission分布式锁","uid":"b241352e87f784e0f5d32e5898f90895","slug":"Redis实战-Redission分布式锁","date":"2023-06-04T14:29:14.000Z","updated":"2023-06-14T14:22:32.062Z","comments":true,"path":"api/articles/Redis实战-Redission分布式锁.json","keywords":null,"cover":[],"text":"分布式锁-redission分布式锁-redission的功能基于setnx实现的分布式锁存在下面的问题： 重入问题：重入问题是指 获得锁的线程可以再次进入到相同的锁的代码块中，可重入锁的意义在于防止死锁 不可重试：是指目前的分布式只能尝试一次，合理的情况是：当线程在获得锁失败后...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":11,"path":"api/tags/redis.json"},{"name":"Redis实战","slug":"Redis实战","count":10,"path":"api/tags/Redis实战.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
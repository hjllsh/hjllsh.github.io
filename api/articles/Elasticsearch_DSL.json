{"title":"Elasticsearch_DSL","uid":"a3047e4f83f81595969b248afaf5a9f0","slug":"Elasticsearch_DSL","date":"2023-06-25T12:22:32.000Z","updated":"2023-06-26T08:30:34.939Z","comments":true,"path":"api/articles/Elasticsearch_DSL.json","keywords":null,"cover":[],"content":"<h1 id=\"DSL查询文档\"><a href=\"#DSL查询文档\" class=\"headerlink\" title=\"DSL查询文档\"></a>DSL查询文档</h1><p>elasticsearch的查询依然是基于JSON风格的DSL来实现的。</p>\n<h2 id=\"DSL查询分类\"><a href=\"#DSL查询分类\" class=\"headerlink\" title=\"DSL查询分类\"></a>DSL查询分类</h2><p>Elasticsearch提供了基于JSON的DSL（<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">Domain Specific Language</a>）来定义查询。常见的查询类型包括：</p>\n<ul>\n<li><p><strong>查询所有</strong>：查询出所有数据，一般测试用。例如：match_all</p>\n</li>\n<li><p><strong>全文检索（full text）查询</strong>：利用分词器对用户输入内容分词，然后去倒排索引库中匹配。例如：</p>\n<ul>\n<li>match</li>\n<li>multi_match</li>\n</ul>\n</li>\n<li><p><strong>精确查询</strong>：根据精确词条值查找数据，一般是查找keyword、数值、日期、boolean等类型字段。例如：</p>\n<ul>\n<li>ids</li>\n<li>range</li>\n<li>term</li>\n</ul>\n</li>\n<li><p><strong>地理（geo）查询</strong>：根据经纬度查询。例如：</p>\n<ul>\n<li>geo_distance</li>\n<li>geo_bounding_box</li>\n</ul>\n</li>\n<li><p><strong>复合（compound）查询</strong>：复合查询可以将上述各种查询条件组合起来，合并查询条件。例如：</p>\n<ul>\n<li>bool</li>\n<li>function_score</li>\n</ul>\n</li>\n</ul>\n<p>查询的语法基本一致：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">GET /indexName/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"查询类型\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"查询条件\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"条件值\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"全文检索查询\"><a href=\"#全文检索查询\" class=\"headerlink\" title=\"全文检索查询\"></a>全文检索查询</h2><p>全文检索查询的基本流程如下：</p>\n<ul>\n<li>对用户搜索的内容做分词，得到词条</li>\n<li>根据词条去倒排索引库中匹配，得到文档id</li>\n<li>根据文档id找到文档，返回给用户</li>\n</ul>\n<p>因为是拿着词条去匹配，因此参与搜索的字段也必须是可分词的text类型的字段。</p>\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><p>常见的全文检索查询包括：</p>\n<ul>\n<li>match查询：单字段查询</li>\n<li>multi_match查询：多字段查询，任意一个字段符合条件就算符合查询条件</li>\n</ul>\n<p>match查询语法如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">GET /indexName/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"FIELD\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TEXT\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>mulit_match语法如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">GET /indexName/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"multi_match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TEXT\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"fields\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"FIELD1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" FIELD12\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>match查询示例：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721170455419.png\" alt=\"image-20210721170455419\"></p>\n<p>multi_match查询示例：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721170720691.png\" alt=\"image-20210721170720691\"></p>\n<p>两种查询结果是一样的，因为我们将brand、name、business值都利用copy_to复制到了all字段中。因此你根据三个字段搜索，和根据all字段搜索效果当然一样了。但是，搜索字段越多，对查询性能影响越大，因此建议采用copy_to，然后单字段查询的方式。</p>\n<h2 id=\"精准查询\"><a href=\"#精准查询\" class=\"headerlink\" title=\"精准查询\"></a>精准查询</h2><p>精确查询一般是查找keyword、数值、日期、boolean等类型字段。所以<strong>不会</strong>对搜索条件分词。常见的有：</p>\n<ul>\n<li>term：根据词条精确值查询</li>\n<li>range：根据值的范围查询</li>\n</ul>\n<h3 id=\"term查询\"><a href=\"#term查询\" class=\"headerlink\" title=\"term查询\"></a>term查询</h3><p>因为精确查询的字段搜是不分词的字段，因此查询的条件也必须是<strong>不分词</strong>的词条。查询时，用户输入的内容跟自动值完全匹配时才认为符合条件。如果用户输入的内容过多，反而搜索不到数据。</p>\n<p>term查询：根据词条精确匹配，一般搜索keyword类型、数值类型、布尔类型、日期类型字段</p>\n<p>语法说明：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// term查询</span>\nGET /indexName/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"term\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"FIELD\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VALUE\"</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>示例：</p>\n<p>当我搜索的是精确词条时，能正确查询出结果：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721171655308.png\" alt=\"image-20210721171655308\"></p>\n<p>但是，当我搜索的内容不是词条，而是多个词语形成的短语时，反而搜索不到：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721171838378.png\" alt=\"image-20210721171838378\"></p>\n<h3 id=\"range查询\"><a href=\"#range查询\" class=\"headerlink\" title=\"range查询\"></a>range查询</h3><p>范围查询，一般应用在对数值类型做范围过滤的时候。比如做价格范围过滤。</p>\n<p>range查询：根据数值范围查询，可以是数值、日期的范围</p>\n<p>基本语法：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// range查询</span>\nGET /indexName/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"range\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"FIELD\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"gte\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 这里的gte代表大于等于，gt则代表大于</span>\n        <span class=\"token property\">\"lte\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token comment\">// lte代表小于等于，lt则代表小于</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>示例：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721172307172.png\" alt=\"image-20210721172307172\"></p>\n<h2 id=\"地理坐标查询\"><a href=\"#地理坐标查询\" class=\"headerlink\" title=\"地理坐标查询\"></a>地理坐标查询</h2><h3 id=\"矩形范围查询\"><a href=\"#矩形范围查询\" class=\"headerlink\" title=\"矩形范围查询\"></a>矩形范围查询</h3><p>矩形范围查询，也就是geo_bounding_box查询，查询坐标落在某个矩形范围的所有文档：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\DKV9HZbVS6.gif\" alt=\"DKV9HZbVS6\"></p>\n<p>查询时，需要指定矩形的<strong>左上</strong>、<strong>右下</strong>两个点的坐标，然后画出一个矩形，落在该矩形内的都是符合条件的点。</p>\n<p>语法如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// geo_bounding_box查询</span>\nGET /indexName/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"geo_bounding_box\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"FIELD\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"top_left\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 左上点</span>\n          <span class=\"token property\">\"lat\"</span><span class=\"token operator\">:</span> <span class=\"token number\">31.1</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"lon\"</span><span class=\"token operator\">:</span> <span class=\"token number\">121.5</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"bottom_right\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 右下点</span>\n          <span class=\"token property\">\"lat\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30.9</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"lon\"</span><span class=\"token operator\">:</span> <span class=\"token number\">121.7</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"附近查询\"><a href=\"#附近查询\" class=\"headerlink\" title=\"附近查询\"></a>附近查询</h3><p>附近查询，也叫做距离查询（geo_distance）：查询到指定中心点小于某个距离值的所有文档。</p>\n<p>换句话来说，在地图上找一个点作为圆心，以指定距离为半径，画一个圆，落在圆内的坐标都算符合条件：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\vZrdKAh19C.gif\" alt=\"vZrdKAh19C\"></p>\n<p>语法说明：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// geo_distance 查询</span>\nGET /indexName/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"geo_distance\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"distance\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"15km\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 半径</span>\n      <span class=\"token property\">\"FIELD\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"31.21,121.5\"</span> <span class=\"token comment\">// 圆心</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们先搜索陆家嘴附近15km的酒店：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721175443234.png\" alt=\"image-20210721175443234\"></p>\n<h2 id=\"复合查询\"><a href=\"#复合查询\" class=\"headerlink\" title=\"复合查询\"></a>复合查询</h2><p>复合（compound）查询：复合查询可以将其它简单查询组合起来，实现更复杂的搜索逻辑。常见的有两种：</p>\n<ul>\n<li>fuction_score：算分函数查询，可以控制文档相关性算分，控制文档排名</li>\n<li>bool：布尔查询，利用逻辑关系组合多个其它的查询，实现复杂搜索</li>\n</ul>\n<h3 id=\"相关性算分\"><a href=\"#相关性算分\" class=\"headerlink\" title=\"相关性算分\"></a>相关性算分</h3><p>当我们利用match查询时，文档结果会根据与搜索词条的关联度打分（_score），返回结果时按照分值降序排列。</p>\n<p>例如，我们搜索 “虹桥如家”，结果如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"_score\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">17.850193</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"_source\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"虹桥如家酒店真不错\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"_score\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">12.259849</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"_source\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"外滩如家酒店真不错\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在elasticsearch中，早期使用的打分算法是TF-IDF算法，公式如下：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721190152134.png\" alt=\"image-20210721190152134\"></p>\n<p>在后来的5.1版本升级中，elasticsearch将算法改进为BM25算法，公式如下：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721190416214.png\" alt=\"image-20210721190416214\"></p>\n<p>TF-IDF算法有一各缺陷，就是词条频率越高，文档得分也会越高，单个词条对文档影响较大。而BM25则会让单个词条的算分有一个上限，曲线更加平滑：</p>\n<p><img src=\"D:/SpringCloud_MYH/day06-Elasticsearch02/讲义/assets/image-20210721190907320.png\" alt=\"image-20210721190907320\"></p>\n<p>小结：elasticsearch会根据词条和文档的相关度做打分，算法由两种：</p>\n<ul>\n<li>TF-IDF算法</li>\n<li>BM25算法，elasticsearch5.1版本后采用的算法</li>\n</ul>\n<h3 id=\"算分函数查询\"><a href=\"#算分函数查询\" class=\"headerlink\" title=\"算分函数查询\"></a>算分函数查询</h3><p>控制相关性算分，就需要利用elasticsearch中的function score 查询了。</p>\n<h4 id=\"语法说明\"><a href=\"#语法说明\" class=\"headerlink\" title=\"语法说明\"></a>语法说明</h4><p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721191544750.png\" alt=\"image-20210721191544750\"></p>\n<p>function score 查询中包含四部分内容：</p>\n<ul>\n<li><strong>原始查询</strong>条件：query部分，基于这个条件搜索文档，并且基于BM25算法给文档打分，<strong>原始算分</strong>（query score)</li>\n<li><strong>过滤条件</strong>：filter部分，符合该条件的文档才会重新算分</li>\n<li><strong>算分函数</strong>：符合filter条件的文档要根据这个函数做运算，得到的<strong>函数算分</strong>（function score），有四种函数<ul>\n<li>weight：函数结果是常量</li>\n<li>field_value_factor：以文档中的某个字段值作为函数结果</li>\n<li>random_score：以随机数作为函数结果</li>\n<li>script_score：自定义算分函数算法</li>\n</ul>\n</li>\n<li><strong>运算模式</strong>：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括：<ul>\n<li>multiply：相乘</li>\n<li>replace：用function score替换query score</li>\n<li>其它，例如：sum、avg、max、min</li>\n</ul>\n</li>\n</ul>\n<p>function score的运行流程如下：</p>\n<ul>\n<li>1）根据<strong>原始条件</strong>查询搜索文档，并且计算相关性算分，称为<strong>原始算分</strong>（query score）</li>\n<li>2）根据<strong>过滤条件</strong>，过滤文档</li>\n<li>3）符合<strong>过滤条件</strong>的文档，基于<strong>算分函数</strong>运算，得到<strong>函数算分</strong>（function score）</li>\n<li>4）将<strong>原始算分</strong>（query score）和<strong>函数算分</strong>（function score）基于<strong>运算模式</strong>做运算，得到最终结果，作为相关性算分。</li>\n</ul>\n<p>因此，其中的关键点是：</p>\n<ul>\n<li>过滤条件：决定哪些文档的算分被修改</li>\n<li>算分函数：决定函数算分的算法</li>\n<li>运算模式：决定最终算分结果</li>\n</ul>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>需求：给“如家”这个品牌的酒店排名靠前一些</p>\n<p>翻译一下这个需求，转换为之前说的四个要点：</p>\n<ul>\n<li>原始条件：不确定，可以任意变化</li>\n<li>过滤条件：brand &#x3D; “如家”</li>\n<li>算分函数：可以简单粗暴，直接给固定的算分结果，weight</li>\n<li>运算模式：比如求和</li>\n</ul>\n<p>因此最终的DSL语句如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">GET /hotel/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"function_score\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>  .... <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 原始查询，可以是任意条件</span>\n      <span class=\"token property\">\"functions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">// 算分函数</span>\n        <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token property\">\"filter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 满足的条件，品牌必须是如家</span>\n            <span class=\"token property\">\"term\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token property\">\"brand\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"如家\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"weight\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 算分权重为2</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"boost_mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sum\"</span> <span class=\"token comment\">// 加权模式，求和</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>测试，在未添加算分函数时，如家得分如下：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721193152520.png\" alt=\"image-20210721193152520\"></p>\n<p>添加了算分函数后，如家得分就提升了：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721193458182.png\" alt=\"image-20210721193458182\"></p>\n<h3 id=\"布尔查询\"><a href=\"#布尔查询\" class=\"headerlink\" title=\"布尔查询\"></a>布尔查询</h3><p>布尔查询是一个或多个查询子句的组合，每一个子句就是一个<strong>子查询</strong>。子查询的组合方式有：</p>\n<ul>\n<li>must：必须匹配每个子查询，类似“与”</li>\n<li>should：选择性匹配子查询，类似“或”</li>\n<li>must_not：必须不匹配，<strong>不参与算分</strong>，类似“非”</li>\n<li>filter：必须匹配，<strong>不参与算分</strong></li>\n</ul>\n<p>比如在搜索酒店时，除了关键字搜索外，我们还可能根据品牌、价格、城市等字段做过滤：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721193822848.png\" alt=\"image-20210721193822848\"></p>\n<p>每一个不同的字段，其查询的条件、方式都不一样，必须是多个不同的查询，而要组合这些查询，就必须用bool查询了。</p>\n<p>需要注意的是，搜索时，参与<strong>打分的字段越多，查询的性能也越差</strong>。因此这种多条件查询时，建议这样做：</p>\n<ul>\n<li>搜索框的关键字搜索，是全文检索查询，使用must查询，参与算分</li>\n<li>其它过滤条件，采用filter查询。不参与算分</li>\n</ul>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">GET /hotel/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"bool\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"must\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"term\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"city\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"上海\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"should\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"term\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"brand\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"皇冠假日\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"term\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"brand\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"华美达\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"must_not\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"range\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"lte\"</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"filter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"range\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"score\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"gte\"</span><span class=\"token operator\">:</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>需求：搜索名字包含“如家”，价格不高于400，在坐标31.21,121.5周围10km范围内的酒店。</p>\n<p>分析：</p>\n<ul>\n<li>名称搜索，属于全文检索查询，应该参与算分。放到must中</li>\n<li>价格不高于400，用range查询，属于过滤条件，不参与算分。放到must_not中</li>\n<li>周围10km范围内，用geo_distance查询，属于过滤条件，不参与算分。放到filter中</li>\n</ul>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721194744183.png\" alt=\"image-20210721194744183\"></p>\n<h1 id=\"搜索结果处理\"><a href=\"#搜索结果处理\" class=\"headerlink\" title=\"搜索结果处理\"></a>搜索结果处理</h1><h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><p>elasticsearch默认是根据相关度算分（_score）来排序，但是也支持自定义方式对搜索结果排序。可以排序字段类型有：keyword类型、数值类型、地理坐标类型、日期类型等。</p>\n<h3 id=\"普通字段排序\"><a href=\"#普通字段排序\" class=\"headerlink\" title=\"普通字段排序\"></a>普通字段排序</h3><p>keyword、数值、日期类型排序的语法基本一致。</p>\n<p><strong>语法</strong>：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">GET /indexName/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"match_all\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sort\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"FIELD\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"desc\"</span>  <span class=\"token comment\">// 排序字段、排序方式ASC、DESC</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>排序条件是一个数组，也就是可以写多个排序条件。按照声明的顺序，当第一个条件相等时，再按照第二个条件排序，以此类推</p>\n<p><strong>示例</strong>：</p>\n<p>需求描述：酒店数据按照用户评价（score)降序排序，评价相同的按照价格(price)升序排序</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721195728306.png\" alt=\"image-20210721195728306\"></p>\n<h3 id=\"地理坐标排序\"><a href=\"#地理坐标排序\" class=\"headerlink\" title=\"地理坐标排序\"></a>地理坐标排序</h3><p>地理坐标排序略有不同。</p>\n<p><strong>语法说明</strong>：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">GET /indexName/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"match_all\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sort\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"geo_distance\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token property\">\"FIELD\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"纬度，经度\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 文档中geo_point类型的字段名、目标坐标点</span>\n          <span class=\"token property\">\"order\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"asc\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 排序方式</span>\n          <span class=\"token property\">\"unit\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"km\"</span> <span class=\"token comment\">// 排序的距离单位</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个查询的含义是：</p>\n<ul>\n<li>指定一个坐标，作为目标点</li>\n<li>计算每一个文档中，指定字段（必须是geo_point类型）的坐标 到目标点的距离是多少</li>\n<li>根据距离排序</li>\n</ul>\n<p><strong>示例：</strong></p>\n<p>需求描述：实现对酒店数据按照到你的位置坐标的距离升序排序</p>\n<p>假设我的位置是：31.034661，121.612282，寻找我周围距离最近的酒店。</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721200214690.png\" alt=\"image-20210721200214690\"></p>\n<h2 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h2><p>elasticsearch 默认情况下只返回top10的数据。而如果要查询更多数据就需要修改分页参数了。elasticsearch中通过修改from、size参数来控制要返回的分页结果：</p>\n<ul>\n<li>from：从第几个文档开始</li>\n<li>size：总共查询几个文档</li>\n</ul>\n<p>类似于mysql中的<code>limit ?, ?</code></p>\n<h3 id=\"2-2-1-基本的分页\"><a href=\"#2-2-1-基本的分页\" class=\"headerlink\" title=\"2.2.1.基本的分页\"></a>2.2.1.基本的分页</h3><p>分页的基本语法如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">GET /hotel/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"match_all\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"from\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 分页开始的位置，默认为0</span>\n  <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 期望获取的文档总数</span>\n  <span class=\"token property\">\"sort\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"asc\"</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"深度分页问题\"><a href=\"#深度分页问题\" class=\"headerlink\" title=\"深度分页问题\"></a>深度分页问题</h3><p>现在，我要查询990~1000的数据，查询逻辑要这么写：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">GET /hotel/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"match_all\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"from\"</span><span class=\"token operator\">:</span> <span class=\"token number\">990</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 分页开始的位置，默认为0</span>\n  <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 期望获取的文档总数</span>\n  <span class=\"token property\">\"sort\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"asc\"</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里是查询990开始的数据，也就是 第990~第1000条 数据。</p>\n<p>不过，elasticsearch内部分页时，必须先查询 0~1000条，然后截取其中的990 ~ 1000的这10条：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721200643029.png\" alt=\"image-20210721200643029\"></p>\n<p>查询TOP1000，如果es是单点模式，这并无太大影响。</p>\n<p>但是elasticsearch将来一定是集群，例如我集群有5个节点，我要查询TOP1000的数据，并不是每个节点查询200条就可以了。</p>\n<p>因为节点A的TOP200，在另一个节点可能排到10000名以外了。</p>\n<p>因此要想获取整个集群的TOP1000，必须先查询出每个节点的TOP1000，汇总结果后，重新排名，重新截取TOP1000。</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721201003229.png\" alt=\"image-20210721201003229\"></p>\n<p>那如果我要查询9900~10000的数据呢？是不是要先查询TOP10000呢？那每个节点都要查询10000条？汇总到内存中？</p>\n<p>当查询分页深度较大时，汇总数据过多，对内存和CPU会产生非常大的压力，因此elasticsearch会禁止from+ size 超过10000的请求。</p>\n<p>针对深度分页，ES提供了两种解决方案，<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html\">官方文档</a>：</p>\n<ul>\n<li>search after：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式。</li>\n<li>scroll：原理将排序后的文档id形成快照，保存在内存。官方已经不推荐使用。</li>\n</ul>\n<h4 id=\"分页查询的常见实现方案以及优缺点：\"><a href=\"#分页查询的常见实现方案以及优缺点：\" class=\"headerlink\" title=\"分页查询的常见实现方案以及优缺点：\"></a>分页查询的常见实现方案以及优缺点：</h4><ul>\n<li><p><code>from + size</code>：</p>\n<ul>\n<li>优点：支持随机翻页</li>\n<li>缺点：深度分页问题，默认查询上限（from + size）是10000</li>\n<li>场景：百度、京东、谷歌、淘宝这样的随机翻页搜索</li>\n</ul>\n</li>\n<li><p><code>after search</code>：</p>\n<ul>\n<li>优点：没有查询上限（单次查询的size不超过10000）</li>\n<li>缺点：只能向后逐页查询，不支持随机翻页</li>\n<li>场景：没有随机翻页需求的搜索，例如手机向下滚动翻页</li>\n</ul>\n</li>\n<li><p><code>scroll</code>：</p>\n<ul>\n<li>优点：没有查询上限（单次查询的size不超过10000）</li>\n<li>缺点：会有额外内存消耗，并且搜索结果是非实时的</li>\n<li>场景：海量数据的获取和迁移。从ES7.1开始不推荐，建议用 after search方案。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"高亮\"><a href=\"#高亮\" class=\"headerlink\" title=\"高亮\"></a>高亮</h2><h3 id=\"高亮原理\"><a href=\"#高亮原理\" class=\"headerlink\" title=\"高亮原理\"></a>高亮原理</h3><p>高亮显示的实现分为两步：</p>\n<ul>\n<li>1）给文档中的所有关键字都添加一个标签，例如<code>&lt;em&gt;</code>标签</li>\n<li>2）页面给<code>&lt;em&gt;</code>标签编写CSS样式</li>\n</ul>\n<h3 id=\"实现高亮\"><a href=\"#实现高亮\" class=\"headerlink\" title=\"实现高亮\"></a>实现高亮</h3><p><strong>高亮的语法</strong>：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">GET /hotel/_search\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"FIELD\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TEXT\"</span> <span class=\"token comment\">// 查询条件，高亮一定要使用全文检索查询</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"highlight\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"fields\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 指定要高亮的字段</span>\n      <span class=\"token property\">\"FIELD\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"pre_tags\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;em>\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 用来标记高亮字段的前置标签</span>\n        <span class=\"token property\">\"post_tags\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;/em>\"</span> <span class=\"token comment\">// 用来标记高亮字段的后置标签</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意：</strong></p>\n<ul>\n<li>高亮是对关键字高亮，因此<strong>搜索条件必须带有关键字</strong>，而不能是范围这样的查询。</li>\n<li>默认情况下，<strong>高亮的字段，必须与搜索指定的字段一致</strong>，否则无法高亮</li>\n<li>如果要对<strong>非搜索字段高亮</strong>，则需要添加一个属性：required_field_match&#x3D;false</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721203349633.png\" alt=\"image-20210721203349633\"></p>\n<p>查询的DSL是一个大的JSON对象，包含下列属性：</p>\n<ul>\n<li>query：查询条件</li>\n<li>from和size：分页条件</li>\n<li>sort：排序条件</li>\n<li>highlight：高亮条件</li>\n</ul>\n<p>示例：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721203657850.png\" alt=\"image-20210721203657850\"></p>\n<h1 id=\"RestClient查询文档\"><a href=\"#RestClient查询文档\" class=\"headerlink\" title=\"RestClient查询文档\"></a>RestClient查询文档</h1><p>文档的查询同样适用昨天学习的 RestHighLevelClient对象，基本步骤包括：</p>\n<ul>\n<li>1）准备Request对象</li>\n<li>2）准备请求参数</li>\n<li>3）发起请求</li>\n<li>4）解析响应</li>\n</ul>\n<h3 id=\"发起查询请求\"><a href=\"#发起查询请求\" class=\"headerlink\" title=\"发起查询请求\"></a>发起查询请求</h3><p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721203950559.png\" alt=\"image-20210721203950559\"></p>\n<p>代码解读：</p>\n<ul>\n<li><p>第一步，创建<code>SearchRequest</code>对象，指定索引库名</p>\n</li>\n<li><p>第二步，利用<code>request.source()</code>构建DSL，DSL中可以包含查询、分页、排序、高亮等</p>\n<ul>\n<li><code>query()</code>：代表查询条件，利用<code>QueryBuilders.matchAllQuery()</code>构建一个match_all查询的DSL</li>\n</ul>\n</li>\n<li><p>第三步，利用client.search()发送请求，得到响应</p>\n</li>\n</ul>\n<p>这里关键的API有两个，一个是<code>request.source()</code>，其中包含了查询、排序、分页、高亮等所有功能：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721215640790.png\" alt=\"image-20210721215640790\"></p>\n<p>另一个是<code>QueryBuilders</code>，其中包含match、term、function_score、bool等各种查询：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721215729236.png\" alt=\"image-20210721215729236\"></p>\n<h3 id=\"解析响应\"><a href=\"#解析响应\" class=\"headerlink\" title=\"解析响应\"></a>解析响应</h3><p>响应结果的解析：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721214221057.png\" alt=\"image-20210721214221057\"></p>\n<p>elasticsearch返回的结果是一个JSON字符串，结构包含：</p>\n<ul>\n<li><code>hits</code>：命中的结果<ul>\n<li><code>total</code>：总条数，其中的value是具体的总条数值</li>\n<li><code>max_score</code>：所有结果中得分最高的文档的相关性算分</li>\n<li><code>hits</code>：搜索结果的文档数组，其中的每个文档都是一个json对象<ul>\n<li><code>_source</code>：文档中的原始数据，也是json对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>因此，我们解析响应结果，就是逐层解析JSON字符串，流程如下：</p>\n<ul>\n<li><code>SearchHits</code>：通过response.getHits()获取，就是JSON中的最外层的hits，代表命中的结果<ul>\n<li><code>SearchHits#getTotalHits().value</code>：获取总条数信息</li>\n<li><code>SearchHits#getHits()</code>：获取SearchHit数组，也就是文档数组<ul>\n<li><code>SearchHit#getSourceAsString()</code>：获取文档结果中的_source，也就是原始的json文档数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>完整代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testMatchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.准备Request</span>\n    <span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.准备DSL</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchAllQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.发送请求</span>\n    <span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 4.解析响应</span>\n    <span class=\"token function\">handleResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 4.解析响应</span>\n    <span class=\"token class-name\">SearchHits</span> searchHits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4.1.获取总条数</span>\n    <span class=\"token keyword\">long</span> total <span class=\"token operator\">=</span> searchHits<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"共搜索到\"</span> <span class=\"token operator\">+</span> total <span class=\"token operator\">+</span> <span class=\"token string\">\"条数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4.2.文档数组</span>\n    <span class=\"token class-name\">SearchHit</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hits <span class=\"token operator\">=</span> searchHits<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4.3.遍历</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchHit</span> hit <span class=\"token operator\">:</span> hits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 获取文档source</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> hit<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 反序列化</span>\n        <span class=\"token class-name\">HotelDoc</span> hotelDoc <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HotelDoc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotelDoc = \"</span> <span class=\"token operator\">+</span> hotelDoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"3-1-4-小结\"><a href=\"#3-1-4-小结\" class=\"headerlink\" title=\"3.1.4.小结\"></a>3.1.4.小结</h3><p>查询的基本步骤是：</p>\n<ol>\n<li><p>创建SearchRequest对象</p>\n</li>\n<li><p>准备Request.source()，也就是DSL。</p>\n<p>① QueryBuilders来构建查询条件</p>\n<p>② 传入Request.source() 的 query() 方法</p>\n</li>\n<li><p>发送请求，得到结果</p>\n</li>\n<li><p>解析结果（参考JSON结果，从外到内，逐层解析）</p>\n</li>\n</ol>\n<h2 id=\"match查询\"><a href=\"#match查询\" class=\"headerlink\" title=\"match查询\"></a>match查询</h2><p>全文检索的match和multi_match查询与match_all的API基本一致。差别是查询条件，也就是query的部分。</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721215923060.png\" alt=\"image-20210721215923060\"> </p>\n<p>因此，Java代码上的差异主要是request.source().query()中的参数了。同样是利用QueryBuilders提供的方法：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721215843099.png\" alt=\"image-20210721215843099\"> </p>\n<p>而结果解析代码则完全一致，可以抽取并共享。</p>\n<p>完整代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testMatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.准备Request</span>\n    <span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.准备DSL</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"如家\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.发送请求</span>\n    <span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4.解析响应</span>\n    <span class=\"token function\">handleResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"精确查询\"><a href=\"#精确查询\" class=\"headerlink\" title=\"精确查询\"></a>精确查询</h2><p>精确查询主要是两者：</p>\n<ul>\n<li>term：词条精确匹配</li>\n<li>range：范围查询</li>\n</ul>\n<p>与之前的查询相比，差异同样在查询条件，其它都一样。</p>\n<p>查询条件构造的API如下：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721220305140.png\" alt=\"image-20210721220305140\"> </p>\n<h2 id=\"布尔查询-1\"><a href=\"#布尔查询-1\" class=\"headerlink\" title=\"布尔查询\"></a>布尔查询</h2><p>布尔查询是用must、must_not、filter等方式组合其它查询，代码示例如下：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721220927286.png\" alt=\"image-20210721220927286\"></p>\n<p>可以看到，API与其它查询的差别同样是在查询条件的构建，QueryBuilders，结果解析等其他代码完全不变。</p>\n<p>完整代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.准备Request</span>\n    <span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.准备DSL</span>\n    <span class=\"token comment\">// 2.1.准备BooleanQuery</span>\n    <span class=\"token class-name\">BoolQueryBuilder</span> boolQuery <span class=\"token operator\">=</span> <span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">boolQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.2.添加term</span>\n    boolQuery<span class=\"token punctuation\">.</span><span class=\"token function\">must</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">termQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"city\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"杭州\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.3.添加range</span>\n    boolQuery<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">rangeQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"price\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lte</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>boolQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.发送请求</span>\n    <span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4.解析响应</span>\n    <span class=\"token function\">handleResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"排序、分页\"><a href=\"#排序、分页\" class=\"headerlink\" title=\"排序、分页\"></a>排序、分页</h2><p>搜索结果的排序和分页是与query同级的参数，因此同样是使用request.source()来设置。</p>\n<p>对应的API如下：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721221121266.png\" alt=\"image-20210721221121266\"></p>\n<p>完整代码示例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testPageAndSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 页码，每页大小</span>\n    <span class=\"token keyword\">int</span> page <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 1.准备Request</span>\n    <span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.准备DSL</span>\n    <span class=\"token comment\">// 2.1.query</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchAllQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.2.排序 sort</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"price\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SortOrder</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ASC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.3.分页 from、size</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.发送请求</span>\n    <span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4.解析响应</span>\n    <span class=\"token function\">handleResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"高亮-1\"><a href=\"#高亮-1\" class=\"headerlink\" title=\"高亮\"></a>高亮</h2><p>高亮的代码与之前代码差异较大，有两点：</p>\n<ul>\n<li>查询的DSL：其中除了查询条件，还需要添加高亮条件，同样是与query同级。</li>\n<li>结果解析：结果除了要解析_source文档数据，还要解析高亮结果</li>\n</ul>\n<h3 id=\"高亮请求构建\"><a href=\"#高亮请求构建\" class=\"headerlink\" title=\"高亮请求构建\"></a>高亮请求构建</h3><p>高亮请求的构建API如下：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721221744883.png\" alt=\"image-20210721221744883\"></p>\n<p>上述代码省略了查询条件部分，但是大家不要忘了：高亮查询必须使用<strong>全文检索查询</strong>，并且要有搜索关键字，将来才可以对关键字高亮。</p>\n<p>完整代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testHighlight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.准备Request</span>\n    <span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.准备DSL</span>\n    <span class=\"token comment\">// 2.1.query</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"如家\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.2.高亮</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">highlighter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HighlightBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireFieldMatch</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.发送请求</span>\n    <span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4.解析响应</span>\n    <span class=\"token function\">handleResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"高亮结果解析\"><a href=\"#高亮结果解析\" class=\"headerlink\" title=\"高亮结果解析\"></a>高亮结果解析</h3><p>高亮的结果与查询的文档结果默认是分离的，并不在一起。</p>\n<p>因此解析高亮的代码需要额外处理：</p>\n<p><img src=\"E:\\blog\\hjllsh\\source\\assets\\ES\\image-20210721222057212.png\" alt=\"image-20210721222057212\"></p>\n<p>代码解读：</p>\n<ul>\n<li>第一步：从结果中获取source。hit.getSourceAsString()，这部分是非高亮结果，json字符串。还需要反序列为HotelDoc对象</li>\n<li>第二步：获取高亮结果。hit.getHighlightFields()，返回值是一个Map，key是高亮字段名称，值是HighlightField对象，代表高亮值</li>\n<li>第三步：从map中根据高亮字段名称，获取高亮字段值对象HighlightField</li>\n<li>第四步：从HighlightField中获取Fragments，并且转为字符串。这部分就是真正的高亮字符串了</li>\n<li>第五步：用高亮的结果替换HotelDoc中的非高亮结果</li>\n</ul>\n<p>完整代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 4.解析响应</span>\n    <span class=\"token class-name\">SearchHits</span> searchHits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4.1.获取总条数</span>\n    <span class=\"token keyword\">long</span> total <span class=\"token operator\">=</span> searchHits<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"共搜索到\"</span> <span class=\"token operator\">+</span> total <span class=\"token operator\">+</span> <span class=\"token string\">\"条数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4.2.文档数组</span>\n    <span class=\"token class-name\">SearchHit</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hits <span class=\"token operator\">=</span> searchHits<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4.3.遍历</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchHit</span> hit <span class=\"token operator\">:</span> hits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 获取文档source</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> hit<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 反序列化</span>\n        <span class=\"token class-name\">HotelDoc</span> hotelDoc <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HotelDoc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取高亮结果</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HighlightField</span><span class=\"token punctuation\">></span></span> highlightFields <span class=\"token operator\">=</span> hit<span class=\"token punctuation\">.</span><span class=\"token function\">getHighlightFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>highlightFields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 根据字段名获取高亮结果</span>\n            <span class=\"token class-name\">HighlightField</span> highlightField <span class=\"token operator\">=</span> highlightFields<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>highlightField <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 获取高亮值</span>\n                <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> highlightField<span class=\"token punctuation\">.</span><span class=\"token function\">getFragments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 覆盖非高亮结果</span>\n                hotelDoc<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotelDoc = \"</span> <span class=\"token operator\">+</span> hotelDoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n","feature":true,"text":"DSL查询文档elasticsearch的查询依然是基于JSON风格的DSL来实现的。 DSL查询分类Elasticsearch提供了基于JSON的DSL（Domain Specific Language）来定义查询。常见的查询类型包括： 查询所有：查询出所有数据，一般测试用。例...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","count":2,"path":"api/tags/Elasticsearch.json"},{"name":"实战","slug":"实战","count":1,"path":"api/tags/实战.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#DSL%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">DSL查询文档</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DSL%E6%9F%A5%E8%AF%A2%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">DSL查询分类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">全文检索查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">基本语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B2%BE%E5%87%86%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">精准查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#term%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">term查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#range%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">range查询</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">地理坐标查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9F%A9%E5%BD%A2%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">矩形范围查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%99%84%E8%BF%91%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">附近查询</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%90%88%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">复合查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3%E6%80%A7%E7%AE%97%E5%88%86\"><span class=\"toc-text\">相关性算分</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E5%88%86%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">算分函数查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">语法说明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-1\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%83%E5%B0%94%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">布尔查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%9A\"><span class=\"toc-text\">示例：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-2\"><span class=\"toc-text\">示例</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E5%A4%84%E7%90%86\"><span class=\"toc-text\">搜索结果处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%99%AE%E9%80%9A%E5%AD%97%E6%AE%B5%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">普通字段排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">地理坐标排序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%A1%B5\"><span class=\"toc-text\">分页</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-1-%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%88%86%E9%A1%B5\"><span class=\"toc-text\">2.2.1.基本的分页</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">深度分页问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%B8%B8%E8%A7%81%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88%E4%BB%A5%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">分页查询的常见实现方案以及优缺点：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AB%98%E4%BA%AE\"><span class=\"toc-text\">高亮</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E4%BA%AE%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">高亮原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E9%AB%98%E4%BA%AE\"><span class=\"toc-text\">实现高亮</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#RestClient%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">RestClient查询文档</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%91%E8%B5%B7%E6%9F%A5%E8%AF%A2%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">发起查询请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%90%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">解析响应</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-4-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">3.1.4.小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#match%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">match查询</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B2%BE%E7%A1%AE%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">精确查询</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%83%E5%B0%94%E6%9F%A5%E8%AF%A2-1\"><span class=\"toc-text\">布尔查询</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%E3%80%81%E5%88%86%E9%A1%B5\"><span class=\"toc-text\">排序、分页</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AB%98%E4%BA%AE-1\"><span class=\"toc-text\">高亮</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E4%BA%AE%E8%AF%B7%E6%B1%82%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">高亮请求构建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E4%BA%AE%E7%BB%93%E6%9E%9C%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">高亮结果解析</span></a></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Elasticsearch_基础篇","uid":"9a2b3773acf33bcdefc6399e19f6d844","slug":"Elasticsearch_基础篇","date":"2023-06-24T08:27:29.000Z","updated":"2023-06-24T15:41:15.088Z","comments":true,"path":"api/articles/Elasticsearch_基础篇.json","keywords":null,"cover":[],"text":"倒排索引倒排索引的概念是基于MySQL这样的正向索引而言的。 正向索引那么什么是正向索引呢？例如给下表（tb_goods）中的id创建索引： 如果是根据id查询，那么直接走索引，查询速度非常快。 如果是基于title做模糊查询，只能逐行扫描数据，也就是全表扫描，随着数据量增加，其...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","count":2,"path":"api/tags/Elasticsearch.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true}}
{"title":"微服务_入门","uid":"fe3fb8c55b48b7e212cb33aae1728c63","slug":"微服务-入门","date":"2023-06-08T09:44:27.000Z","updated":"2023-06-10T15:48:11.230Z","comments":true,"path":"api/articles/微服务-入门.json","keywords":null,"cover":[],"content":"<h1 id=\"认识微服务\"><a href=\"#认识微服务\" class=\"headerlink\" title=\"认识微服务\"></a>认识微服务</h1><h3 id=\"单体架构\"><a href=\"#单体架构\" class=\"headerlink\" title=\"单体架构\"></a>单体架构</h3><p><strong>单体架构</strong>：将业务的所有功能集中在一个项目中开发，打成一个包部署。</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w01.png\" alt=\"image-20210713202807818\"></p>\n<p>单体架构的优缺点如下：</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>架构简单</li>\n<li>部署成本低</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>耦合度高（维护困难、升级困难）</li>\n</ul>\n<h3 id=\"分布式架构\"><a href=\"#分布式架构\" class=\"headerlink\" title=\"分布式架构\"></a>分布式架构</h3><p><strong>分布式架构</strong>：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w02.png\" alt=\"image-20210713203124797\"></p>\n<p>分布式架构的优缺点：</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>降低服务耦合</li>\n<li>有利于服务升级和拓展</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>服务调用关系错综复杂</li>\n</ul>\n<p>分布式架构虽然降低了服务耦合，但是服务拆分时也有很多问题需要思考：</p>\n<ul>\n<li>服务拆分的粒度如何界定？</li>\n<li>服务之间如何调用？</li>\n<li>服务的调用关系如何管理？</li>\n</ul>\n<h3 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h3><p>微服务的架构特征：</p>\n<ul>\n<li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</li>\n<li>自治：团队独立、技术独立、数据独立，独立部署和交付</li>\n<li>面向服务：服务提供统一标准的接口，与语言和技术无关</li>\n<li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li>\n</ul>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w03.png\" alt=\"image-20210713203753373\"></p>\n<p>微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到高内聚，低耦合。</p>\n<p>因此，可以认为<strong>微服务</strong>是一种经过良好架构设计的<strong>分布式架构方案</strong> 。</p>\n<h3 id=\"SpringCloud\"><a href=\"#SpringCloud\" class=\"headerlink\" title=\"SpringCloud\"></a>SpringCloud</h3><p>SpringCloud是目前国内使用最广泛的微服务框架。官网地址：<a href=\"https://spring.io/projects/spring-cloud%E3%80%82\">https://spring.io/projects/spring-cloud。</a></p>\n<p>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</p>\n<p>其中常见的组件包括：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w04.png\" alt=\"image-20210713204155887\"></p>\n<p>另外，SpringCloud底层是依赖于SpringBoot的，并且有版本的兼容关系，如下：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w05.png\" alt=\"image-20210713205003790\"></p>\n<p>学习的版本是 Hoxton.SR10，因此对应的SpringBoot版本是2.3.x版本。</p>\n<p>总结</p>\n<ul>\n<li><p>单体架构：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</p>\n</li>\n<li><p>分布式架构：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东、淘宝</p>\n</li>\n<li><p>微服务：一种良好的分布式架构方案</p>\n<p>①优点：拆分粒度更小、服务更独立、耦合度更低</p>\n<p>②缺点：架构非常复杂，运维、监控、部署难度提高</p>\n</li>\n<li><p>SpringCloud是微服务架构的一站式解决方案，集成了各种优秀微服务功能组件</p>\n</li>\n</ul>\n<h2 id=\"服务拆分和远程调用\"><a href=\"#服务拆分和远程调用\" class=\"headerlink\" title=\"服务拆分和远程调用\"></a>服务拆分和远程调用</h2><h3 id=\"服务拆分原则\"><a href=\"#服务拆分原则\" class=\"headerlink\" title=\"服务拆分原则\"></a>服务拆分原则</h3><p>这里我总结了微服务拆分时的几个原则：</p>\n<ul>\n<li>不同微服务，不要重复开发相同业务</li>\n<li>微服务数据独立，不要访问其它微服务的数据库</li>\n<li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li>\n</ul>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w06.png\" alt=\"image-20210713210800950\"></p>\n<h3 id=\"服务拆分示例\"><a href=\"#服务拆分示例\" class=\"headerlink\" title=\"服务拆分示例\"></a>服务拆分示例</h3><p>以微服务cloud-demo为例，其结构如下：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w07.png\" alt=\"image-20210713211009593\"></p>\n<p>cloud-demo：父工程，管理依赖</p>\n<ul>\n<li>order-service：订单微服务，负责订单相关业务</li>\n<li>user-service：用户微服务，负责用户相关业务</li>\n</ul>\n<p>cloud-user表中初始数据如下：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w08.png\" alt=\"image-20210713211550169\"></p>\n<p>cloud-order表中初始数据如下：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w09.png\" alt=\"image-20210713211657319\"></p>\n<p>cloud-order表中持有cloud-user表中的id字段。</p>\n<p>项目结构如下：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w10.png\" alt=\"image-20210713212656887\"></p>\n<h4 id=\"实现远程调用案例\"><a href=\"#实现远程调用案例\" class=\"headerlink\" title=\"实现远程调用案例\"></a>实现远程调用案例</h4><p>在order-service服务中，有一个根据id查询订单的接口：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w11.png\" alt=\"image-20210713212749575\"></p>\n<p>根据id查询订单，返回值是Order对象，如图：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w12.png\" alt=\"image-20210713212901725\"></p>\n<p>其中的user为null</p>\n<p>在user-service中有一个根据id查询用户的接口：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w13.png\" alt=\"image-20210713213146089\"></p>\n<h4 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h4><p>要求：</p>\n<ul>\n<li>订单微服务和用户微服务都必须有各自的数据库，相互独立</li>\n<li>订单服务和用户服务都对外暴露Restful的接口</li>\n<li>订单服务如果需要查询用户信息，只能调用用户服务的Restful接口，不能查询用户数据库</li>\n</ul>\n<p>修改order-service中的根据id查询订单业务，要求在查询订单的同时，根据订单中包含的userId查询出用户信息，一起返回。</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w14.png\" alt=\"image-20210713213312278\"></p>\n<p>因此，我们需要在order-service中 向user-service发起一个http的请求，调用<a href=\"http://localhost:8081/user/%7BuserId%7D%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E3%80%82\">http://localhost:8081/user/{userId}这个接口。</a></p>\n<p>大概的步骤是这样的：</p>\n<ul>\n<li>注册一个RestTemplate的实例到Spring容器</li>\n<li>修改order-service服务中的OrderService类中的queryOrderById方法，根据Order对象中的userId查询User</li>\n<li>将查询的User填充到Order对象，一起返回</li>\n</ul>\n<h4 id=\"注册RestTemplate\"><a href=\"#注册RestTemplate\" class=\"headerlink\" title=\"注册RestTemplate\"></a>注册RestTemplate</h4><p>首先，我们在order-service服务中的OrderApplication启动类中，注册RestTemplate实例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapperScan</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestTemplate</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cn.itcast.order.mapper\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderApplication</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"实现远程调用\"><a href=\"#实现远程调用\" class=\"headerlink\" title=\"实现远程调用\"></a>实现远程调用</h4><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w15.png\" alt=\"image-20210713213959569\"></p>\n<h4 id=\"提供者与消费者\"><a href=\"#提供者与消费者\" class=\"headerlink\" title=\"提供者与消费者\"></a>提供者与消费者</h4><p>在服务调用关系中，会有两个不同的角色：</p>\n<p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</p>\n<p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w16.png\" alt=\"image-20210713214404481\"></p>\n<p>服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言。</p>\n<h1 id=\"Eureka注册中心\"><a href=\"#Eureka注册中心\" class=\"headerlink\" title=\"Eureka注册中心\"></a>Eureka注册中心</h1><p>假如我们的服务提供者user-service部署了多个实例，如图：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/w17.png\" alt=\"image-20210713214925388\"></p>\n<p>思考几个问题：</p>\n<ul>\n<li>order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？</li>\n<li>有多个user-service实例地址，order-service调用时该如何选择？</li>\n<li>order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</li>\n</ul>\n<h3 id=\"Eureka的结构和作用\"><a href=\"#Eureka的结构和作用\" class=\"headerlink\" title=\"Eureka的结构和作用\"></a>Eureka的结构和作用</h3><p>这些问题都需要利用SpringCloud中的注册中心来解决，这里介绍Eureka，其结构如下：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713220104956.png\" alt=\"image-20210713220104956\"></p>\n<p>order-service如何得知user-service实例地址？</p>\n<p>获取地址信息的流程如下：</p>\n<ul>\n<li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）即服务注册</li>\n<li>eureka-server保存服务名称到服务实例地址列表的映射关系</li>\n<li>order-service根据服务名称，拉取实例地址列表，即服务发现或服务拉取</li>\n</ul>\n<p>order-service如何从多个user-service实例中选择具体的实例？</p>\n<ul>\n<li>order-service从实例列表中利用负载均衡算法选中一个实例地址</li>\n<li>向该实例地址发起远程调用</li>\n</ul>\n<p>order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p>\n<ul>\n<li>user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己状态，称为心跳</li>\n<li>当超过一定时间没有发送心跳时，eureka-server会认为微服务实例故障，将该实例从服务列表中剔除</li>\n<li>order-service拉取服务时，就能将故障实例排除了</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端</p></blockquote>\n<h3 id=\"搭建eureka-server\"><a href=\"#搭建eureka-server\" class=\"headerlink\" title=\"搭建eureka-server\"></a>搭建eureka-server</h3><p>注册中心服务端：eureka-server，这必须是一个独立的微服务</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713220509769.png\" alt=\"image-20210713220509769\"></p>\n<h4 id=\"创建eureka-server服务\"><a href=\"#创建eureka-server服务\" class=\"headerlink\" title=\"创建eureka-server服务\"></a>创建eureka-server服务</h4><p>在cloud-demo父工程下，创建一个子模块：</p>\n<h5 id=\"引入eureka依赖\"><a href=\"#引入eureka依赖\" class=\"headerlink\" title=\"引入eureka依赖\"></a>引入eureka依赖</h5><p>引入SpringCloud为eureka提供的starter依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-eureka-server<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"编写启动类\"><a href=\"#编写启动类\" class=\"headerlink\" title=\"编写启动类\"></a>编写启动类</h5><p>给eureka-server服务编写一个启动类，一定要添加一个@EnableEurekaServer注解，开启eureka的注册中心功能：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>eureka</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableEurekaServer</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableEurekaServer</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EurekaApplication</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EurekaApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"编写配置文件\"><a href=\"#编写配置文件\" class=\"headerlink\" title=\"编写配置文件\"></a>编写配置文件</h5><p>编写一个application.yml文件，内容如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10086</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> eureka<span class=\"token punctuation\">-</span>server\n<span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span> \n      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//127.0.0.1<span class=\"token punctuation\">:</span>10086/eureka<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h5><p>启动微服务，然后在浏览器访问：<a href=\"http://127.0.0.1:10086/\">http://127.0.0.1:10086</a></p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713222157190.png\" alt=\"image-20210713222157190\"></p>\n<h4 id=\"服务注册\"><a href=\"#服务注册\" class=\"headerlink\" title=\"服务注册\"></a>服务注册</h4><p>将user-service注册到eureka-server中去。</p>\n<h5 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h5><p>在user-service的pom文件中，引入下面的eureka-client依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-eureka-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h5><p>在user-service中，修改application.yml文件，添加服务名称、eureka地址：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> userservice\n<span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//127.0.0.1<span class=\"token punctuation\">:</span>10086/eureka<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"启动多个user-service实例\"><a href=\"#启动多个user-service实例\" class=\"headerlink\" title=\"启动多个user-service实例\"></a>启动多个user-service实例</h5><p>添加一个SpringBoot的启动配置，再启动一个user-service。</p>\n<p>复制原来的user-service启动配置：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713222656562.png\" alt=\"image-20210713222656562\"></p>\n<p>然后，在弹出的窗口中，填写信息：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713222757702.png\" alt=\"image-20210713222757702\"></p>\n<p>SpringBoot窗口会出现两个user-service启动配置：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713222841951.png\" alt=\"image-20210713222841951\"></p>\n<p>启动两个user-service实例：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713223041491.png\" alt=\"image-20210713223041491\"></p>\n<p>查看eureka-server管理页面：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713223150650.png\" alt=\"image-20210713223150650\"></p>\n<h4 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h4><p>将order-service的逻辑修改：向eureka-server拉取user-service的信息，实现服务发现。</p>\n<h5 id=\"引入依赖-1\"><a href=\"#引入依赖-1\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h5><p>服务发现、服务注册统一都封装在eureka-client依赖，因此这一步与服务注册时一致</p>\n<p>在order-service的pom文件中，引入下面的eureka-client依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-eureka-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h5><p>服务发现也需要知道eureka地址，因此第二步与服务注册一致，都是配置eureka信息：</p>\n<p>在order-service中，修改application.yml文件，添加服务名称、eureka地址：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> orderservice\n<span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//127.0.0.1<span class=\"token punctuation\">:</span>10086/eureka<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"服务拉取和负载均衡\"><a href=\"#服务拉取和负载均衡\" class=\"headerlink\" title=\"服务拉取和负载均衡\"></a>服务拉取和负载均衡</h5><p>在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713224049419.png\" alt=\"image-20210713224049419\"></p>\n<p>修改order-service服务中的queryOrderById方法。修改访问的url路径，用服务名代替ip、端口：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713224245731.png\" alt=\"image-20210713224245731\"></p>\n<p>spring会自动帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，而后完成负载均衡。</p>\n<h3 id=\"Ribbon负载均衡\"><a href=\"#Ribbon负载均衡\" class=\"headerlink\" title=\"Ribbon负载均衡\"></a>Ribbon负载均衡</h3><p>添加了@LoadBalanced注解，即可实现负载均衡功能，这是什么原理呢？</p>\n<h4 id=\"负载均衡原理\"><a href=\"#负载均衡原理\" class=\"headerlink\" title=\"负载均衡原理\"></a>负载均衡原理</h4><p>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713224517686.png\" alt=\"image-20210713224517686\"></p>\n<p>那么我们发出的请求明明是<a href=\"http://userservice/user/1%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8F%98%E6%88%90%E4%BA%86http://localhost:8081%E7%9A%84%E5%91%A2%EF%BC%9F\">http://userservice/user/1，怎么变成了http://localhost:8081的呢？</a></p>\n<h4 id=\"源码跟踪\"><a href=\"#源码跟踪\" class=\"headerlink\" title=\"源码跟踪\"></a>源码跟踪</h4><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p>\n<p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p>\n<p>我们进行源码跟踪：</p>\n<h5 id=\"LoadBalancerIntercepor\"><a href=\"#LoadBalancerIntercepor\" class=\"headerlink\" title=\"LoadBalancerIntercepor\"></a>LoadBalancerIntercepor</h5><p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/1525620483637.png\" alt=\"1525620483637\"></p>\n<p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p>\n<ul>\n<li><code>request.getURI()</code>：获取请求uri，本例中就是 <a href=\"http://user-service/user/8\">http://user-service/user/8</a></li>\n<li><code>originalUri.getHost()</code>：获取uri路径的主机名，其实就是服务id，<code>user-service</code></li>\n<li><code>this.loadBalancer.execute()</code>：处理服务id，和用户请求。</li>\n</ul>\n<p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p>\n<h5 id=\"LoadBalancerClient\"><a href=\"#LoadBalancerClient\" class=\"headerlink\" title=\"LoadBalancerClient\"></a>LoadBalancerClient</h5><p>继续跟入execute方法：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/1525620787090.png\" alt=\"1525620787090\"></p>\n<p>代码是这样的：</p>\n<ul>\n<li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li>\n<li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。</li>\n</ul>\n<h4 id=\"负载均衡策略IRule\"><a href=\"#负载均衡策略IRule\" class=\"headerlink\" title=\"负载均衡策略IRule\"></a>负载均衡策略IRule</h4><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法来做负载均衡:</p>\n<p> <img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/1525620835911.png\" alt=\"1525620835911\"></p>\n<p>我们继续跟入：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/1544361421671.png\" alt=\"1544361421671\"></p>\n<p>继续跟踪源码chooseServer方法，发现这么一段代码：</p>\n<p> <img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/1525622652849.png\" alt=\"1525622652849\"></p>\n<p>我们看看这个rule是谁：</p>\n<p> <img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/1525622699666.png\" alt=\"1525622699666\"></p>\n<p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p>\n<p> <img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/1525622754316.png\" alt=\"1525622754316\"></p>\n<p>这不就是轮询的意思嘛</p>\n<h4 id=\"SpringCloudRibbon的流程\"><a href=\"#SpringCloudRibbon的流程\" class=\"headerlink\" title=\"SpringCloudRibbon的流程\"></a>SpringCloudRibbon的流程</h4><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713224724673.png\" alt=\"image-20210713224724673\"></p>\n<p>基本流程如下：</p>\n<ul>\n<li>拦截我们的RestTemplate请求<a href=\"http://userservice/user/1\">http://userservice/user/1</a></li>\n<li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li>\n<li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li>\n<li>eureka返回列表，localhost:8081、localhost:8082</li>\n<li>IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081</li>\n<li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到<a href=\"http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82\">http://localhost:8081/user/1，发起真实请求</a></li>\n</ul>\n<h4 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h4><h5 id=\"负载均衡策略-1\"><a href=\"#负载均衡策略-1\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h5><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713225653000.png\" alt=\"image-20210713225653000\"></p>\n<p>不同规则的含义如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>内置负载均衡规则类</strong></th>\n<th><strong>规则描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>RoundRobinRule</td>\n<td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td>\n</tr>\n<tr>\n<td>AvailabilityFilteringRule</td>\n<td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的clientName.clientConfigNameSpace.ActiveConnectionsLimit属性进行配置。</td>\n</tr>\n<tr>\n<td>WeightedResponseTimeRule</td>\n<td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td>\n</tr>\n<tr>\n<td><strong>ZoneAvoidanceRule</strong></td>\n<td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td>\n</tr>\n<tr>\n<td>BestAvailableRule</td>\n<td>忽略那些短路的服务器，并选择并发数较低的服务器。</td>\n</tr>\n<tr>\n<td>RandomRule</td>\n<td>随机选择一个可用的服务器。</td>\n</tr>\n<tr>\n<td>RetryRule</td>\n<td>重试机制的选择逻辑</td>\n</tr>\n</tbody></table>\n<p>默认的实现就是ZoneAvoidanceRule，是一种区间轮询方案</p>\n<h5 id=\"自定义负载均衡策略\"><a href=\"#自定义负载均衡策略\" class=\"headerlink\" title=\"自定义负载均衡策略\"></a>自定义负载均衡策略</h5><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p>\n<ol>\n<li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">IRule</span> <span class=\"token function\">randomRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">userservice</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 给某个微服务配置负载均衡规则，这里是userservice服务</span>\n  <span class=\"token key atrule\">ribbon</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">NFLoadBalancerRuleClassName</span><span class=\"token punctuation\">:</span> com.netflix.loadbalancer.RandomRule <span class=\"token comment\"># 负载均衡规则 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p></blockquote>\n<h5 id=\"饥饿加载\"><a href=\"#饥饿加载\" class=\"headerlink\" title=\"饥饿加载\"></a>饥饿加载</h5><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p>\n<p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">ribbon</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">eager-load</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">clients</span><span class=\"token punctuation\">:</span> userservice<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Nacos注册中心\"><a href=\"#Nacos注册中心\" class=\"headerlink\" title=\"Nacos注册中心\"></a>Nacos注册中心</h1><p>SpringCloudAlibaba也推出了一个名为Nacos的注册中心。</p>\n<h3 id=\"服务注册到nacos\"><a href=\"#服务注册到nacos\" class=\"headerlink\" title=\"服务注册到nacos\"></a>服务注册到nacos</h3><p>Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。</p>\n<h4 id=\"引入依赖-2\"><a href=\"#引入依赖-2\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h4><p>在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-alibaba-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2.6.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"配置nacos地址\"><a href=\"#配置nacos地址\" class=\"headerlink\" title=\"配置nacos地址\"></a>配置nacos地址</h4><p>在user-service和order-service的application.yml中添加nacos地址：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><p>启动微服务后，登录nacos管理页面，可以看到微服务信息：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713231439607.png\" alt=\"image-20210713231439607\"></p>\n<h4 id=\"服务分级存储模型\"><a href=\"#服务分级存储模型\" class=\"headerlink\" title=\"服务分级存储模型\"></a>服务分级存储模型</h4><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p>\n<ul>\n<li>127.0.0.1:8081</li>\n<li>127.0.0.1:8082</li>\n<li>127.0.0.1:8083</li>\n</ul>\n<p>假如这些实例分布于全国各地的不同机房，例如：</p>\n<ul>\n<li>127.0.0.1:8081，在上海机房</li>\n<li>127.0.0.1:8082，在上海机房</li>\n<li>127.0.0.1:8083，在杭州机房</li>\n</ul>\n<p>Nacos就将同一机房内的实例划分为一个<strong>集群</strong>。</p>\n<p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713232522531.png\" alt=\"image-20210713232522531\"></p>\n<p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。</p>\n<h4 id=\"给user-service配置集群\"><a href=\"#给user-service配置集群\" class=\"headerlink\" title=\"给user-service配置集群\"></a>给user-service配置集群</h4><p>修改user-service的application.yml文件，添加集群配置：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span>\n      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">cluster-name</span><span class=\"token punctuation\">:</span> HZ <span class=\"token comment\"># 集群名称</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重启两个user-service实例后，我们可以在nacos控制台看到下面结果：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713232916215.png\" alt=\"image-20210713232916215\"></p>\n<p>我们再次复制一个user-service启动配置，添加属性：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token parameter variable\">-Dserver.port</span><span class=\"token operator\">=</span><span class=\"token number\">8083</span> -Dspring.cloud.nacos.discovery.cluster-name<span class=\"token operator\">=</span>SH<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>启动UserApplication3后再次查看nacos控制台：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713233727923.png\" alt=\"image-20210713233727923\"></p>\n<h4 id=\"同集群优先的负载均衡\"><a href=\"#同集群优先的负载均衡\" class=\"headerlink\" title=\"同集群优先的负载均衡\"></a>同集群优先的负载均衡</h4><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p>\n<p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p>\n<p>1）给order-service配置集群信息</p>\n<p>修改order-service的application.yml文件，添加集群配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">spring:\n  cloud:\n    nacos:\n      server-addr: localhost:8848\n      discovery:\n        cluster-name: HZ <span class=\"token comment\"># 集群名称</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2）修改负载均衡规则</p>\n<p>修改order-service的application.yml文件，修改负载均衡规则：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">userservice</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ribbon</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">NFLoadBalancerRuleClassName</span><span class=\"token punctuation\">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule <span class=\"token comment\"># 负载均衡规则 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"权重配置\"><a href=\"#权重配置\" class=\"headerlink\" title=\"权重配置\"></a>权重配置</h4><p>实际部署中会出现这样的场景：</p>\n<p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p>\n<p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p>\n<p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713235133225.png\" alt=\"image-20210713235133225\"></p>\n<p>在弹出的编辑窗口，修改权重：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210713235235219.png\" alt=\"image-20210713235235219\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote>\n<h3 id=\"环境隔离\"><a href=\"#环境隔离\" class=\"headerlink\" title=\"环境隔离\"></a>环境隔离</h3><p>Nacos提供了namespace来实现环境隔离功能。</p>\n<ul>\n<li>nacos中可以有多个namespace</li>\n<li>namespace下可以有group、service等</li>\n<li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li>\n</ul>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714000101516.png\" alt=\"image-20210714000101516\"></p>\n<h4 id=\"创建namespace\"><a href=\"#创建namespace\" class=\"headerlink\" title=\"创建namespace\"></a>创建namespace</h4><p>默认情况下，所有service、data、group都在同一个namespace，名为public</p>\n<p>我们可以点击页面新增按钮，添加一个namespace：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714000440143.png\" alt=\"image-20210714000440143\"></p>\n<p>然后，填写表单：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714000505928.png\" alt=\"image-20210714000505928\"></p>\n<p>就能在页面看到一个新的namespace：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714000522913.png\" alt=\"image-20210714000522913\"></p>\n<h4 id=\"给微服务配置namespace\"><a href=\"#给微服务配置namespace\" class=\"headerlink\" title=\"给微服务配置namespace\"></a>给微服务配置namespace</h4><p>给微服务配置namespace只能通过修改配置来实现。</p>\n<p>例如，修改order-service的application.yml文件：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span>\n      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">cluster-name</span><span class=\"token punctuation\">:</span> HZ\n        <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> 492a7d5d<span class=\"token punctuation\">-</span>237b<span class=\"token punctuation\">-</span>46a1<span class=\"token punctuation\">-</span>a99a<span class=\"token punctuation\">-</span>fa8e98e4b0f9 <span class=\"token comment\"># 命名空间，填ID</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>重启order-service后，访问控制台，可以看到下面的结果：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714000837140.png\" alt=\"image-20210714000837140\"></p>\n<p>此时访问order-service，因为user-service的namespace和order-service不同，会导致找不到userservice，控制台会报错：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714000941256.png\" alt=\"image-20210714000941256\"></p>\n<h3 id=\"Nacos与Eureka的区别\"><a href=\"#Nacos与Eureka的区别\" class=\"headerlink\" title=\"Nacos与Eureka的区别\"></a>Nacos与Eureka的区别</h3><p>Nacos的服务实例分为两种类型：</p>\n<ul>\n<li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p>\n</li>\n<li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p>\n</li>\n</ul>\n<p>配置一个服务实例为永久实例：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">ephemeral</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 设置为非临时实例</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714001728017.png\" alt=\"image-20210714001728017\"></p>\n<ul>\n<li><p>Nacos与eureka的共同点</p>\n<ul>\n<li>都支持服务注册和服务拉取</li>\n<li>都支持服务提供者心跳方式做健康检测</li>\n</ul>\n</li>\n<li><p>Nacos与Eureka的区别</p>\n<ul>\n<li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li>\n<li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li>\n<li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li>\n<li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li>\n</ul>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>AP理论认为任何一个分布式系统最多只能满足以下三个特性中的两个：一致性（consistency）、可用性（availability）以及分区容错性（partition tolerance）</p></blockquote>\n","text":"认识微服务单体架构单体架构：将业务的所有功能集中在一个项目中开发，打成一个包部署。 单体架构的优缺点如下： 优点： 架构简单 部署成本低 缺点： 耦合度高（维护困难、升级困难） 分布式架构分布式架构：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。 分布...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"微服务","slug":"微服务","count":1,"path":"api/tags/微服务.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">认识微服务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">单体架构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">分布式架构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">微服务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SpringCloud\"><span class=\"toc-text\">SpringCloud</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86%E5%92%8C%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">服务拆分和远程调用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">服务拆分原则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">服务拆分示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">实现远程调用案例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">案例分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%86%8CRestTemplate\"><span class=\"toc-text\">注册RestTemplate</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">实现远程调用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8F%90%E4%BE%9B%E8%80%85%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85\"><span class=\"toc-text\">提供者与消费者</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83\"><span class=\"toc-text\">Eureka注册中心</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Eureka%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">Eureka的结构和作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%90%AD%E5%BB%BAeureka-server\"><span class=\"toc-text\">搭建eureka-server</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAeureka-server%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">创建eureka-server服务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5eureka%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">引入eureka依赖</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E5%90%AF%E5%8A%A8%E7%B1%BB\"><span class=\"toc-text\">编写启动类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">启动服务</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C\"><span class=\"toc-text\">服务注册</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">引入依赖</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E5%A4%9A%E4%B8%AAuser-service%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">启动多个user-service实例</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0\"><span class=\"toc-text\">服务发现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96-1\"><span class=\"toc-text\">引入依赖</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-1\"><span class=\"toc-text\">配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E6%8B%89%E5%8F%96%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\"><span class=\"toc-text\">服务拉取和负载均衡</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\"><span class=\"toc-text\">Ribbon负载均衡</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">负载均衡原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E8%B7%9F%E8%B8%AA\"><span class=\"toc-text\">源码跟踪</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#LoadBalancerIntercepor\"><span class=\"toc-text\">LoadBalancerIntercepor</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#LoadBalancerClient\"><span class=\"toc-text\">LoadBalancerClient</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5IRule\"><span class=\"toc-text\">负载均衡策略IRule</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SpringCloudRibbon%E7%9A%84%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">SpringCloudRibbon的流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">负载均衡策略</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5-1\"><span class=\"toc-text\">负载均衡策略</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">自定义负载均衡策略</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%A5%A5%E9%A5%BF%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">饥饿加载</span></a></li></ol></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83\"><span class=\"toc-text\">Nacos注册中心</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%88%B0nacos\"><span class=\"toc-text\">服务注册到nacos</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96-2\"><span class=\"toc-text\">引入依赖</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEnacos%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">配置nacos地址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">启动</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E5%88%86%E7%BA%A7%E5%AD%98%E5%82%A8%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">服务分级存储模型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%99user-service%E9%85%8D%E7%BD%AE%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">给user-service配置集群</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%8C%E9%9B%86%E7%BE%A4%E4%BC%98%E5%85%88%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\"><span class=\"toc-text\">同集群优先的负载均衡</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9D%83%E9%87%8D%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">权重配置</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E9%9A%94%E7%A6%BB\"><span class=\"toc-text\">环境隔离</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAnamespace\"><span class=\"toc-text\">创建namespace</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%99%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AEnamespace\"><span class=\"toc-text\">给微服务配置namespace</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Nacos%E4%B8%8EEureka%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">Nacos与Eureka的区别</span></a></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"RabbitMQ","uid":"eb3ef2175aab37a16c1ed443702f7a7d","slug":"RabbitMQ","date":"2023-06-08T14:02:31.000Z","updated":"2023-06-10T15:33:25.442Z","comments":true,"path":"api/articles/RabbitMQ.json","keywords":null,"cover":[],"text":"RabbitMQ一篇就够了同步通讯：就像打电话，需要实时响应。 异步通讯：就像发邮件，不需要马上回复。 同步通讯存在下面的问题： 总结： 同步调用的优点： 时效性较强，可以立即得到结果 同步调用的问题： 耦合度高 性能和吞吐能力下降 有额外的资源消耗 有级联失败问题 异步通讯异步...","link":"","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[],"tags":[{"name":"RabbitMQ","slug":"RabbitMQ","count":1,"path":"api/tags/RabbitMQ.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"线程池","uid":"d1863bbf8aa3ec7bc32e4a0f3476163f","slug":"线程池","date":"2023-06-07T11:42:20.000Z","updated":"2023-06-07T13:31:41.753Z","comments":true,"path":"api/articles/线程池.json","keywords":null,"cover":[],"text":"Executor线程池在Java框架设计中，一般涉及到资源相关的，并且资源具有创建消耗大、可复用的特点时，都采用了池化技术管理资源，形成一个“资源池”，池化技术可以带来以下一般性好处：对外部隐藏了资源的创建与释放的细节、实现资源的复用减少内存或者时间性能开销。常见Java中池化技...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"线程池","slug":"线程池","count":3,"path":"api/tags/线程池.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
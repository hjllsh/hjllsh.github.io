{"title":"线程池的管理和使用","uid":"b491cfca14c8d6dfd4f8108806508bb6","slug":"线程池的管理和使用","date":"2023-06-01T06:36:07.000Z","updated":"2023-06-03T15:48:57.620Z","comments":true,"path":"api/articles/线程池的管理和使用.json","keywords":null,"cover":[],"content":"<h2 id=\"线程池的管理和使用\"><a href=\"#线程池的管理和使用\" class=\"headerlink\" title=\"线程池的管理和使用\"></a>线程池的管理和使用</h2><p>​\t\t频繁的创建、销毁线程和线程池，会给系统带来额外的开销。未经池化及统一管理的线程，则会导致<strong>系统内线程数上限不可控</strong>。这种情况下，随着访问数增加，系统内线程数持续增长，CPU负载逐步提高。极端情况下，甚至可能会导致CPU资源被吃满，整个服务不可用。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>替换掉自建线程和线程池</p>\n<h3 id=\"自建线程池\"><a href=\"#自建线程池\" class=\"headerlink\" title=\"自建线程池\"></a>自建线程池</h3><p>在<code>ThreadPoolConfig</code>中，创建我们项目统一的线程池，并交给spring管理。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableAsync</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPoolConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AsyncConfigurer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * 项目共用线程池\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">MY_EXECUTOR</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Executor\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Executor</span> <span class=\"token function\">getAsyncExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">createExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MY_EXECUTOR</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Primary</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolTaskExecutor</span> <span class=\"token function\">createExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ThreadPoolTaskExecutor</span> executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolTaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">setCorePoolSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxPoolSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">setQueueCapacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">setThreadNamePrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"executor-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">setRejectedExecutionHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>CallerRunsPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//满了调用线程执行，认为重要任务</span>\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> executor<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>类 <code>ThreadPoolConfig</code> 实现了 <code>AsyncConfigurer</code> 接口并添加了 <code>@EnableAsync</code> 注解后，我们就可以在 Spring 中使用 <code>@Async</code> 注解来声明异步执行的方法了。由于使用了自定义的线程池，异步任务的执行不会影响应用的主线程，从而提高了系统的可用性和性能。</p>\n<p>线程池的创建没有用<code>Excutors</code>的快速创建。是因为<code>Excutors</code>创建的线程池用的无界队列，有内存溢出（oom）的风险。</p>\n<h3 id=\"优雅停机\"><a href=\"#优雅停机\" class=\"headerlink\" title=\"优雅停机\"></a>优雅停机</h3><p>当项目关闭的时候，需要通过jvm的shutdownHook回调线程池，等队列里任务执行完再停机。保证任务不丢失。</p>\n<p>spring管理的线程池，连优雅停机的事，都可以直接交给spring自己来管理。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * Perform a shutdown on the underlying ExecutorService.\n * @see java.util.concurrent.ExecutorService#shutdown()\n * @see java.util.concurrent.ExecutorService#shutdownNow()\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shutting down ExecutorService\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanName <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\" '\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>executor <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>waitForTasksToCompleteOnShutdown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>executor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> remainingTask <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>executor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdownNow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">cancelRemainingTask</span><span class=\"token punctuation\">(</span>remainingTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">awaitTerminationIfNecessary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>executor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"线程池使用\"><a href=\"#线程池使用\" class=\"headerlink\" title=\"线程池使用\"></a>线程池使用</h3><p>我们放进容器的线程池设置了beanName。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26318626/1684051087918-bc73f44f-94ce-4e9e-942c-c1dfa1b5e746.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_TWFsbENoYXQ=,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>业务需要用，也可以根据beanName取出想用的线程池。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26318626/1684051162880-bc7c922f-5349-4e77-97cf-5b8f486e50d6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_35,text_TWFsbENoYXQ=,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>或者是直接在方法上加上异步注解<code>@async</code></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26318626/1684051219821-8497c577-9658-443f-bcf6-0ca30402df33.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_TWFsbENoYXQ=,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h3 id=\"五、异常捕获\"><a href=\"#五、异常捕获\" class=\"headerlink\" title=\"五、异常捕获\"></a>五、异常捕获</h3><p>线程池，千万别忘了一点，就是线程运行抛异常了要怎么处理。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行时异常了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>结果是这样的，异常并不会打印日志，只会在控制台输出。如果出了问题，却不打印error日志。</p>\n<p>传统模式下，我们一般会通过try catch的方法去捕获线程的异常，并且打印到日志中。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行时异常了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"异常发生\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nthread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当我们捕获了异常，就没有控制台的告警了，全都是日志打印</p>\n<p>其实，如果一个异常未被捕获，从线程中抛了出来。JVM会回调一个方法<code>dispatchUncaughtException</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Dispatch an uncaught exception to the handler. This method is\n * intended to be called only by the JVM.\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dispatchUncaughtException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">getUncaughtExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">uncaughtException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个方法在<code>Thread</code>类中，会进行默认的异常处理，其实就是获取一个默认的异常处理器。默认的异常处理器是</p>\n<p>ThreadGroup实现的异常捕获方法。前面看到的<code>控制台ERR打印</code>，就出自这里。</p>\n<p>我们要做的很简单，就是给线程添加一个<code>异常捕获处理器</code>，以后抛了异常，就给它转成error日志。这样才能及时发现问题。</p>\n<p>Thread有两个属性，一个类静态变量，一个实例对象。都可以设置异常捕获。区别在于一个生效的范围是单个thread对象，一个生效的范围是全局的thread。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// null unless explicitly set</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">UncaughtExceptionHandler</span> uncaughtExceptionHandler<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// null unless explicitly set</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">UncaughtExceptionHandler</span> defaultUncaughtExceptionHandler<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们一般选择给每个thread实例都加一个异常捕获。毕竟别人的thread咱们别管，只管自己创建的thread。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行时异常了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Thread<span class=\"token punctuation\">.</span>UncaughtExceptionHandler</span> uncaughtExceptionHandler <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception in thread \"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nthread<span class=\"token punctuation\">.</span><span class=\"token function\">setUncaughtExceptionHandler</span><span class=\"token punctuation\">(</span>uncaughtExceptionHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nthread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"线程池的异常捕获\"><a href=\"#线程池的异常捕获\" class=\"headerlink\" title=\"线程池的异常捕获\"></a>线程池的异常捕获</h4><p>我们工一般不直接创建对象，都用的线程池</p>\n<p>用线程池的<code>ThreadFactory</code>，创建线程的工厂，创建线程的时候给线程添加异常捕获。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">NamedThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"refresh-ipDetail\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                           <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyUncaughtExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>自建的线程池，直接在工厂里添加一个异常捕获处理器就好了。它在创建thread的时候，会把这个异常捕获赋值给<code>thread</code>。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26318626/1685518177738-00691464-88e2-4faf-af7a-005d13b72017.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_29,text_TWFsbENoYXQ=,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h4 id=\"Spring的线程池ThreadPoolTaskExecutor\"><a href=\"#Spring的线程池ThreadPoolTaskExecutor\" class=\"headerlink\" title=\"Spring的线程池ThreadPoolTaskExecutor\"></a>Spring的线程池ThreadPoolTaskExecutor</h4><p>由于Spring的封装，想要给线程工厂设置一个捕获器，是很困难的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"> <span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolTaskExecutor</span> <span class=\"token function\">websocketExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ThreadPoolTaskExecutor</span> executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolTaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    executor<span class=\"token punctuation\">.</span><span class=\"token function\">setCorePoolSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    executor<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxPoolSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    executor<span class=\"token punctuation\">.</span><span class=\"token function\">setQueueCapacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    executor<span class=\"token punctuation\">.</span><span class=\"token function\">setThreadNamePrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"websocket-executor-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    executor<span class=\"token punctuation\">.</span><span class=\"token function\">setRejectedExecutionHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>DiscardPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//满了直接丢弃，默认为不重要消息推送</span>\n    executor<span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> executor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到创建Spring提供的线程池并没有把异常处理器传进去的方法。</p>\n<p>观察ThreadPoolTaskExecutor的类继承关系图</p>\n<p><img src=\"/../assets/images/spring%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE01.png\"></p>\n<p>可以看到它自己实现了ThreadFactory。在<code>CustomizableThreadFactory</code>类的位置</p>\n<p><img src=\"/../assets/images/spring%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE02.png\"></p>\n<p><img src=\"/../assets/images/spring%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE03.png\" alt=\"image.png\"></p>\n<p>跟进去可以看见它内部封装好的创建线程的方法，压根就没有机会去设置一个线程异常捕获器。</p>\n<p>但是，它的抽象类<code>ExecutorConfigurationSupport</code>将自己赋值给线程工厂，提供了一个解耦的机会。</p>\n<p><img src=\"/../assets/images/spring%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE04.png\" alt=\"image.png\"></p>\n<p>如果我们把这个线程工厂换了，那么它的线程创建方法就会失效。线程名，优先级啥的全都得我们一并做了。而我们只是想扩展一个线程捕获。</p>\n<p>这时候就要使用到装饰器模式 ，装饰器模式不会改变原有的功能，而是在功能前后做一个扩展点。 </p>\n<p>首先先写一个自己的线程工厂，把spring的线程工厂传进来。调用它的线程创建后，再扩展设置我们的异常捕获</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThreadFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ThreadFactory</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadFactory</span> original<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Thread</span> <span class=\"token function\">newThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> original<span class=\"token punctuation\">.</span><span class=\"token function\">newThread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">setUncaughtExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyUncaughtExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//异常捕获</span>\n        <span class=\"token keyword\">return</span> thread<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>替换spring线程池的线程工厂就可以了</p>\n<p><img src=\"/../assets/images/spring%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE05.png\" alt=\"img\"></p>\n","text":"线程池的管理和使用​ 频繁的创建、销毁线程和线程池，会给系统带来额外的开销。未经池化及统一管理的线程，则会导致系统内线程数上限不可控。这种情况下，随着访问数增加，系统内线程数持续增长，CPU负载逐步提高。极端情况下，甚至可能会导致CPU资源被吃满，整个服务不可用。 解决方案替换掉...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"线程池","slug":"线程池","count":2,"path":"api/tags/线程池.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">线程池的管理和使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">解决方案</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">自建线程池</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E9%9B%85%E5%81%9C%E6%9C%BA\"><span class=\"toc-text\">优雅停机</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">线程池使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7\"><span class=\"toc-text\">五、异常捕获</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7\"><span class=\"toc-text\">线程池的异常捕获</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Spring%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0ThreadPoolTaskExecutor\"><span class=\"toc-text\">Spring的线程池ThreadPoolTaskExecutor</span></a></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MDC实现链路追踪","uid":"4f10da7078fbc31ecbcb9fd541bf0d6b","slug":"MDC实现简单的链路追踪","date":"2023-06-02T12:36:15.000Z","updated":"2023-06-02T14:15:45.078Z","comments":true,"path":"api/articles/MDC实现简单的链路追踪.json","keywords":null,"cover":null,"text":"MDC实现链路追踪先明确Filter、HandlerInterceptor 和 AOP 的执行流程在 Spring Boot 应用程序中，Filter、HandlerInterceptor 和 AOP 切面都是拦截器组件，在请求处理过程中扮演不同的角色，各自负责不同的任务。在一个...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"链路追踪","slug":"链路追踪","count":1,"path":"api/tags/链路追踪.json"},{"name":"日志","slug":"日志","count":1,"path":"api/tags/日志.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"SpringTask实现定时任务","uid":"34f154820ac35e3d8f3e9afce6bf7431","slug":"SpringTask实现定时任务","date":"2023-05-31T02:51:56.000Z","updated":"2023-05-31T08:12:18.441Z","comments":true,"path":"api/articles/SpringTask实现定时任务.json","keywords":null,"cover":null,"text":"SpringTask SpringTask是Spring自主研发的轻量级定时任务工具，相比于Quartz更加简单方便，且不需要引入其他依赖即可使用。 Cron表达式 Cron表达式是一个字符串，包括6~7个时间元素，在SpringTask中可以用于指定任务的执行时间。 Cron的...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Spring","slug":"Spring","count":11,"path":"api/tags/Spring.json"},{"name":"SpringTask","slug":"SpringTask","count":1,"path":"api/tags/SpringTask.json"},{"name":"定时任务","slug":"定时任务","count":1,"path":"api/tags/定时任务.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
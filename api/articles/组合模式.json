{"title":"组合模式","uid":"890198f3e29403fa2d961081f54ed8cd","slug":"组合模式","date":"2023-05-09T10:42:25.000Z","updated":"2023-05-09T11:00:22.048Z","comments":true,"path":"api/articles/组合模式.json","keywords":null,"cover":null,"content":"<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><p><strong>组合模式</strong> </p>\n<p>主要通过将对象组合成树形结构来表示“整体-部分”的关系，让客户端能够以一致的方式对待单个对象和对象合。</p>\n<h6 id=\"下面是一个简单的例子\"><a href=\"#下面是一个简单的例子\" class=\"headerlink\" title=\"下面是一个简单的例子\"></a>下面是一个简单的例子</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">showDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Leaf</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> position<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" is a \"</span> <span class=\"token operator\">+</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Composite</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> employee <span class=\"token operator\">:</span> employees<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            employee<span class=\"token punctuation\">.</span><span class=\"token function\">showDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addEmployee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> employee<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        employees<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeEmployee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> employee<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        employees<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Composite</span> organization <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Composite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        organization<span class=\"token punctuation\">.</span><span class=\"token function\">addEmployee</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Manager\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Composite</span> department <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Composite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        department<span class=\"token punctuation\">.</span><span class=\"token function\">addEmployee</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jane Smith\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Team Lead\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        department<span class=\"token punctuation\">.</span><span class=\"token function\">addEmployee</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob Johnson\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Engineer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Composite</span> subDepartment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Composite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        subDepartment<span class=\"token punctuation\">.</span><span class=\"token function\">addEmployee</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tina Turner\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Engineer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        subDepartment<span class=\"token punctuation\">.</span><span class=\"token function\">addEmployee</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Steve Rogers\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Engineer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        department<span class=\"token punctuation\">.</span><span class=\"token function\">addEmployee</span><span class=\"token punctuation\">(</span>subDepartment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        organization<span class=\"token punctuation\">.</span><span class=\"token function\">addEmployee</span><span class=\"token punctuation\">(</span>department<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        organization<span class=\"token punctuation\">.</span><span class=\"token function\">showDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的示例中，<code>Employee</code>是一个接口，有两个实现类：<code>Leaf</code>和<code>Composite</code>。<code>Leaf</code>代表的是单个员工，而<code>Composite</code>代表的是员工组合。composite 对象的作用是，将分散的调用集中起来，统一调用入口，它的特征是，与具体干活的实现实现同一个接口，当调用 composite 对象的接口方法时，其实是委托具体干活的实现来完成</p>\n<p>使用组合模式，我们可以创建一个包含多个员工和部门的组织结构，并可以方便地对整个组织结构进行操作。在示例中，我们创建了一个根节点<code>organization</code>，它包含一个员工<code>John Doe</code>和一个部门<code>department</code>。部门<code>department</code>包含一个团队领导<code>Jane Smith</code>和一个工程师<code>Bob Johnson</code>，以及一个子部门<code>subDepartment</code>，子部门<code>subDepartment</code>包含两个工程师<code>Tina Turner</code>和<code>Steve Rogers</code>。最后，我们通过调用<code>organization.showDetails()</code>方法来打印组织结构中每个员工的详细信息。</p>\n","text":"组合模式组合模式 主要通过将对象组合成树形结构来表示“整体-部分”的关系，让客户端能够以一致的方式对待单个对象和对象合。 下面是一个简单的例子import java.util.ArrayList; import java.util.List; public interface E...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":27,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":18,"path":"api/tags/设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">组合模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E9%9D%A2%E6%98%AF%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">下面是一个简单的例子</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"装饰器模式","uid":"af957b16e3777023cafc3b1e9179b2cd","slug":"装饰器模式","date":"2023-05-09T11:12:05.000Z","updated":"2023-05-09T11:42:05.537Z","comments":true,"path":"api/articles/装饰器模式.json","keywords":null,"cover":null,"text":"装饰器模式装饰者模式（Decorator Pattern） ​ 它允许你向现有对象添加新的功能，同时又不改变其结构。装饰者模式的核心思想是将功能进行分离，让各个类只专注于自己的职责。通过这种方式，我们可以以非常灵活的方式扩展系统的功能，而不必修改原有代码。 ​ 装饰器模式的主要目...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":27,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":18,"path":"api/tags/设计模式.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"适配器模式","uid":"a8b2eb4f810dce05fcecb16e8edfd126","slug":"适配器模式","date":"2023-05-09T08:09:59.000Z","updated":"2023-05-09T09:08:48.890Z","comments":true,"path":"api/articles/适配器模式.json","keywords":null,"cover":null,"text":"适配器模式适配器模式（Adapter Pattern）是一种结构型设计模式，它用于将一个类的接口转换成客户端所期望的另一种接口，从而使原本不兼容的接口能够协同工作。在适配器模式中，适配器充当了两个不兼容接口之间的桥梁，它负责允许这些接口间能够相互协作。 在Java中，适配器模式常...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":27,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":18,"path":"api/tags/设计模式.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
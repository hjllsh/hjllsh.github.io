{"title":"MDC实现链路追踪","uid":"4f10da7078fbc31ecbcb9fd541bf0d6b","slug":"MDC实现简单的链路追踪","date":"2023-06-02T12:36:15.000Z","updated":"2023-06-02T14:15:45.078Z","comments":true,"path":"api/articles/MDC实现简单的链路追踪.json","keywords":null,"cover":null,"content":"<h2 id=\"MDC实现链路追踪\"><a href=\"#MDC实现链路追踪\" class=\"headerlink\" title=\"MDC实现链路追踪\"></a>MDC实现链路追踪</h2><h4 id=\"先明确Filter、HandlerInterceptor-和-AOP-的执行流程\"><a href=\"#先明确Filter、HandlerInterceptor-和-AOP-的执行流程\" class=\"headerlink\" title=\"先明确Filter、HandlerInterceptor 和 AOP 的执行流程\"></a>先明确Filter、HandlerInterceptor 和 AOP 的执行流程</h4><p>在 Spring Boot 应用程序中，Filter、HandlerInterceptor 和 AOP 切面都是拦截器组件，在请求处理过程中扮演不同的角色，各自负责不同的任务。在一个请求处理中，这三者的执行顺序如下：</p>\n<ol>\n<li><p>首先，请求到达 Web 服务器后，将会首先执行 Filter 组件。如果存在多个 Filter，这些 Filter 将会依次进行拦截，执行顺序按照在 web.xml 或者 WebApplicationInitializer 配置的顺序进行。注意，Filter 的执行跟 URL 的 mappings 有关系，只有请求路径匹配了 mapping 的URL，才会执行过滤器中的逻辑。</p>\n</li>\n<li><p>紧接着，请求会经过 Spring MVC 中的 DispatcherServlet，DispatcherServlet 会根据请求信息找到对应的 HandlerMapping，确定将要执行哪个 Controller 中的处理方法。</p>\n</li>\n<li><p>如果存在 HandlerInterceptor，那么它们就会在请求到达 Controller 方法之前，先进行一些处理。如果存在多个 HandlerInterceptor，它们的执行顺序按照配置顺序执行，即 @Order 注解的顺序为order的值越小越优先执行</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">   <span class=\"token class-name\">Interceptor1</span><span class=\"token operator\">:</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token class-name\">Interceptor2</span><span class=\"token operator\">:</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token class-name\">Interceptor3</span><span class=\"token operator\">:</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   \n   <span class=\"token class-name\">Interceptor3</span><span class=\"token operator\">:</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token class-name\">Interceptor2</span><span class=\"token operator\">:</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token class-name\">Interceptor1</span><span class=\"token operator\">:</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   \n   <span class=\"token class-name\">Interceptor3</span><span class=\"token operator\">:</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token class-name\">Interceptor2</span><span class=\"token operator\">:</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token class-name\">Interceptor1</span><span class=\"token operator\">:</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">4.</span> <span class=\"token class-name\">Controller</span> 方法处理请求，并返回结果。这个过程中，如果使用了 <span class=\"token constant\">AOP</span> 切面来增强方法，<span class=\"token constant\">AOP</span> 切面会在 <span class=\"token class-name\">Controller</span> 方法执行之前或之后执行，对方法的调用进行增强和切入。\n\n<span class=\"token number\">5.</span> 如果存在 <span class=\"token class-name\">HandlerInterceptor</span>，那么它们会在 <span class=\"token class-name\">Controller</span> 方法返回结果之后，发生 <span class=\"token string\">\"postHandle\"</span>。此时，返回值还没有真正的传递到前端展示，<span class=\"token class-name\">HandlerInterceptor</span> 可以对 <span class=\"token class-name\">ModelAndView</span> 进行再次操作。\n\n<span class=\"token number\">6.</span> 最后，<span class=\"token class-name\">HandlerInterceptor</span> 会完成请求的所有操作，并执行 afterCompletion 方法。\n\n总体来说，<span class=\"token class-name\">Filter</span> 通常用于处理跨域、安全、日志记录等，<span class=\"token class-name\">HandlerInterceptor</span> 主要用于处理权限控制、日志记录、请求转发等，而 <span class=\"token constant\">AOP</span> 切面则主要用于对方法调用进行增强、切入和拦截。在一个请求处理中，<span class=\"token class-name\">Filter</span> 通常是最先执行的，然后是 <span class=\"token class-name\">HandlerInterceptor</span>，最后是 <span class=\"token constant\">AOP</span> 切面。因此，这三者的执行顺序具体根据系统的配置的顺序、<span class=\"token constant\">URL</span> 路径、<span class=\"token class-name\">Filter</span> 配置等因素而定，需要根据具体情况进行分析和调整。\n\n#### 整合logback日志实现链路追踪\n\n<span class=\"token operator\">*</span><span class=\"token operator\">*</span>xml配置<span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n\nspringboot自带logback的依赖，不需要导入任何包。我们只需要在项目路径下创建文件`logback<span class=\"token punctuation\">.</span>xml`\n\n````xml\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>configuration<span class=\"token punctuation\">></span></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>自定义日志相关的变量 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>property name<span class=\"token operator\">=</span><span class=\"token string\">\"LOG_PATH\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"./data/logs\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>property name<span class=\"token operator\">=</span><span class=\"token string\">\"LOG_FILE\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"Request_Log\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 格式化\n\t<span class=\"token operator\">%</span>level：日志级别，例如<span class=\"token constant\">DEBUG</span>、<span class=\"token constant\">INFO</span>、<span class=\"token constant\">WARN</span>、<span class=\"token constant\">ERROR</span>等。\n\t<span class=\"token operator\">%</span>d<span class=\"token punctuation\">&#123;</span>yyyy<span class=\"token operator\">-</span><span class=\"token constant\">MM</span><span class=\"token operator\">-</span>dd <span class=\"token constant\">HH</span><span class=\"token operator\">:</span>mm<span class=\"token operator\">:</span>ss<span class=\"token punctuation\">.</span><span class=\"token constant\">SSS</span><span class=\"token punctuation\">&#125;</span>：时间，格式为年<span class=\"token operator\">-</span>月<span class=\"token operator\">-</span>日 时<span class=\"token operator\">:</span>分<span class=\"token operator\">:</span>秒<span class=\"token punctuation\">.</span>毫秒。\n\t<span class=\"token operator\">%</span>thread：线程名。\n\t<span class=\"token operator\">%</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>：日志格式中的一个占位符\n\t\t<span class=\"token operator\">%</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">&#123;</span>tid<span class=\"token punctuation\">&#125;</span>：线程<span class=\"token constant\">ID</span>。\n\t\t<span class=\"token operator\">%</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">&#123;</span>uid<span class=\"token punctuation\">&#125;</span>：用户<span class=\"token constant\">ID</span>。\n\t<span class=\"token operator\">%</span>msg：日志消息。\n\t<span class=\"token operator\">%</span>n：换行符。\n\t<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>property name<span class=\"token operator\">=</span><span class=\"token string\">\"CONSOLE_LOG_PATTERN\"</span>\n    value<span class=\"token operator\">=</span><span class=\"token string\">\"|%level|%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;|%thread|%X&#123;tid&#125;|uid=%X&#123;uid&#125;|%msg|%n\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>include resource<span class=\"token operator\">=</span><span class=\"token string\">\"org/springframework/boot/logging/logback/defaults.xml\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>include resource<span class=\"token operator\">=</span><span class=\"token string\">\"org/springframework/boot/logging/logback/console-appender.xml\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>appender name<span class=\"token operator\">=</span><span class=\"token string\">\"STDOUT\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"ch.qos.logback.core.ConsoleAppender\"</span><span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>encoder <span class=\"token punctuation\">></span></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>pattern<span class=\"token punctuation\">></span></span>$<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">CONSOLE_LOG_PATTERN</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pattern<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>encoder<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>appender<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 全部日志的配置\n\t日志文件会输出到$<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">LOG_PATH</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span>$<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">LOG_FILE</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>log，也就是日志文件路径加上文件名。日志格式使用了 $<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">CONSOLE_LOG_PATTERN</span><span class=\"token punctuation\">&#125;</span> 常量，即控制台日志的格式。日志文件滚动按照天数进行，每天生成一个日志文件，保留最近 <span class=\"token number\">30</span> 天的日志文件并限制单个文件大小在 <span class=\"token number\">5</span><span class=\"token constant\">GB</span> 以内。生成的日志文件名按照 $<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">LOG_FILE</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>%d<span class=\"token punctuation\">&#123;</span>dd<span class=\"token operator\">-</span><span class=\"token constant\">MM</span><span class=\"token operator\">-</span>yyyy<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>log 的格式进行命名，并在archived文件夹下进行归档 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>appender name<span class=\"token operator\">=</span><span class=\"token string\">\"fileAppender\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span><span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>file<span class=\"token punctuation\">></span></span>$<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">LOG_PATH</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span>$<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">LOG_FILE</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>log<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>file<span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>append<span class=\"token punctuation\">></span></span><span class=\"token boolean\">true</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>append<span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>encoder <span class=\"token punctuation\">></span></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>pattern<span class=\"token punctuation\">></span></span>$<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">CONSOLE_LOG_PATTERN</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pattern<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>encoder<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>rollingPolicy <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 按天生成日志文件 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>fileNamePattern<span class=\"token punctuation\">></span></span>\n        $<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">LOG_PATH</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span>archived<span class=\"token operator\">/</span>$<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">LOG_FILE</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>%d<span class=\"token punctuation\">&#123;</span>dd<span class=\"token operator\">-</span><span class=\"token constant\">MM</span><span class=\"token operator\">-</span>yyyy<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>log\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>fileNamePattern<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>保留天数<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>maxHistory<span class=\"token punctuation\">></span></span><span class=\"token number\">30</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>maxHistory<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>单个文件的大小<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>totalSizeCap<span class=\"token punctuation\">></span></span><span class=\"token number\">5</span><span class=\"token constant\">GB</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>totalSizeCap<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>rollingPolicy<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>appender<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> error日志的配置<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>appender name<span class=\"token operator\">=</span><span class=\"token string\">\"fileError\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 仅输出指定日志级别的日志。在这里是<span class=\"token constant\">ERROR</span>级别 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>filter <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span><span class=\"token operator\">></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>level<span class=\"token punctuation\">></span></span><span class=\"token constant\">ERROR</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>level<span class=\"token operator\">></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>onMatch<span class=\"token punctuation\">></span></span><span class=\"token constant\">ACCEPT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>onMatch<span class=\"token operator\">></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>onMismatch<span class=\"token punctuation\">></span></span><span class=\"token constant\">DENY</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>onMismatch<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>filter<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>日志文件的生成路径和文件名 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>file<span class=\"token punctuation\">></span></span>$<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">LOG_PATH</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span>$<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">LOG_FILE</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>log<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>file<span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>append<span class=\"token punctuation\">></span></span><span class=\"token boolean\">true</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>append<span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>encoder <span class=\"token punctuation\">></span></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>pattern<span class=\"token punctuation\">></span></span>$<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">CONSOLE_LOG_PATTERN</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pattern<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>encoder<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>rollingPolicy <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span><span class=\"token operator\">></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>fileNamePattern<span class=\"token punctuation\">></span></span>\n        $<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">LOG_PATH</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span>archived<span class=\"token operator\">/</span>$<span class=\"token punctuation\">&#123;</span><span class=\"token constant\">LOG_FILE</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>%d<span class=\"token punctuation\">&#123;</span>dd<span class=\"token operator\">-</span><span class=\"token constant\">MM</span><span class=\"token operator\">-</span>yyyy<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>log\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>fileNamePattern<span class=\"token operator\">></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>maxHistory<span class=\"token punctuation\">></span></span><span class=\"token number\">30</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>maxHistory<span class=\"token operator\">></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>totalSizeCap<span class=\"token punctuation\">></span></span><span class=\"token number\">2</span><span class=\"token constant\">GB</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>totalSizeCap<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>rollingPolicy<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>appender<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>root level<span class=\"token operator\">=</span><span class=\"token string\">\"info\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>文件输出<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>appender<span class=\"token operator\">-</span>ref ref<span class=\"token operator\">=</span><span class=\"token string\">\"fileAppender\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>appender<span class=\"token operator\">-</span>ref ref<span class=\"token operator\">=</span><span class=\"token string\">\"fileError\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>制台输出<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>appender<span class=\"token operator\">-</span>ref ref<span class=\"token operator\">=</span><span class=\"token string\">\"STDOUT\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>root<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>configuration<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p>其中有两个自定义参数 <code>tid</code>和<code>uid</code>，需要将他们放入logback的<code>MDC</code>上下文中，这样日志在打印的时候就可以打印出来。</p>\n<p><strong>日志排查</strong></p>\n<p>控制台找到报错的请求的uid 执行下面的语句</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token string\">\"7eb0c96e-9296-4eec-8a9b-1d9ffc09949b\"</span> Request_Log.log <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>传入&#x2F;移除自定义参数</strong></p>\n<p>根据执行顺序：在filter 设置上每一个请求的标识MDC.put( 唯一标识 )，在handlerInterceptor的最外层记得把信息移除<code>RequestHolder.remove();</code></p>\n","text":"MDC实现链路追踪先明确Filter、HandlerInterceptor 和 AOP 的执行流程在 Spring Boot 应用程序中，Filter、HandlerInterceptor 和 AOP 切面都是拦截器组件，在请求处理过程中扮演不同的角色，各自负责不同的任务。在一个...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"链路追踪","slug":"链路追踪","count":1,"path":"api/tags/链路追踪.json"},{"name":"日志","slug":"日志","count":1,"path":"api/tags/日志.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MDC%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA\"><span class=\"toc-text\">MDC实现链路追踪</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%88%E6%98%8E%E7%A1%AEFilter%E3%80%81HandlerInterceptor-%E5%92%8C-AOP-%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">先明确Filter、HandlerInterceptor 和 AOP 的执行流程</span></a></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Redis基础","uid":"b6845422ba4775a7cab0c414606e3ecd","slug":"Redis基础","date":"2023-06-02T14:33:03.000Z","updated":"2023-06-03T15:50:35.971Z","comments":true,"path":"api/articles/Redis基础.json","keywords":null,"cover":[],"text":"认识NoSQLNoSql可以翻译做Not Only Sql（不仅仅是SQL），或者是No Sql（非Sql的）数据库。是相对于传统关系型数据库而言，有很大差异的一种特殊的数据库，因此也称之为非关系型数据库。 结构化与非结构化​ 传统关系型数据库是结构化数据，每一张表都有严格的约束...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":13,"path":"api/tags/redis.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"线程池的管理和使用","uid":"b491cfca14c8d6dfd4f8108806508bb6","slug":"线程池的管理和使用","date":"2023-06-01T06:36:07.000Z","updated":"2023-06-03T15:48:57.620Z","comments":true,"path":"api/articles/线程池的管理和使用.json","keywords":null,"cover":[],"text":"线程池的管理和使用​ 频繁的创建、销毁线程和线程池，会给系统带来额外的开销。未经池化及统一管理的线程，则会导致系统内线程数上限不可控。这种情况下，随着访问数增加，系统内线程数持续增长，CPU负载逐步提高。极端情况下，甚至可能会导致CPU资源被吃满，整个服务不可用。 解决方案替换掉...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"线程池","slug":"线程池","count":3,"path":"api/tags/线程池.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
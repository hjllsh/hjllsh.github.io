{"title":"单例模式","uid":"5e422a9b2c69bd7294ec71b84cbbb53b","slug":"单例模式","date":"2023-05-08T13:10:28.000Z","updated":"2023-05-08T15:15:46.818Z","comments":true,"path":"api/articles/单例模式.json","keywords":null,"cover":"/img/5.8.jpg","content":"<h2 id=\"什么是单例模式？单例模式的特点是什么？\"><a href=\"#什么是单例模式？单例模式的特点是什么？\" class=\"headerlink\" title=\"什么是单例模式？单例模式的特点是什么？\"></a><strong>什么是单例模式？单例模式的特点是什么？</strong></h2><p>单例模式属于创建型模式，⼀个单例类在任何情况下都只存在⼀个实例，</p>\n<p>构造⽅法必须是私有的、由⾃⼰创建⼀个静态变量存储实例，对外提供⼀</p>\n<p>个静态公有⽅法获取实例。</p>\n<p>优点是内存中只有⼀个实例，减少了开销，尤其是频繁创建和销毁实例的</p>\n<p>情况下并且可以避免对资源的多重占⽤。缺点是没有抽象层，难以扩展，</p>\n<p>与单⼀职责原则冲突。</p>\n<h2 id=\"单例模式的常⻅写法有哪些？\"><a href=\"#单例模式的常⻅写法有哪些？\" class=\"headerlink\" title=\"单例模式的常⻅写法有哪些？\"></a>单例模式的常⻅写法有哪些？</h2><h4 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h4><p>顾名思义，类⼀加载就创建对象，这种⽅式⽐较常⽤，但容易产⽣垃圾对象，浪费内存空间。</p>\n<ul>\n<li><p>优点：线程安全，没有加锁，执⾏效率较⾼</p>\n</li>\n<li><p>缺点：不是懒加载，类加载时就初始化，浪费内存空间</p>\n</li>\n</ul>\n<ul>\n<li><p>线程安全：饿汉式单例是如何保证线程安全的呢？它是基于类加载机制避免了多线程</p>\n<p>的同步问题，但是如果类被不同的类加载器加载就会创建不同的实例。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 1、私有化构造⽅法</span>\n <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n <span class=\"token comment\">// 2、定义⼀个静态变量指向⾃⼰类型</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\n<span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 3、对外提供⼀个公共的⽅法获取实例</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"使⽤反射破坏单例\"><a href=\"#使⽤反射破坏单例\" class=\"headerlink\" title=\"使⽤反射破坏单例\"></a>使⽤反射破坏单例</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span>\n<span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 使⽤反射破坏单例</span>\n <span class=\"token comment\">// 获取空参构造⽅法</span>\n <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">></span></span> declaredConstructor <span class=\"token operator\">=</span>\n<span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 设置强制访问</span>\n declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 创建实例</span>\n <span class=\"token class-name\">Singleton</span> singleton <span class=\"token operator\">=</span>\ndeclaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"反射创建的实例\"</span> <span class=\"token operator\">+</span> singleton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正常创建的实例\"</span> <span class=\"token operator\">+</span>\n<span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正常创建的实例\"</span> <span class=\"token operator\">+</span>\n<span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"输出结果如下\"><a href=\"#输出结果如下\" class=\"headerlink\" title=\"输出结果如下\"></a>输出结果如下</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">反射创建的实例\n<span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>single<span class=\"token punctuation\">.</span></span>Singleton</span><span class=\"token annotation punctuation\">@6267c3bb</span>\n正常创建的实例\n<span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>single<span class=\"token punctuation\">.</span></span>Singleton</span><span class=\"token annotation punctuation\">@533ddba</span>\n正常创建的实例\n<span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>single<span class=\"token punctuation\">.</span></span>Singleton</span><span class=\"token annotation punctuation\">@533ddba</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"线程不安全的懒汉式\"><a href=\"#线程不安全的懒汉式\" class=\"headerlink\" title=\"线程不安全的懒汉式\"></a>线程不安全的懒汉式</h4><p>这种⽅式在单线程下使⽤没有问题，对于多线程是⽆法保证单例的，这⾥列出来是为了和后⾯使⽤锁保证线程安全的单例做对⽐</p>\n<ul>\n<li>优点：懒加载</li>\n<li>缺点：线程不安全</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//线程不安全的懒汉式单例</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 1、私有化构造⽅法</span>\n <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n <span class=\"token comment\">// 2、定义⼀个静态变量指向⾃⼰类型</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance<span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 3、对外提供⼀个公共的⽅法获取实例</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 判断为 null 的时候再创建对象</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"线程安全的懒汉式\"><a href=\"#线程安全的懒汉式\" class=\"headerlink\" title=\"线程安全的懒汉式\"></a>线程安全的懒汉式</h4><p>懒汉式单例如何保证线程安全呢？通过 synchronized 关键字加锁保证线程</p>\n<p>安全， synchronized 可以添加在⽅法上⾯，也可以添加在代码块上⾯，这</p>\n<p>⾥演示添加在⽅法上⾯，存在的问题是 每⼀次调⽤ getInstance 获取实例时</p>\n<p>都需要加锁和释放锁，这样是⾮常影响性能的。</p>\n<ul>\n<li><p>优点：懒加载，线程安全</p>\n</li>\n<li><p>缺点：效率较低</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//懒汉式单例，⽅法上⾯添加 synchronized 保证线程安全</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 1、私有化构造⽅法</span>\n <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n <span class=\"token comment\">// 2、定义⼀个静态变量指向⾃⼰类型</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance<span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 3、对外提供⼀个公共的⽅法获取实例</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"双重检查锁-DCL\"><a href=\"#双重检查锁-DCL\" class=\"headerlink\" title=\"双重检查锁(DCL)\"></a>双重检查锁(DCL)</h4><p>这⾥的双重检查是指两次⾮空判断，锁指的是 synchronized 加锁，为什么</p>\n<p>要进⾏双重判断，其实很简单，第⼀重判断，如果实例已经存在，那么就</p>\n<p>不再需要进⾏同步操作，⽽是直接返回这个实例，如果没有创建，才会进</p>\n<p>⼊同步块，同步块的⽬的与之前相同，⽬的是为了防⽌有多个线程同时调</p>\n<p>⽤时，导致⽣成多个实例，有了同步块，每次只能有⼀个线程调⽤访问同</p>\n<p>步块内容，当第⼀个抢到锁的调⽤获取了实例之后，这个实例就会被创</p>\n<p>建，之后的所有调⽤都不会进⼊同步块，直接在第⼀重判断就返回了单</p>\n<p>例。</p>\n<p>关于内部的第⼆重空判断的作⽤，当多个线程⼀起到达锁位置时，进⾏锁</p>\n<p>竞争，其中⼀个线程获取锁，如果是第⼀次进⼊则为 null，会进⾏单例对</p>\n<p>象的创建，完成后释放锁，其他线程获取锁后就会被空判断拦截，直接返</p>\n<p>回已创建的单例对象。</p>\n<p>其中最关键的⼀个点就是 volatile 关键字的使⽤，关于 volatile 的详细介</p>\n<p>绍可以直接搜索 volatile 关键字即可，有很多写的⾮常好的⽂章，这⾥不做</p>\n<p>详细介绍，简单说明⼀下，双重检查锁中使⽤ volatile 的两个重要特性：</p>\n<p><strong>可⻅性、禁⽌指令重排序</strong></p>\n<p>当我们在引⽤变量上⾯添加 volatile 关键字以后，会通过在创建对象指令</p>\n<p>的前后添加内存屏障来禁⽌指令重排序，就可以避免这个问题，⽽且对</p>\n<p>volatile 修饰的变量的修改对其他任何线程都是可⻅的</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 1、私有化构造⽅法</span>\n <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token comment\">// 2、定义⼀个静态变量指向⾃⼰类型</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance<span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 3、对外提供⼀个公共的⽅法获取实例</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 第⼀重检查是否为 null</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 使⽤ synchronized 加锁</span>\n <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 第⼆重检查是否为 null</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// new 关键字创建对象不是原⼦操作</span>\n instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t \t\t<span class=\"token punctuation\">&#125;</span>\n \t\t<span class=\"token punctuation\">&#125;</span>\n \t<span class=\"token punctuation\">&#125;</span>\n <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>优点：懒加载，线程安全，效率较⾼</p>\n</li>\n<li><p>缺点：实现较复杂</p>\n</li>\n</ul>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//静态内部类实现单例</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 1、私有化构造⽅法</span>\n <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token comment\">// 2、对外提供获取实例的公共⽅法</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">return</span> <span class=\"token class-name\">InnerClass</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span>\n     \n <span class=\"token comment\">// 定义静态内部类</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerClass</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token constant\">INSTANCE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\n<span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>优点：懒加载，线程安全，效率较⾼，实现简单</li>\n</ul>\n<h6 id=\"静态内部类单例是如何实现懒加载的呢？⾸先，我们先了解下类的加载时机。\"><a href=\"#静态内部类单例是如何实现懒加载的呢？⾸先，我们先了解下类的加载时机。\" class=\"headerlink\" title=\"静态内部类单例是如何实现懒加载的呢？⾸先，我们先了解下类的加载时机。\"></a>静态内部类单例是如何实现懒加载的呢？⾸先，我们先了解下类的加载时机。</h6><p>虚拟机规范要求有且只有 5 种情况必须⽴即对类进⾏初始化（加载、验证、准备需要在此之前开始）：</p>\n<ol>\n<li>遇到 new 、 getstatic 、 putstatic 、 invokestatic 这 4 条字节码指令<br>时。⽣成这 4 条指令最常⻅的 Java 代码场景是：使⽤ new 关键字实<br>例化对象的时候、读取或设置⼀个类的静态字段（final 修饰除外，被<br>final 修饰的静态字段是常量，已在编译期把结果放⼊常量池）的时<br>候，以及调⽤⼀个类的静态⽅法的时候。</li>\n<li>使⽤ java.lang.reflect 包⽅法对类进⾏反射调⽤的时候。</li>\n<li>当初始化⼀个类的时候，如果发现其⽗类还没有进⾏过初始化，则需要<br>先触发其⽗类的初始化。</li>\n<li>当虚拟机启动时，⽤户需要指定⼀个要执⾏的主类（包含 main()的那<br>个类），虚拟机会先初始化这个主类。</li>\n<li>当使⽤ JDK 1.7 的动态语⾔⽀持时，如果⼀个<br>java.lang.invoke.MethodHandle 实例最后的解析结果是<br>REF_getStatic 、 REF_putStatic 、 REF_invokeStatic 的⽅法句柄，则需<br>要先触发这个⽅法句柄所对应的类的初始化。</li>\n</ol>\n<p>这 5 种情况被称为是类的主动引⽤，注意，这⾥《虚拟机规范》中使⽤的<br>限定词是 “有且仅有”，那么，除此之外的所有引⽤类都不会对类进⾏初始<br>化，称为被动引⽤。静态内部类就属于被动引⽤的情况。</p>\n<p>当 getInstance()⽅法被调⽤时，InnerClass 才在 Singleton 的运⾏时常量<br>池⾥，把符号引⽤替换为直接引⽤，这时静态对象 INSTANCE 也真正被创<br>建，然后再被 getInstance()⽅法返回出去，这点同饿汉模式。</p>\n<p>那么 INSTANCE 在创建过程中⼜是如何保证线程安全的呢？</p>\n<p>虚拟机会保证⼀个类的 <clinit>() ⽅法在多线程环境中被正确地加锁、同<br>步，如果多个线程同时去初始化⼀个类，那么只会有⼀个线程去执⾏这个<br>类的 <clinit>() ⽅法，其他线程都需要阻塞等待，直到活动线程执⾏<br><clinit>() ⽅法完毕。如果在⼀个类的 <clinit>() ⽅法中有耗时很⻓的操<br>作，就可能造成多个进程阻塞(需要注意的是，其他线程虽然会被阻塞，但<br>如果执⾏ <clinit>() ⽅法后，其他线程唤醒之后不会再次进⼊ <clinit>() ⽅<br>法。同⼀个加载器下，⼀个类型只会初始化⼀次。)，在实际应⽤中，这种<br>阻塞往往是很隐蔽的。</p>\n<p><strong>所以说静态内部类形式的单例可保证线程安全，也能保证单例的唯⼀性，同时也延迟了单例的实例化。</strong></p>\n<h4 id=\"枚举单例\"><a href=\"#枚举单例\" class=\"headerlink\" title=\"枚举单例\"></a>枚举单例</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//枚举实现单例</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>优点：简单，⾼效，线程安全，可以避免通过反射破坏枚举单例</li>\n</ul>\n<p>枚举在 java 中与普通类⼀样，都能拥有字段与⽅法，⽽且枚举实例创建是<br>线程安全的，在任何情况下，它都是⼀个单例，可以直接通过如下⽅式调<br>⽤获取实例：</p>\n<p><code>Singleton singleton = Singleton.INSTANCE;</code></p>\n<p>使⽤下⾯的命令反编译枚举类</p>\n<p><code>javap Singleton.class</code></p>\n<p>得到如下内容</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Compiled</span> from <span class=\"token string\">\"Singleton.java\"</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">.</span></span>Singleton</span>\n<span class=\"token keyword\">extends</span>\n<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">.</span></span>Singleton</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span>\n<span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">.</span></span>Singleton</span> <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">.</span></span>Singleton</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">.</span></span>Singleton</span>\n<span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从枚举的反编译结果可以看到，INSTANCE 被 static final 修饰，所以可以通过类名直接调⽤，因为static 类型的属性会在类被加载之后被初始化，当⼀个 Java 类第⼀次被真正使⽤到的时候静态资源被初始化、Java 类的加载和初始化过程都是线程安全的，所以创建⼀个 enum 类型是线程安全的。</p>\n<h6 id=\"通过反射破坏枚举，实现代码如下：\"><a href=\"#通过反射破坏枚举，实现代码如下：\" class=\"headerlink\" title=\"通过反射破坏枚举，实现代码如下：\"></a>通过反射破坏枚举，实现代码如下：</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span>\n<span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token class-name\">Singleton</span> singleton <span class=\"token operator\">=</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span>\n singleton<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello enum\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 尝试使⽤反射破坏单例</span>\n <span class=\"token comment\">// 枚举类没有空参构造⽅法，反编译后可以看到枚举有⼀个两个</span>\n参数的构造⽅法\n <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">></span></span> declaredConstructor <span class=\"token operator\">=</span>\n<span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 设置强制访问</span>\n declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 创建实例，这⾥会报错，因为⽆法通过反射创建枚举的实例</span>\n <span class=\"token class-name\">Singleton</span> enumSingleton <span class=\"token operator\">=</span>\ndeclaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>enumSingleton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运⾏结果报如下错误：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Exception</span> in thread <span class=\"token string\">\"main\"</span>\n<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>IllegalArgumentException</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Cannot</span> reflectively\ncreate <span class=\"token keyword\">enum</span> objects at\njava<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span>Constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstanceWithCaller</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">492</span><span class=\"token punctuation\">)</span> \nat java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span>Constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">480</span><span class=\"token punctuation\">)</span>\nat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">.</span></span>Test</span><span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以⽆法通过反射创建枚举的实例。</p>\n","text":"什么是单例模式？单例模式的特点是什么？单例模式属于创建型模式，⼀个单例类在任何情况下都只存在⼀个实例， 构造⽅法必须是私有的、由⾃⼰创建⼀个静态变量存储实例，对外提供⼀ 个静态公有⽅法获取实例。 优点是内存中只有⼀个实例，减少了开销，尤其是频繁创建和销毁实例的 情况下并且可以避免...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":25,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":17,"path":"api/tags/设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%9F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%89%B9%E7%82%B9%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">什么是单例模式？单例模式的特点是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%B8%B8%E2%BB%85%E5%86%99%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">单例模式的常⻅写法有哪些？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A5%BF%E6%B1%89%E5%BC%8F\"><span class=\"toc-text\">饿汉式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E2%BD%A4%E5%8F%8D%E5%B0%84%E7%A0%B4%E5%9D%8F%E5%8D%95%E4%BE%8B\"><span class=\"toc-text\">使⽤反射破坏单例</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B\"><span class=\"toc-text\">输出结果如下</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E6%87%92%E6%B1%89%E5%BC%8F\"><span class=\"toc-text\">线程不安全的懒汉式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E6%87%92%E6%B1%89%E5%BC%8F\"><span class=\"toc-text\">线程安全的懒汉式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5%E9%94%81-DCL\"><span class=\"toc-text\">双重检查锁(DCL)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB\"><span class=\"toc-text\">静态内部类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%8D%95%E4%BE%8B%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%87%92%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%91%A2%EF%BC%9F%E2%BE%B8%E5%85%88%EF%BC%8C%E6%88%91%E4%BB%AC%E5%85%88%E4%BA%86%E8%A7%A3%E4%B8%8B%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%97%B6%E6%9C%BA%E3%80%82\"><span class=\"toc-text\">静态内部类单例是如何实现懒加载的呢？⾸先，我们先了解下类的加载时机。</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E5%8D%95%E4%BE%8B\"><span class=\"toc-text\">枚举单例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E7%A0%B4%E5%9D%8F%E6%9E%9A%E4%B8%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">通过反射破坏枚举，实现代码如下：</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"spring中常见的设计模式","uid":"0c6e8405652937a86cc3782f838cf782","slug":"Spring中的设计模式","date":"2023-05-09T04:00:50.000Z","updated":"2023-05-09T13:53:18.440Z","comments":true,"path":"api/articles/Spring中的设计模式.json","keywords":null,"cover":null,"text":"Spring中常见的设计模式1.Spring中的单例模式单例模式 与 单例bean 的区别 根据单例模式的目的 Ensure a class only has one instance, and provide a global point of access to it 就是确...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":25,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":17,"path":"api/tags/设计模式.json"},{"name":"Spring","slug":"Spring","count":9,"path":"api/tags/Spring.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"spring事务失效的情况以及注意事项","uid":"064fd1f961f785b45ddfca5b3ce563ee","slug":"Spring事务失效的情况以及注意事项","date":"2023-05-07T12:31:38.000Z","updated":"2023-05-09T04:18:19.814Z","comments":true,"path":"api/articles/Spring事务失效的情况以及注意事项.json","keywords":null,"cover":"/img/5.7.jpg","text":"什么是spring事务？​ Spring Framework提供了一种简单而强大的机制来管理事务，这个机制被称为Spring事务。Spring事务是在Java应用程序中管理数据库事务的一种强大的方法。在Spring事务中，所有的数据库访问是在事务管理器的上下文中进行的。 ​ Sp...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":25,"path":"api/tags/Java.json"},{"name":"tx","slug":"tx","count":1,"path":"api/tags/tx.json"},{"name":"Spring","slug":"Spring","count":9,"path":"api/tags/Spring.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
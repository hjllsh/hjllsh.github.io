{"title":"Git经典场景操作","uid":"a23f2d002fc146791ed8e3604cc7ab69","slug":"Git经典场景操作","date":"2023-06-14T14:29:11.000Z","updated":"2023-06-15T13:58:30.560Z","comments":true,"path":"api/articles/Git经典场景操作.json","keywords":null,"cover":[],"content":"<h3 id=\"Git常用命令\"><a href=\"#Git常用命令\" class=\"headerlink\" title=\"Git常用命令\"></a>Git常用命令</h3><table>\n<thead>\n<tr>\n<th>命令名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git config –global user.name 用户名</td>\n<td>设置用户签名</td>\n</tr>\n<tr>\n<td>git config –global user.email 邮箱</td>\n<td>设置用户签名</td>\n</tr>\n<tr>\n<td>git init</td>\n<td>初始化本地库</td>\n</tr>\n<tr>\n<td>git status</td>\n<td>查看本地库状态</td>\n</tr>\n<tr>\n<td>git add 文件名</td>\n<td>添加到暂存区</td>\n</tr>\n<tr>\n<td>git commit -m “日志信息” 文件名</td>\n<td>提交到本地库</td>\n</tr>\n<tr>\n<td>git reflog</td>\n<td>查看历史记录</td>\n</tr>\n<tr>\n<td>git reset –hard 版本号</td>\n<td>版本穿梭</td>\n</tr>\n</tbody></table>\n<h3 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h3><table>\n<thead>\n<tr>\n<th>命令名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git branch 分支名</td>\n<td>创建分支</td>\n</tr>\n<tr>\n<td>git branch -v</td>\n<td>查看分支</td>\n</tr>\n<tr>\n<td>git checkout 分支名</td>\n<td>切换分支</td>\n</tr>\n<tr>\n<td>git merge 分支名</td>\n<td>把指定的分支合并到当前分支</td>\n</tr>\n</tbody></table>\n<h3 id=\"远程仓库操作\"><a href=\"#远程仓库操作\" class=\"headerlink\" title=\"远程仓库操作\"></a>远程仓库操作</h3><table>\n<thead>\n<tr>\n<th>命令名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git remote -v</td>\n<td>查看当前所有远程地址别名</td>\n</tr>\n<tr>\n<td>git remote add 别名 远程地址</td>\n<td>起别名</td>\n</tr>\n<tr>\n<td>git push 别名 分支</td>\n<td>推送本地分支的内容到远程仓库</td>\n</tr>\n<tr>\n<td>git clone 远程地址</td>\n<td>将远程仓库的内容的克隆到本地</td>\n</tr>\n<tr>\n<td>git pull 远程地址别名 远程分支别名</td>\n<td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td>\n</tr>\n</tbody></table>\n<h3 id=\"git关联项目，获取历史版本\"><a href=\"#git关联项目，获取历史版本\" class=\"headerlink\" title=\"git关联项目，获取历史版本\"></a>git关联项目，获取历史版本</h3><ul>\n<li><p>用 git 进行初始化  <strong>git init</strong></p>\n</li>\n<li><p>从 gitee 上面 拿到仓库地址 （HTTPS）</p>\n</li>\n<li><p>打开git bash,利用 <strong>git remote add origin 地址</strong>，完成关联</p>\n</li>\n<li><p>利用 <strong>git pull origin master(也可能是main分支）</strong> 将代码从远端拉取下来</p>\n</li>\n<li><p>利用 <strong>git log –pretty&#x3D;oneline</strong> 查看提交日志</p>\n</li>\n<li><p>利用 <strong>git checkout ID</strong> 获得需要的历史版本的全部代码</p>\n</li>\n</ul>\n<h3 id=\"邀请加入团队\"><a href=\"#邀请加入团队\" class=\"headerlink\" title=\"邀请加入团队\"></a>邀请加入团队</h3><ul>\n<li>在仓库的setting -&gt; Manage access -&gt; Invite a collaborator -&gt;输入collaborator的id（github账号）</li>\n<li>复制地址并通过微信钉钉等方式发送给该用户</li>\n<li>被邀请用户拿到邀请码链接，访问，点击接收邀请</li>\n<li>成之后可以看到被邀请用户的仓库也拥有远程仓库</li>\n</ul>\n<h3 id=\"跨团队协作\"><a href=\"#跨团队协作\" class=\"headerlink\" title=\"跨团队协作\"></a>跨团队协作</h3><ul>\n<li>将远程仓库的地址复制发给邀请跨团队协作的人</li>\n<li>协作人通过地址栏来到远程仓库，点击Fork将项目叉到自己的本地仓库</li>\n</ul>\n<p><img src=\"/../assets/redis-git/image-20230615150430780.png\" alt=\"image-20230615150430780\"></p>\n<ul>\n<li>协作人修改之后Commit Change</li>\n<li>还可以点击Pull，创建一个新的请求进行聊天</li>\n</ul>\n<h3 id=\"IDEA集成Git\"><a href=\"#IDEA集成Git\" class=\"headerlink\" title=\"IDEA集成Git\"></a>IDEA集成Git</h3><p>配置Git忽略文件</p>\n<ul>\n<li>创建忽略规则文件 xxxx.ignore（前缀名随便起，建议是 git.ignore），这个文件的存放位置原则上在哪里都可以，为了便于让~&#x2F;.gitconfig 文件引用，建议也放在用户家目录下</li>\n<li>在.gitconfig 文件中引用忽略配置文件（此文件在 Windows 的家目录中）</li>\n</ul>\n<p>定位Git程序</p>\n<ul>\n<li>选择git.exe的安装路径</li>\n</ul>\n<p>初始化本地库</p>\n<ul>\n<li>vcs -&gt; import into Version Control -&gt; Create Git Repository…</li>\n</ul>\n<p>添加到暂存区</p>\n<ul>\n<li>右击项目，选择Git -&gt; Add 将项目添加到暂存区</li>\n</ul>\n<p>提交到本地库</p>\n<ul>\n<li>选择Git -&gt; Commit Directory</li>\n</ul>\n<p>切换版本</p>\n<ul>\n<li>点击Version Control，点击Log 查看版本</li>\n<li>选择要切换的版本，右键点击Checkout Reversion</li>\n</ul>\n<p>创建分支</p>\n<ul>\n<li>选择Git -&gt; Repository -&gt; Branches -&gt; New Branch</li>\n</ul>\n<p>切换分支</p>\n<ul>\n<li>右下角Git Branches 选择分区，点击Checkout</li>\n</ul>\n<p>合并分支</p>\n<ul>\n<li>右下角Git Branches 选择分区， Merge into Current</li>\n</ul>\n<p>合并冲突</p>\n<h3 id=\"IDEA集成GitHub\"><a href=\"#IDEA集成GitHub\" class=\"headerlink\" title=\"IDEA集成GitHub\"></a>IDEA集成GitHub</h3><ul>\n<li><p>设置github账号</p>\n<ul>\n<li><p>Settings -&gt; Version Control -&gt; Github -&gt; 点击＋ 号</p>\n</li>\n<li><p>输入Github账号密码</p>\n<ul>\n<li><p>是因为网络原因连接不上，可以使用token方式连接</p>\n<p><img src=\"/../assets/redis-git/image-20230615151723115.png\" alt=\"image-20230615151723115\"></p>\n</li>\n<li><p>Github账户的Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>分享工程到Github </p>\n<ul>\n<li>vcs -&gt; Import into Version Control -&gt; Share Project on Github</li>\n</ul>\n</li>\n<li><p>push推送本地库到远程库</p>\n</li>\n<li><p>pull拉取远程库到本地库</p>\n</li>\n<li><p>clone克隆远程库到本地</p>\n</li>\n</ul>\n<h3 id=\"刚才提交了什么\"><a href=\"#刚才提交了什么\" class=\"headerlink\" title=\"刚才提交了什么?\"></a>刚才提交了什么?</h3><p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> show 或者 <span class=\"token function\">git</span> log <span class=\"token parameter variable\">-n1</span> <span class=\"token parameter variable\">-p</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"提交信息-commit-message-写错了\"><a href=\"#提交信息-commit-message-写错了\" class=\"headerlink\" title=\"提交信息(commit message)写错了\"></a>提交信息(commit message)写错了</h3><p>提交信息(commit message)写错了且这次提交(commit)还没有推(push)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span> <span class=\"token parameter variable\">--only</span> <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'xxxxxxx'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"从一个提交-commit-里移除一个文件\"><a href=\"#从一个提交-commit-里移除一个文件\" class=\"headerlink\" title=\"从一个提交(commit)里移除一个文件\"></a>从一个提交(commit)里移除一个文件</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout HEAD^ myfile\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>使用 git checkout 命令，将 HEAD^ 指向的前一次提交中的 myfile 文件检出到工作区中。</p>\n<p>对 myfile 文件进行必要的修改，并使用 git add -A 命令将修改后的文件加入暂存区。</p>\n<p>使用 <code>git commit --amend</code> 命令创建一个新的修订版本，该版本包含了前一次提交的内容，并合并了工作区和暂存区的最新修改。</p>\n<h3 id=\"删除我的的最后一次提交-commit\"><a href=\"#删除我的的最后一次提交-commit\" class=\"headerlink\" title=\"删除我的的最后一次提交(commit)\"></a>删除我的的最后一次提交(commit)</h3><p>需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#这个命令会将当前分支上的 HEAD 指针退回到前一次的提交，并强制重置工作区和暂存区中的所有文件到前一次提交的状态。这个操作会永久性的清除所有未提交的更改，因此在使用时需要非常谨慎。</span>\n<span class=\"token function\">git</span> reset HEAD^ <span class=\"token parameter variable\">--hard</span>\n<span class=\"token comment\"># 命令会强制将本地分支的更改推送到远程分支，会覆盖远程分支的历史记录。</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">[</span>remote<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>branch<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#这个命令将 HEAD 指向前一次提交，但是不会重置工作区和暂存区，因此你可以继续改进提交内容，然后使用 git commit 命令提交重修订版本。这个命令适用于你需要更正提交信息或者需要在之前的提交中添加一些遗漏的文件时使用。</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--soft</span> HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>。</p>\n","text":"Git常用命令 命令名称 作用 git config –global user.name 用户名 设置用户签名 git config –global user.email 邮箱 设置用户签名 git init 初始化本地库 git status 查看本地库状态 git add 文...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Git","slug":"Git","count":1,"path":"api/tags/Git.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">Git常用命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">分支操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">远程仓库操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#git%E5%85%B3%E8%81%94%E9%A1%B9%E7%9B%AE%EF%BC%8C%E8%8E%B7%E5%8F%96%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">git关联项目，获取历史版本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%82%80%E8%AF%B7%E5%8A%A0%E5%85%A5%E5%9B%A2%E9%98%9F\"><span class=\"toc-text\">邀请加入团队</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C\"><span class=\"toc-text\">跨团队协作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IDEA%E9%9B%86%E6%88%90Git\"><span class=\"toc-text\">IDEA集成Git</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IDEA%E9%9B%86%E6%88%90GitHub\"><span class=\"toc-text\">IDEA集成GitHub</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9A%E6%89%8D%E6%8F%90%E4%BA%A4%E4%BA%86%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">刚才提交了什么?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF-commit-message-%E5%86%99%E9%94%99%E4%BA%86\"><span class=\"toc-text\">提交信息(commit message)写错了</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%8F%90%E4%BA%A4-commit-%E9%87%8C%E7%A7%BB%E9%99%A4%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">从一个提交(commit)里移除一个文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%88%91%E7%9A%84%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E6%8F%90%E4%BA%A4-commit\"><span class=\"toc-text\">删除我的的最后一次提交(commit)</span></a></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Redis持久化","uid":"25530e52ab0638e424f51939c49f1051","slug":"Redis持久化","date":"2023-06-15T08:51:33.000Z","updated":"2023-06-15T09:24:04.798Z","comments":true,"path":"api/articles/Redis持久化.json","keywords":null,"cover":[],"text":"Redis持久化RDB持久化RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，默认是...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":13,"path":"api/tags/redis.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"MySQL实战","uid":"11fe232dbef934e03d9537a3a12675e0","slug":"MySQL-实战(1)","date":"2023-06-14T07:25:58.000Z","updated":"2023-06-14T13:13:20.284Z","comments":true,"path":"api/articles/MySQL-实战(1).json","keywords":null,"cover":[],"text":"不建议使用长事务假设一个值从1被按顺序改成了2、3、4，在回滚日志里面就会有类似下面的记录 当前值是4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的read-view。如图中看到的，在视图A、B、C里面，这一个记录的值分别是1、2、4，同一条记录在系统中可以存在多个版本...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":12,"path":"api/tags/MySQL.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
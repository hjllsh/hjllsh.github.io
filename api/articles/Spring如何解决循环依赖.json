{"title":"Spring如何解决循环依赖","uid":"2846594611fd32071ec8e1a72cd8f17d","slug":"Spring如何解决循环依赖","date":"2023-05-11T13:26:38.000Z","updated":"2023-05-12T16:06:04.690Z","comments":true,"path":"api/articles/Spring如何解决循环依赖.json","keywords":null,"cover":[],"content":"<h2 id=\"Spring如何解决循环依赖\"><a href=\"#Spring如何解决循环依赖\" class=\"headerlink\" title=\"Spring如何解决循环依赖\"></a>Spring如何解决循环依赖</h2><h4 id=\"解决set循环依赖注入\"><a href=\"#解决set循环依赖注入\" class=\"headerlink\" title=\"解决set循环依赖注入\"></a>解决set循环依赖注入</h4><p><strong>Spring一级缓存singletonObjects</strong></p>\n<p>singletonObjects是一级缓存，用于存储单例Bean的实例对象。也就是说，当Spring容器创建一个单例Bean时，会将该Bean的实例对象放入一级缓存中，在后续使用该Bean时，直接从缓存中获取实例对象，避免了重复创建实例对象的过程。</p>\n<p>当没有循环依赖注入时，可以正常创建Bean</p>\n<p><img src=\"/assets/images/%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%9601.png\"></p>\n<p><strong>存在问题</strong>：无法解决循环依赖</p>\n<p>首先调用A的getBean()到一级缓存看看A是否创建，如果返回为null表示没找到，就开始创建A，此时需要用到B进行依赖注入，又去一级缓存找有没有B，如果没有就开始创建B，此时B又需要用到A，又去一级缓存找A…..</p>\n<p>可见只有一级缓存是无法解决循环依赖注入的</p>\n<p><img src=\"/assets/images/%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%9602.png\"></p>\n<p><strong>引入Spring的三级缓存singltonFactories</strong></p>\n<p>解决循环依赖问题：</p>\n<p>先到一级缓存看看A是否创建，如果返回为null表示没找到，就开始创建A，此时创建的是一个半成品的A（工厂对象），把A放入三级缓存，此时需要用到B进行依赖注入，又去一级缓存找有没有B，如果没有就开始创建B，此时创建的也是一个半成品的B，此时B又需要用到A，又去一级缓存找A发现没有，又去三级缓存找，找到了A，并完成依赖注入，把B的成品放入singletonObjects，然后清除singletonFactories内的半成品B。这是A就可以拿到B，完成初始化。把A放到一级缓存，并清除三级缓存的A。</p>\n<p><img src=\"/assets/images/%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%9603.png\"></p>\n<p><strong>问题又来了</strong>：Spring注入的对象大多是代理对象，那么能否完成注入呢</p>\n<p>先到一级缓存看看A是否创建，如果返回为null表示没找到，就开始创建A，此时创建的是一个半成品的A（工厂对象），把A放入三级缓存，此时需要用到B进行依赖注入，又去一级缓存找有没有B，如果没有就开始创建B，此时创建的也是一个半成品的B，此时B又需要用到A，又去一级缓存找A发现没有，又去三级缓存找，找到了A，并完成依赖注入（这时注入的并不是代理对象），初始化B并创建B的代理，把B的代理放入singletonObjects，然后清除singletonFactories内的半成品B。这是A就可以拿到B的代理，完成初始化。把A放到一级缓存，并清除三级缓存的A。可以看到，B注入的并不是代理，所有只有两个缓存是不可以解决Spring关于的代理对象的依赖注入。</p>\n<p>总的来说是因为存在循环依赖时，是依赖注入先发生，创建代理后发生</p>\n<p><img src=\"/assets/images/%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%9604.png\"></p>\n<p><strong>引入Spring二级缓存earlySingletonObjects</strong></p>\n<p>解决方法：提前创建代理</p>\n<p>Spring并不是对所有Bean的创建都提前创建代理，只有存在循环依赖时才提前创建代理</p>\n<p><img src=\"/assets/images/%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%9605.png\"></p>\n<h4 id=\"解决construct循环依赖注入\"><a href=\"#解决construct循环依赖注入\" class=\"headerlink\" title=\"解决construct循环依赖注入\"></a>解决construct循环依赖注入</h4><p>A的构造依赖B，所有A无法创建工厂对象放入三级缓存，B的构造也依赖A，B也无法创建工厂对象放入缓存</p>\n<p><img src=\"/assets/images/%E6%9E%84%E9%80%A0%E5%99%A8%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%9601.png\"></p>\n<p>Spring的三级缓存无法解决构造器依赖注入。</p>\n<p>如何解决构造器的循环依赖呢？</p>\n<p><strong>方法一</strong></p>\n<p>可以给A注入一个B的代理对象（并不是真的B代理对象，而是创建了一个匿名内部类的TargetSource实现，当真正使用到B的方法时，会通过BeanFactory获取B，再调用），只要不妨碍A的创建以及初始化就行，当A成功创建之后，B也能成功创建，这时A想要用B的方法，只需要通过代理找到真正的B调用方法</p>\n<p><img src=\"/assets/images/%E6%9E%84%E9%80%A0%E5%99%A8%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%9602.png\"></p>\n<p><strong>方法二</strong></p>\n<p>可以给A注入一个工厂对象，只要不妨碍A的创建以及初始化就行，当A成功创建之后，B也能成功创建，这时A想要用B的方法，只需要通过工厂对象获取B，再调用方法</p>\n<p><img src=\"/assets/images/%E6%9E%84%E9%80%A0%E5%99%A8%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%9603.png\"></p>\n<p>以上两种都是通过<strong>延迟</strong>对象的创建来解析构造器循环依赖</p>\n<h5 id=\"那么它们的延迟Spring中如何体现呢？\"><a href=\"#那么它们的延迟Spring中如何体现呢？\" class=\"headerlink\" title=\"那么它们的延迟Spring中如何体现呢？\"></a>那么它们的延迟Spring中如何体现呢？</h5><p>在Spring中，会在构造器循环依赖的其中一个对象的构造的参数上添加@Lazy来延迟对象的创建</p>\n<p>下面是一个在构造器循环依赖情况下使用 <code>@Lazy</code> 注解的示例代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoggerFactory</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AnnotationConfigUtils</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lazy</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GenericApplicationContext</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PostConstruct</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConstructDelayCreate</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> log <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Lazy</span> <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A内的b>>>>&#123;&#125;\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token annotation punctuation\">@PostConstruct</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> log <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">A</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B内的a>>>>&#123;&#125;\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token annotation punctuation\">@PostConstruct</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">GenericApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AnnotationConfigUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerAnnotationConfigProcessors</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果:\"></a>运行结果:</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span><span class=\"token constant\">DEBUG</span><span class=\"token punctuation\">]</span> <span class=\"token number\">23</span><span class=\"token operator\">:</span><span class=\"token number\">49</span><span class=\"token operator\">:</span><span class=\"token number\">27.836</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">A</span>内的b<span class=\"token operator\">>>></span><span class=\"token operator\">></span><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">day04<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span>TestConstructDelayCreate</span>$<span class=\"token class-name\">B</span>$$<span class=\"token class-name\">EnhancerBySpringCGLIB</span>$$f09826e3 \n<span class=\"token punctuation\">[</span><span class=\"token constant\">DEBUG</span><span class=\"token punctuation\">]</span> <span class=\"token number\">23</span><span class=\"token operator\">:</span><span class=\"token number\">49</span><span class=\"token operator\">:</span><span class=\"token number\">27.842</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">[</span><span class=\"token constant\">DEBUG</span><span class=\"token punctuation\">]</span> <span class=\"token number\">23</span><span class=\"token operator\">:</span><span class=\"token number\">49</span><span class=\"token operator\">:</span><span class=\"token number\">27.845</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">B</span>内的a<span class=\"token operator\">>>></span><span class=\"token operator\">></span><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">day04<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span>TestConstructDelayCreate</span>$<span class=\"token class-name\">A</span> \n<span class=\"token punctuation\">[</span><span class=\"token constant\">DEBUG</span><span class=\"token punctuation\">]</span> <span class=\"token number\">23</span><span class=\"token operator\">:</span><span class=\"token number\">49</span><span class=\"token operator\">:</span><span class=\"token number\">27.845</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">day04<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span>TestConstructDelayCreate</span>$<span class=\"token class-name\">B</span>$$<span class=\"token class-name\">EnhancerBySpringCGLIB</span>$$f09826e3\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">day04<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span>TestConstructDelayCreate</span>$<span class=\"token class-name\">B</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>跟踪@Lazy</p>\n<p><code>Object result = this.getAutowireCandidateResolver().getLazyResolutionProxyIfNecessary(descriptor, requestingBeanName);</code></p>\n<p>检查是否有@Lazy注解，是否需要创建代理</p>\n<p><img src=\"/assets/images/Lazy01.png\"></p>\n<p><code>return this.isLazy(descriptor) ? this.buildLazyResolutionProxy(descriptor, beanName) : null;</code></p>\n<p>是否需要创建代理</p>\n<p><img src=\"/assets/images/Lazy02.png\"></p>\n<p>看看创建代理的逻辑  <code>buildLazyResolutionProxy</code></p>\n<p>创建了一个匿名内部类的TargetSource实现</p>\n<p><img src=\"/assets/images/Lazy03.png\"></p>\n<p>看看TargetSource的实现</p>\n<p>当调用getTarget()时，会通过BeanFactory获取B，再调用</p>\n<p><img src=\"/assets/images/Lazy04.png\"></p>\n<p>在上述代码中，可以给A注入一个B的代理对象，并不是真的B代理对象，而是创建了一个匿名内部类的TargetSource实现，内部关联了BeanFactory，当调用getTarget()时，会通过BeanFactory获取B，再调用。</p>\n","feature":true,"text":"Spring如何解决循环依赖解决set循环依赖注入Spring一级缓存singletonObjects singletonObjects是一级缓存，用于存储单例Bean的实例对象。也就是说，当Spring容器创建一个单例Bean时，会将该Bean的实例对象放入一级缓存中，在后续使...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":18,"path":"api/tags/Java.json"},{"name":"Spring","slug":"Spring","count":7,"path":"api/tags/Spring.json"},{"name":"面试题","slug":"面试题","count":1,"path":"api/tags/面试题.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">Spring如何解决循环依赖</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3set%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">解决set循环依赖注入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3construct%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">解决construct循环依赖注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%82%A3%E4%B9%88%E5%AE%83%E4%BB%AC%E7%9A%84%E5%BB%B6%E8%BF%9FSpring%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%93%E7%8E%B0%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">那么它们的延迟Spring中如何体现呢？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">运行结果:</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"代理的创建时机","uid":"a685b627e4865e5f328e43bd436e0d9e","slug":"代理的创建时机","date":"2023-05-11T12:55:58.000Z","updated":"2023-05-11T13:36:21.626Z","comments":true,"path":"api/articles/代理的创建时机.json","keywords":null,"cover":null,"text":"代理的创建时机代理的创建时机 创建 -&gt; ( * ) 依赖注入 -&gt; 初始化 ( * ) 初始化之后 (无循环依赖时) 实例创建后, 依赖注入前 (有循环依赖时), 并暂存于二级缓存 public class A17_1 &#123; public static vo...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":18,"path":"api/tags/Java.json"},{"name":"Spring","slug":"Spring","count":7,"path":"api/tags/Spring.json"},{"name":"Proxy","slug":"Proxy","count":2,"path":"api/tags/Proxy.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true}}
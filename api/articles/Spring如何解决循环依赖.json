{"title":"Spring如何解决循环依赖","uid":"2846594611fd32071ec8e1a72cd8f17d","slug":"Spring如何解决循环依赖","date":"2023-05-11T13:26:38.000Z","updated":"2023-05-11T15:23:56.543Z","comments":true,"path":"api/articles/Spring如何解决循环依赖.json","keywords":null,"cover":[],"content":"<h2 id=\"Spring如何解决循环依赖\"><a href=\"#Spring如何解决循环依赖\" class=\"headerlink\" title=\"Spring如何解决循环依赖\"></a>Spring如何解决循环依赖</h2><p><strong>Spring一级缓存singletonObjects</strong></p>\n<p>singletonObjects是一级缓存，用于存储单例Bean的实例对象。也就是说，当Spring容器创建一个单例Bean时，会将该Bean的实例对象放入一级缓存中，在后续使用该Bean时，直接从缓存中获取实例对象，避免了重复创建实例对象的过程。</p>\n<p>当没有循环依赖注入时，可以正常创建Bean</p>\n<p><img src=\"/assets/images/%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%9601.png\"></p>\n<p><strong>存在问题</strong>：无法解决循环依赖</p>\n<p>首先调用A的getBean()到一级缓存看看A是否创建，如果返回为null表示没找到，就开始创建A，此时需要用到B进行依赖注入，又去一级缓存找有没有B，如果没有就开始创建B，此时B又需要用到A，又去一级缓存找A…..</p>\n<p>可见只有一级缓存是无法解决循环依赖注入的</p>\n<p><img src=\"/assets/images/%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%9602.png\"></p>\n<p><strong>引入Spring的三级缓存singltonFactories</strong></p>\n<p>解决循环依赖问题：</p>\n<p>先到一级缓存看看A是否创建，如果返回为null表示没找到，就开始创建A，此时创建的是一个半成品的A，把A放入三级缓存，此时需要用到B进行依赖注入，又去一级缓存找有没有B，如果没有就开始创建B，此时创建的也是一个半成品的B，此时B又需要用到A，又去一级缓存找A发现没有，又去三级缓存找，找到了A，并完成依赖注入，把B的成品放入singletonObjects，然后清除singletonFactories内的半成品B。这是A就可以拿到B，完成初始化。把A放到一级缓存，并清除三级缓存的A。</p>\n<p><img src=\"/assets/images/%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%9603.png\"></p>\n<p><strong>问题又来了</strong>：Spring注入的对象大多是代理对象，那么能否完成注入呢</p>\n<p>先到一级缓存看看A是否创建，如果返回为null表示没找到，就开始创建A，此时创建的是一个半成品的A，把A放入三级缓存，此时需要用到B进行依赖注入，又去一级缓存找有没有B，如果没有就开始创建B，此时创建的也是一个半成品的B，此时B又需要用到A，又去一级缓存找A发现没有，又去三级缓存找，找到了A，并完成依赖注入（这时注入的并不是代理对象），初始化B并创建B的代理，把B的代理放入singletonObjects，然后清除singletonFactories内的半成品B。这是A就可以拿到B的代理，完成初始化。把A放到一级缓存，并清除三级缓存的A。可以看到，B注入的并不是代理，所有只有两个缓存是不可以解决Spring关于的代理对象的依赖注入。</p>\n<p>总的来说是因为存在循环依赖时，是依赖注入先发生，创建代理后发生</p>\n<p><img src=\"/assets/images/%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%9604.png\"></p>\n<p><strong>引入Spring二级缓存earlySingletonObjects</strong></p>\n<p>解决方法：提前创建代理</p>\n<p>Spring并不是对所有Bean的创建都提前创建代理，只有存在循环依赖时才提前创建代理</p>\n<p><img src=\"/assets/images/%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%9605.png\"></p>\n","feature":true,"text":"Spring如何解决循环依赖Spring一级缓存singletonObjects singletonObjects是一级缓存，用于存储单例Bean的实例对象。也就是说，当Spring容器创建一个单例Bean时，会将该Bean的实例对象放入一级缓存中，在后续使用该Bean时，直接从...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":18,"path":"api/tags/Java.json"},{"name":"Spring","slug":"Spring","count":7,"path":"api/tags/Spring.json"},{"name":"面试题","slug":"面试题","count":1,"path":"api/tags/面试题.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">Spring如何解决循环依赖</span></a></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"代理的创建时机","uid":"a685b627e4865e5f328e43bd436e0d9e","slug":"代理的创建时机","date":"2023-05-11T12:55:58.000Z","updated":"2023-05-11T13:36:21.626Z","comments":true,"path":"api/articles/代理的创建时机.json","keywords":null,"cover":null,"text":"代理的创建时机代理的创建时机 创建 -&gt; ( * ) 依赖注入 -&gt; 初始化 ( * ) 初始化之后 (无循环依赖时) 实例创建后, 依赖注入前 (有循环依赖时), 并暂存于二级缓存 public class A17_1 &#123; public static vo...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":18,"path":"api/tags/Java.json"},{"name":"Spring","slug":"Spring","count":7,"path":"api/tags/Spring.json"},{"name":"Proxy","slug":"Proxy","count":2,"path":"api/tags/Proxy.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true}}
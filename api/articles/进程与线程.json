{"title":"进程与线程","uid":"89180d8ad200729090513c1ce4f6ad31","slug":"进程与线程","date":"2023-06-09T12:37:40.000Z","updated":"2023-06-24T08:26:04.649Z","comments":true,"path":"api/articles/进程与线程.json","keywords":null,"cover":[],"content":"<h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><p>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。</p>\n<p>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器等），也有的程序只能启动一个实例进程（例如网易云音乐、360 安全卫士等）</p>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><p>一个进程之内可以分为一到多个线程。</p>\n<p>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行</p>\n<p>Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。 在 windows 中进程是不活动的，只是作</p>\n<p>为线程的容器</p>\n<p><strong>二者对比</strong></p>\n<p>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集</p>\n<p>进程拥有共享的资源，如内存空间等，供其内部的线程共享</p>\n<p>进程间通信较为复杂</p>\n<ul>\n<li><p>同一台计算机的进程通信称为 IPC（Inter-process communication）</p>\n</li>\n<li><p>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP</p>\n</li>\n</ul>\n<p>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量</p>\n<p>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</p>\n<h3 id=\"并行与并发\"><a href=\"#并行与并发\" class=\"headerlink\" title=\"并行与并发\"></a>并行与并发</h3><p>单核 cpu 下，线程实际还是串行执行的。操作系统中有一个组件叫做任务调度器，将 cpu 的时间片分给不同的程序使用，只是由于 cpu 在线程间（时间片很短）的切换非常快。总结为一句话就是： 微观串行，宏观并行 ，</p>\n<p>多核 cpu下，每个 核（core） 都可以调度运行线程，这时候线程可以是<strong>并行的</strong>。</p>\n<p>并发（concurrent）是同一时间应对（dealing with）多件事情的能力</p>\n<p>并行（parallel）是同一时间动手做（doing）多件事情的能力</p>\n<p>小结 ：</p>\n<ol>\n<li><p>单核 cpu 下，多线程不能实际提高程序运行效率，只是为了能够在不同的任务之间切换，不同线程轮流使用cpu ，不至于一个线程总占用 cpu，别的线程没法干活</p>\n</li>\n<li><p>多核 cpu 可以并行跑多个线程，但能否提高程序运行效率还是要分情况的有些任务，经过精心设计，将任务拆分，并行执行，当然可以提高程序的运行效率。但不是所有计算任务都能拆分也不是所有任务都需要拆分，任务的目的如果不同，谈拆分和效率没啥意义</p>\n</li>\n<li><p>IO 操作不占用 cpu，只是我们一般拷贝文件使用的是【阻塞 IO】，这时相当于线程虽然不用 cpu，但需要一直等待 IO 结束，没能充分利用线程。</p>\n</li>\n</ol>\n<h3 id=\"Java线程\"><a href=\"#Java线程\" class=\"headerlink\" title=\"Java线程\"></a>Java线程</h3><h4 id=\"创建和运行线程\"><a href=\"#创建和运行线程\" class=\"headerlink\" title=\"创建和运行线程\"></a>创建和运行线程</h4><p>方法一，直接使用Thread</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 创建线程对象</span>\n<span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 要执行的任务</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 启动线程</span>\nt<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>方法二，使用Runnable配合Thread</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> runnable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 要执行的任务</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建线程对象</span>\n<span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span> runnable <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 启动线程</span>\nt<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>用 Runnable 更容易与线程池等高级 API 配合，用 Runnable 让任务类脱离了 Thread 继承体系，更灵活</p>\n<p>方法三，FutureTask配合Thread</p>\n<p>FutureTask 能够接收 Callable 类型的参数，用来处理有返回结果的情况</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 创建任务对象</span>\n<span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> task3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 参数1 是任务对象; 参数2 是线程名字，推荐</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>task3<span class=\"token punctuation\">,</span> <span class=\"token string\">\"t3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 主线程阻塞，同步等待 task 执行完毕的结果</span>\n<span class=\"token class-name\">Integer</span> result <span class=\"token operator\">=</span> task3<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结果是:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"观察多个线程同时运行\"><a href=\"#观察多个线程同时运行\" class=\"headerlink\" title=\"观察多个线程同时运行\"></a>观察多个线程同时运行</h3><h4 id=\"查看进程线程的方法\"><a href=\"#查看进程线程的方法\" class=\"headerlink\" title=\"查看进程线程的方法\"></a>查看进程线程的方法</h4><p><strong>windows</strong></p>\n<ul>\n<li><p>任务管理器可以查看进程和线程数，也可以用来杀死进程</p>\n</li>\n<li><p>tasklist 查看进程</p>\n</li>\n<li><p>taskkill 杀死进程</p>\n</li>\n</ul>\n<p><strong>linux</strong></p>\n<ul>\n<li><p>ps -fe 查看所有进程</p>\n</li>\n<li><p>ps -fT -p <PID> 查看某个进程（PID）的所有线程</p>\n</li>\n<li><p>kill 杀死进程</p>\n</li>\n<li><p>top 按大写 H 切换是否显示线程</p>\n</li>\n<li><p>top -H -p <PID> 查看某个进程（PID）的所有线程</p>\n</li>\n</ul>\n<p><strong>Java</strong></p>\n<ul>\n<li><p>jps 命令查看所有 Java 进程</p>\n</li>\n<li><p>jstack  <PID>  查看某个 Java 进程（PID）的所有线程状态</p>\n</li>\n<li><p>jconsole 来查看某个 Java 进程中线程的运行情况（图形界面）</p>\n<ul>\n<li><p>jconsole 远程监控配置</p>\n<p>需要以如下方式运行你的 java 类</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">    java -Djava.rmi.server.hostname&#x3D;&#96;ip地址&#96; -Dcom.sun.management.jmxremote -\n    Dcom.sun.management.jmxremote.port&#x3D;&#96;连接端口&#96; -Dcom.sun.management.jmxremote.ssl&#x3D;是否安全连接 -\n    Dcom.sun.management.jmxremote.authenticate&#x3D;是否认证 java类\n\n#### 线程运行的原理\n\n**栈与栈帧**\n\nJava Virtual Machine Stacks （Java 虚拟机栈）\n\n JVM 中由堆、栈、方法区所组成，其中栈内存就是给线程用的，每个线程启动后，虚拟机就会为其分配一块栈内存。\n\n每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占用的内存\n\n每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法\n\n#### 线程上下文切换（Thread Context Switch）\n\n因为以下一些原因导致 cpu 不再执行当前的线程，转而执行另一个线程的代码\n\n- 线程的 cpu 时间片用完\n\n- 垃圾回收\n\n- 有更高优先级的线程需要运行\n\n- 线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法\n\n当 Context Switch 发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态，Java 中对应的概念就是程序计数器（Program Counter Register），它的作用是记住下一条 jvm 指令的执行地址，是线程私有的\n\n- 状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等\n\n- Context Switch 频繁发生会影响性能\n\n#### 常见方法\n\n**start** **与** **run**\n\n- 直接调用 run 是在主线程中执行了 run，没有启动新的线程\n\n- 使用 start 是启动新的线程，通过新的线程间接执行 run 中的代码\n\n**sleep** **与** **yield**\n\n**sleep**\n\n1. 调用 sleep 会让当前线程从 *Running* 进入 *Timed Waiting* 状态（阻塞）\n\n2. 其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出 InterruptedException\n\n3. 睡眠结束后的线程未必会立刻得到执行\n\n4. 建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性\n\n**yield**\n\n1. 调用 yield 会让当前线程从 *Running* 进入 *Runnable* 就绪状态，然后调度执行其它线程\n\n2. 具体的实现依赖于操作系统的任务调度器\n\n**线程优先级**\n\n- 线程优先级会提示（hint）调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它\n\n- 如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用\n\n**wait vs sleep**\n\n共同点\n\n* wait() ，wait(long) 和 sleep(long) 的效果都是让当前线程暂时放弃 CPU 的使用权，进入阻塞状态\n\n不同点\n\n* 方法归属不同\n  * sleep(long) 是 Thread 的静态方法\n  * 而 wait()，wait(long) 都是 Object 的成员方法，每个对象都有\n\n* 醒来时机不同\n  * 执行 sleep(long) 和 wait(long) 的线程都会在等待相应毫秒后醒来\n  * wait(long) 和 wait() 还可以被 notify 唤醒，wait() 如果不唤醒就一直等下去\n  * 它们都可以被打断唤醒\n\n* 锁特性不同（重点）\n  * wait 方法的调用必须先获取 wait 对象的锁，而 sleep 则无此限制\n  * wait 方法执行后会释放对象锁，允许其它线程获得该对象锁（我放弃 cpu，但你们还可以用）\n  * 而 sleep 如果在 synchronized 代码块中执行，并不会释放对象锁（我放弃 cpu，你们也用不了）\n\n **join** \n\n等待线程运行结束，可以指定等待的时间，如果指定的等待时间超过了线程运行的时间就会提前结束。\n\n**interrupt 方法详解**\n\n sleep，wait，join等方法都会让线程进入阻塞状态，interrupt打断sleep，wait，join的线程\n\n打断 sleep 的线程, 会清空打断状态，以 sleep 为例\n\n&#96;&#96;&#96;&#96;java\nprivate static void test1() throws InterruptedException &#123;\n Thread t1 &#x3D; new Thread(()-&gt;&#123;\n sleep(1);\n &#125;, &quot;t1&quot;);\n t1.start();\n sleep(0.5);\n t1.interrupt();\n log.debug(&quot; 打断状态: &#123;&#125;&quot;, t1.isInterrupted());\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<p>输出：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>InterruptedException</span><span class=\"token operator\">:</span> sleep interrupted\n at <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Native</span> <span class=\"token class-name\">Method</span><span class=\"token punctuation\">)</span>\n at <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">340</span><span class=\"token punctuation\">)</span>\n at <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span>TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">386</span><span class=\"token punctuation\">)</span>\n at <span class=\"token class-name\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>n2<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Sleeper</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Sleeper</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n at <span class=\"token class-name\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>n4<span class=\"token punctuation\">.</span></span>TestInterrupt</span><span class=\"token punctuation\">.</span>lambda$test1$<span class=\"token function\">3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestInterrupt</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">59</span><span class=\"token punctuation\">)</span>\n at <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">745</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token operator\">:</span><span class=\"token number\">10.374</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestInterrupt</span> <span class=\"token operator\">-</span> 打断状态<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>打断正常运行的线程, 不会清空打断状态</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token class-name\">Thread</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">boolean</span> interrupted <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>interrupted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 打断状态: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> interrupted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t2<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">20</span><span class=\"token operator\">:</span><span class=\"token number\">57</span><span class=\"token operator\">:</span><span class=\"token number\">37.964</span> <span class=\"token punctuation\">[</span>t2<span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestInterrupt</span> <span class=\"token operator\">-</span> 打断状态<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>打断 park 线程, 不会清空打断状态</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"park...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unpark...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打断状态：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t1<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">52.795</span> <span class=\"token punctuation\">[</span>t1<span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestInterrupt</span> <span class=\"token operator\">-</span> park<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">53.295</span> <span class=\"token punctuation\">[</span>t1<span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestInterrupt</span> <span class=\"token operator\">-</span> unpark<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">53.295</span> <span class=\"token punctuation\">[</span>t1<span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestInterrupt</span> <span class=\"token operator\">-</span> 打断状态：<span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>不推荐的方法</p>\n<p>stop()\t停止线程运行</p>\n<p>suspend() \t挂起（暂停）线程运行</p>\n<p>resume() \t恢复线程运行</p>\n<h4 id=\"Park-amp-Unpark\"><a href=\"#Park-amp-Unpark\" class=\"headerlink\" title=\"Park &amp; Unpark\"></a>Park &amp; Unpark</h4><p>它们是 LockSupport 类中的方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 暂停当前线程</span>\n<span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 恢复某个线程的运行</span>\n<span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>暂停线程对象<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>先 park 再 unpark</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"park...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resume...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unpark...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">18</span><span class=\"token operator\">:</span><span class=\"token number\">42</span><span class=\"token operator\">:</span><span class=\"token number\">52.585</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestParkUnpark</span> <span class=\"token punctuation\">[</span>t1<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">18</span><span class=\"token operator\">:</span><span class=\"token number\">42</span><span class=\"token operator\">:</span><span class=\"token number\">53.589</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestParkUnpark</span> <span class=\"token punctuation\">[</span>t1<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> park<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">18</span><span class=\"token operator\">:</span><span class=\"token number\">42</span><span class=\"token operator\">:</span><span class=\"token number\">54.583</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestParkUnpark</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> unpark<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">18</span><span class=\"token operator\">:</span><span class=\"token number\">42</span><span class=\"token operator\">:</span><span class=\"token number\">54.583</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestParkUnpark</span> <span class=\"token punctuation\">[</span>t1<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> resume<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>先 unpark 再 park</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"park...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resume...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unpark...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">18</span><span class=\"token operator\">:</span><span class=\"token number\">43</span><span class=\"token operator\">:</span><span class=\"token number\">50.765</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestParkUnpark</span> <span class=\"token punctuation\">[</span>t1<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">18</span><span class=\"token operator\">:</span><span class=\"token number\">43</span><span class=\"token operator\">:</span><span class=\"token number\">51.764</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestParkUnpark</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> unpark<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">18</span><span class=\"token operator\">:</span><span class=\"token number\">43</span><span class=\"token operator\">:</span><span class=\"token number\">52.769</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestParkUnpark</span> <span class=\"token punctuation\">[</span>t1<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> park<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">18</span><span class=\"token operator\">:</span><span class=\"token number\">43</span><span class=\"token operator\">:</span><span class=\"token number\">52.769</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestParkUnpark</span> <span class=\"token punctuation\">[</span>t1<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> resume<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"wait-x2F-notify\"><a href=\"#wait-x2F-notify\" class=\"headerlink\" title=\"wait &#x2F; notify\"></a>wait &#x2F; notify</h4><p>它们都是线程之间进行协作的手段，都属于 Object 对象的方法。必须获得此对象的锁，才能调用这几个方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n obj<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 让线程在obj上一直等待下去</span>\n <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"其它代码....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n obj<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 让线程在obj上一直等待下去</span>\n <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"其它代码....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n <span class=\"token comment\">// 主线程两秒后执行</span>\n <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"唤醒 obj 上其它线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n obj<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//①唤醒obj上一个线程 </span>\n <span class=\"token comment\">// obj.notifyAll(); //②唤醒obj上所有等待线程</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">①\n<span class=\"token number\">20</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">53.096</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Thread</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestWaitNotify</span> <span class=\"token operator\">-</span> 执行<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">20</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">53.099</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Thread</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestWaitNotify</span> <span class=\"token operator\">-</span> 执行<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">20</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">55.096</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestWaitNotify</span> <span class=\"token operator\">-</span> 唤醒 obj 上其它线程\n<span class=\"token number\">20</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">55.096</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Thread</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestWaitNotify</span> <span class=\"token operator\">-</span> 其它代码<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">②\n<span class=\"token number\">19</span><span class=\"token operator\">:</span><span class=\"token number\">58</span><span class=\"token operator\">:</span><span class=\"token number\">15.457</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Thread</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestWaitNotify</span> <span class=\"token operator\">-</span> 执行<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">19</span><span class=\"token operator\">:</span><span class=\"token number\">58</span><span class=\"token operator\">:</span><span class=\"token number\">15.460</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Thread</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestWaitNotify</span> <span class=\"token operator\">-</span> 执行<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">19</span><span class=\"token operator\">:</span><span class=\"token number\">58</span><span class=\"token operator\">:</span><span class=\"token number\">17.456</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestWaitNotify</span> <span class=\"token operator\">-</span> 唤醒 obj 上其它线程\n<span class=\"token number\">19</span><span class=\"token operator\">:</span><span class=\"token number\">58</span><span class=\"token operator\">:</span><span class=\"token number\">17.456</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Thread</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestWaitNotify</span> <span class=\"token operator\">-</span> 其它代码<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">19</span><span class=\"token operator\">:</span><span class=\"token number\">58</span><span class=\"token operator\">:</span><span class=\"token number\">17.456</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Thread</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">c<span class=\"token punctuation\">.</span></span>TestWaitNotify</span> <span class=\"token operator\">-</span> 其它代码<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>wait() 方法会释放对象的锁，进入 WaitSet 等待区，从而让其他线程就机会获取对象的锁。无限制等待，直到notify 为止。wait(long n) 有时限的等待, 到 n 毫秒后结束等待，或是被 notify</p>\n<h3 id=\"主线程与守护线程\"><a href=\"#主线程与守护线程\" class=\"headerlink\" title=\"主线程与守护线程\"></a>主线程与守护线程</h3><p>默认情况下，Java 进程需要等待所有线程都运行结束，才会结束。有一种特殊的线程叫做守护线程，只要其它非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>垃圾回收器线程就是一种守护线程</p>\n<p>Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等待它们处理完当前请求</p></blockquote>\n<h3 id=\"操作系统层面的五种状态\"><a href=\"#操作系统层面的五种状态\" class=\"headerlink\" title=\"操作系统层面的五种状态\"></a>操作系统层面的五种状态</h3><p>从操作系统层面来描述</p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230612124228290.png\" alt=\"image-20230612124228290\"></p>\n<p>【初始状态】仅是在语言层面创建了线程对象，还未与操作系统线程关联</p>\n<p>【可运行状态&#x2F;就绪状态】指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行</p>\n<p>【运行状态】指获取了 CPU 时间片运行中的状态</p>\n<ul>\n<li>当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换</li>\n</ul>\n<p>【阻塞状态】</p>\n<ul>\n<li><p>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入【阻塞状态】</p>\n</li>\n<li><p>等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</p>\n</li>\n<li><p>与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们</p>\n</li>\n</ul>\n<p>【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</p>\n<h3 id=\"Java-API-层面的六种状态\"><a href=\"#Java-API-层面的六种状态\" class=\"headerlink\" title=\"Java API 层面的六种状态\"></a>Java API 层面的六种状态</h3><p><strong>六种状态及转换</strong></p>\n<p><img src=\"E:\\砥砺前行\\Java面试专题-资料\\day02-并发篇\\讲义\\img\\image-20210831090722658.png\" alt=\"image-20210831090722658\"></p>\n<p>分别是</p>\n<ul>\n<li>新建(NEW)<ul>\n<li>当一个线程对象被创建，但还未调用 start 方法时处于<strong>新建</strong>状态</li>\n<li>此时未与操作系统底层线程关联</li>\n</ul>\n</li>\n<li>可运行(RUNNABLE)<ul>\n<li>调用了 start 方法，就会由<strong>新建</strong>进入<strong>可运行</strong></li>\n<li>此时与底层线程关联，由操作系统调度执行</li>\n</ul>\n</li>\n<li>终结(TERMINATED)<ul>\n<li>线程内代码已经执行完毕，由<strong>可运行</strong>进入<strong>终结</strong></li>\n<li>此时会取消与底层线程关联</li>\n</ul>\n</li>\n<li>阻塞(BLOCKED)<ul>\n<li>当获取锁失败后，由<strong>可运行</strong>进入 Monitor 的阻塞队列<strong>阻塞</strong>，此时不占用 cpu 时间</li>\n<li>当持锁线程释放锁时，会按照一定规则唤醒阻塞队列中的<strong>阻塞</strong>线程，唤醒后的线程进入<strong>可运行</strong>状态</li>\n</ul>\n</li>\n<li>等待(WAITING)<ul>\n<li>当获取锁成功后，但由于条件不满足，调用了 wait() 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合<strong>等待</strong>，同样不占用 cpu 时间</li>\n<li>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>等待</strong>线程，恢复为<strong>可运行</strong>状态</li>\n</ul>\n</li>\n<li>有时限等待(TIME_WAITING)<ul>\n<li>当获取锁成功后，但由于条件不满足，调用了 wait(long) 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合进行<strong>有时限等待</strong>，同样不占用 cpu 时间</li>\n<li>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>有时限等待</strong>线程，恢复为<strong>可运行</strong>状态，并重新去竞争锁</li>\n<li>如果等待超时，也会从<strong>有时限等待</strong>状态恢复为<strong>可运行</strong>状态，并重新去竞争锁</li>\n<li>还有一种情况是调用 sleep(long) 方法也会从<strong>可运行</strong>状态进入<strong>有时限等待</strong>状态，但与 Monitor 无关，不需要主动唤醒，超时时间到自然恢复为<strong>可运行</strong>状态</li>\n</ul>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><em><strong>其它情况</strong></em></p>\n<ul>\n<li>可以用 interrupt() 方法打断<strong>等待</strong>、<strong>有时限等待</strong>的线程，让它们恢复为<strong>可运行</strong>状态</li>\n<li>park，unpark 等方法也可以让线程等待和唤醒</li>\n</ul></blockquote>\n<h3 id=\"共享模型\"><a href=\"#共享模型\" class=\"headerlink\" title=\"共享模型\"></a>共享模型</h3><p>两个线程对初始值为 0 的静态变量一个做自增，一个做自减，各做 5000 次，的结果可能是正数、负数、零。</p>\n<p>因为 Java 中对静态变量的自增，自减并不是原子操作，要彻底理解，必须从字节码来进行分析</p>\n<p>如对于 i++ 而言（i 为静态变量），实际会产生如下的 JVM 字节码指令：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">getstatic i <span class=\"token comment\">// 获取静态变量i的值</span>\niconst_1 <span class=\"token comment\">// 准备常量1</span>\niadd <span class=\"token comment\">// 自增</span>\nputstatic i <span class=\"token comment\">// 将修改后的值存入静态变量i</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> i– 也是类似：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">getstatic i <span class=\"token comment\">// 获取静态变量i的值</span>\niconst_1 <span class=\"token comment\">// 准备常量1</span>\nisub <span class=\"token comment\">// 自减</span>\nputstatic i <span class=\"token comment\">// 将修改后的值存入静态变量i</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>单线程以上代码是顺序执行（不会交错）没有问题。</p>\n</li>\n<li><p>多线程下会产生指令交错。</p>\n</li>\n</ul>\n<p>例如出现正数的情况：</p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230612132732575.png\" alt=\"image-20230612132732575\"></p>\n<p>临界区Critical Section</p>\n<ul>\n<li><p>一个程序运行多个线程本身是没有问题的</p>\n</li>\n<li><p>问题出在多个线程访问共享资源</p>\n<ul>\n<li>多个线程读共享资源其实也没有问题</li>\n<li>在多个线程对共享资源读写操作时发生指令交错，就会出现问题</li>\n</ul>\n</li>\n<li><p>一段代码块内如果存在对共享资源的多线程读写操作，称这段代码块为临界区</p>\n</li>\n</ul>\n<p>竞态条件Race Condition</p>\n<p>多个线程在临界区内执行，由于代码的执行序列不同而导致结果无法预测，称之为发生了竞态条件</p>\n<h4 id=\"互斥的解决方案\"><a href=\"#互斥的解决方案\" class=\"headerlink\" title=\"互斥的解决方案\"></a>互斥的解决方案</h4><p>为了避免临界区的竞态条件发生，有多种手段可以达到目的。</p>\n<ul>\n<li><p>阻塞式的解决方案：synchronized，Lock</p>\n</li>\n<li><p>非阻塞式的解决方案：原子变量</p>\n</li>\n</ul>\n<p><strong>synchronized</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>对象<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 线程1， 线程2(blocked)</span>\n<span class=\"token punctuation\">&#123;</span>\n 临界区\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>加对象锁的情况：</p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230612155229040.png\" alt=\"image-20230612155229040\"></p>\n<p>synchronized实际是用对象锁保证了临界区内代码的原子性，临界区内的代码对外是不可分割的，不会被线程切换所打断。</p>\n<p>方法上的synchronized</p>\n<p>非静态方法相当于是锁住this(当前对象)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n \n \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n等价于\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n \n \t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>静态方法相当于锁住整个类（.class）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n等价于\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n \n \t\t<span class=\"token punctuation\">&#125;</span>\n \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>java 中互斥和同步都可以采用 synchronized 关键字来完成，但它们还是有区别的：</p>\n<ul>\n<li><p>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码</p>\n</li>\n<li><p>同步是由于线程执行的先后、顺序不同、需要一个线程等待其它线程运行到某个点</p>\n</li>\n</ul></blockquote>\n<h4 id=\"lock-vs-synchronized\"><a href=\"#lock-vs-synchronized\" class=\"headerlink\" title=\"lock vs synchronized\"></a>lock vs synchronized</h4><p><strong>不同点</strong></p>\n<ul>\n<li>语法层面<ul>\n<li>synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现</li>\n<li>Lock 是接口，源码由 jdk 提供，用 java 语言实现</li>\n<li>使用 synchronized 时，退出同步代码块锁会自动释放，而使用 Lock 时，需要手动调用 unlock 方法释放锁</li>\n</ul>\n</li>\n<li>功能层面<ul>\n<li>二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能</li>\n<li>Lock 提供了许多 synchronized 不具备的功能，例如获取等待状态、公平锁、可打断、可超时、多条件变量</li>\n<li>Lock 有适合不同场景的实现，如 ReentrantLock， ReentrantReadWriteLock</li>\n</ul>\n</li>\n<li>性能层面<ul>\n<li>在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖</li>\n<li>在竞争激烈时，Lock 的实现通常会提供更好的性能</li>\n</ul>\n</li>\n</ul>\n<p><strong>公平锁</strong></p>\n<ul>\n<li>公平锁的公平体现<ul>\n<li>已经处在阻塞队列中的线程（不考虑超时）始终都是公平的，先进先出</li>\n<li>公平锁是指未处于阻塞队列中的线程来争抢锁，如果队列不为空，则老实到队尾等待</li>\n<li>非公平锁是指未处于阻塞队列中的线程来争抢锁，与队列头唤醒的线程去竞争，谁抢到算谁的</li>\n</ul>\n</li>\n<li>公平锁会降低吞吐量，一般不用</li>\n</ul>\n<p><strong>条件变量</strong></p>\n<ul>\n<li>ReentrantLock 中的条件变量功能类似于普通 synchronized 的 wait，notify，用在当线程获得锁后，发现条件不满足时，临时等待的链表结构</li>\n<li>与 synchronized 的等待集合不同之处在于，ReentrantLock 中的条件变量可以有多个，可以实现更精细的等待、唤醒控制</li>\n</ul>\n<h4 id=\"变量的线程安全分析\"><a href=\"#变量的线程安全分析\" class=\"headerlink\" title=\"变量的线程安全分析\"></a>变量的线程安全分析</h4><p><strong>成员变量和静态变量是否线程安全？</strong></p>\n<ul>\n<li><p>如果它们没有共享，则线程安全</p>\n</li>\n<li><p>如果它们被共享了，根据它们的状态是否能够改变，又分两种情况</p>\n<ul>\n<li>如果只有读操作，则线程安全</li>\n<li>如果有读写操作，则这段代码是临界区，需要考虑线程安全</li>\n</ul>\n</li>\n</ul>\n<p><strong>局部变量是否线程安全？</strong></p>\n<ul>\n<li><p>局部变量是线程安全的</p>\n</li>\n<li><p>但局部变量引用的对象则未必</p>\n<ul>\n<li>如果该对象没有逃离方法的作用访问，它是线程安全的</li>\n<li>如果该对象逃离<strong>方法的作用范围</strong>，需要考虑线程安全</li>\n</ul>\n</li>\n</ul>\n<p><strong>局部变量线程安全分析</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>每个线程调用 test1() 方法时局部变量 i，会在每个线程的栈帧内存中被创建多份，因此不存在共享</p>\n<p>如同：</p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230612210733689.png\" alt=\"image-20230612210733689\"></p>\n<p>对象逃离方法的作用范围</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadUnsafe</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> loopNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> loopNumber<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// &#123; 临界区, 会产生竞态条件</span>\n <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// &#125; 临界区</span>\n \t<span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">THREAD_NUMBER</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">LOOP_NUMBER</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token class-name\">ThreadUnsafe</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">THREAD_NUMBER</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n test<span class=\"token punctuation\">.</span><span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOOP_NUMBER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Thread\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果线程2 还未 add，线程1 remove 就会报错：</p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230612212103484.png\" alt=\"image-20230612212103484\"></p>\n<p>将 list 修改为局部变量</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSafe</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> loopNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> loopNumber<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">method3</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>list 是局部变量，每个线程调用时会创建其不同实例，没有共享，而 method2 的参数是从 method1 中传递过来的，与 method1 中引用同一个对象，method3 的参数分析与 method2 相同</p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230612212403221.png\" alt=\"image-20230612212403221\"></p>\n<h4 id=\"常见线程安全类\"><a href=\"#常见线程安全类\" class=\"headerlink\" title=\"常见线程安全类\"></a>常见线程安全类</h4><p>String、Integer、StringBuffer、Random、Vector、Hashtable、java.util.concurrent 包下的类</p>\n<p>这里说它们是线程安全的是多个线程调用它们同一个实例的某个方法时，是线程安全的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Hashtable</span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n table<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n table<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它们的每个方法是原子的，但它们多个方法的组合不是原子的。</p>\n<p>线程安全类方法的组合码不是线程安全的</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Hashtable</span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 线程1，线程2</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n table<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230612213739702.png\" alt=\"image-20230612213739702\"></p>\n<p><strong>不可变类线程安全性</strong></p>\n<p>String、Integer 等都是不可变类，因为其内部的状态不可以改变，因此它们的方法都是线程安全的</p>\n<h4 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h4><p><strong>原子性</strong></p>\n<ul>\n<li>起因：多线程下，不同线程的<strong>指令发生了交错</strong>导致的共享变量的读写混乱</li>\n<li>解决：用悲观锁或乐观锁解决，volatile 并<strong>不能</strong>解决原子性</li>\n</ul>\n<p><strong>可见性</strong></p>\n<ul>\n<li>起因：由于编译器优化、或缓存优化、或 CPU 指令重排序优化导致的对共享变量所做的修改另外的线程看不到</li>\n<li>解决：用 volatile 修饰共享变量，能够防止编译器等优化发生，让一个线程对共享变量的修改对另一个线程可见</li>\n</ul>\n<p><strong>有序性</strong></p>\n<ul>\n<li>起因：由于编译器优化、或缓存优化、或 CPU 指令重排序优化导致指令的实际执行顺序与编写顺序不一致</li>\n<li>解决：用 volatile 修饰共享变量会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果</li>\n<li>注意：<ul>\n<li><strong>volatile 变量写</strong>加的屏障是阻止上方其它写操作越过屏障排到 <strong>volatile 变量写</strong>之下</li>\n<li><strong>volatile 变量读</strong>加的屏障是阻止下方其它读操作越过屏障排到 <strong>volatile 变量读</strong>之上</li>\n<li>volatile 读写加入的屏障只能防止<strong>同一线程</strong>内的指令重排</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"悲观锁-vs-乐观锁\"><a href=\"#悲观锁-vs-乐观锁\" class=\"headerlink\" title=\"悲观锁 vs 乐观锁\"></a>悲观锁 vs 乐观锁</h4><p><strong>对比悲观锁与乐观锁</strong></p>\n<ul>\n<li><p>悲观锁的代表是 synchronized 和 Lock 锁</p>\n<ul>\n<li>其核心思想是【线程只有占有了锁，才能去操作共享变量，每次只有一个线程占锁成功，获取锁失败的线程，都得停下来等待】</li>\n<li>线程从运行到阻塞、再从阻塞到唤醒，涉及线程上下文切换，如果频繁发生，影响性能</li>\n<li>实际上，线程在获取 synchronized 和 Lock 锁时，如果锁已被占用，都会做几次重试操作，减少阻塞的机会</li>\n</ul>\n</li>\n<li><p>乐观锁的代表是 AtomicInteger，使用 cas 来保证原子性</p>\n<ul>\n<li>其核心思想是【无需加锁，每次只有一个线程能成功修改共享变量，其它失败的线程不需要停止，不断重试直至成功】</li>\n<li>由于线程一直运行，不需要阻塞，因此不涉及线程上下文切换</li>\n<li>它需要多核 cpu 支持，且线程数不应超过 cpu 核数</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h4><p><strong>作用</strong></p>\n<ul>\n<li>ThreadLocal 可以实现【资源对象】的线程隔离，让每个线程各用各的【资源对象】，避免争用引发的线程安全问题</li>\n<li>ThreadLocal 同时实现了线程内的资源共享</li>\n</ul>\n<p><strong>原理</strong></p>\n<p>每个线程内有一个 ThreadLocalMap 类型的成员变量，用来存储资源对象</p>\n<ul>\n<li>调用 set 方法，就是以 ThreadLocal 自己作为 key，资源对象作为 value，放入当前线程的 ThreadLocalMap 集合中</li>\n<li>调用 get 方法，就是以 ThreadLocal 自己作为 key，到当前线程中查找关联的资源值</li>\n<li>调用 remove 方法，就是以 ThreadLocal 自己作为 key，移除当前线程关联的资源值</li>\n</ul>\n<p>ThreadLocalMap 的一些特点</p>\n<ul>\n<li>key 的 hash 值统一分配</li>\n<li>初始容量 16，扩容因子 2&#x2F;3，扩容容量翻倍</li>\n<li>key 索引冲突后用<strong>开放寻址法</strong>解决冲突</li>\n</ul>\n<p><strong>弱引用 key</strong></p>\n<p>ThreadLocalMap 中的 key 被设计为弱引用，原因如下</p>\n<ul>\n<li>Thread 可能需要长时间运行（如线程池中的线程），如果 key 不再使用，需要在内存不足（GC）时释放其占用的内存</li>\n</ul>\n<p><strong>内存释放时机</strong></p>\n<ul>\n<li>被动 GC 释放 key<ul>\n<li>仅是让 key 的内存释放，关联 value 的内存并不会释放</li>\n</ul>\n</li>\n<li>懒惰被动释放 value<ul>\n<li>get key 时，发现是 null key，则释放其 value 内存</li>\n<li>set key 时，会使用启发式扫描，清除临近的 null key 的 value 内存，启发次数与元素个数，是否发现 null key 有关</li>\n</ul>\n</li>\n<li>主动 remove 释放 key，value<ul>\n<li>会同时释放 key，value 的内存，也会清除临近的 null key 的 value 内存</li>\n<li>推荐使用它，因为一般使用 ThreadLocal 时都把它作为静态变量（即强引用），因此无法被动依靠 GC 回收</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Monitor概念\"><a href=\"#Monitor概念\" class=\"headerlink\" title=\"Monitor概念\"></a>Monitor概念</h3><h4 id=\"Java对象头\"><a href=\"#Java对象头\" class=\"headerlink\" title=\"Java对象头\"></a>Java对象头</h4><p>普通对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">Object</span> <span class=\"token class-name\">Header</span> <span class=\"token punctuation\">(</span><span class=\"token number\">64</span> bits<span class=\"token punctuation\">)</span>                                      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">Mark</span> <span class=\"token class-name\">Word</span> <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> bits<span class=\"token punctuation\">)</span>                <span class=\"token operator\">|</span> <span class=\"token class-name\">Klass</span> <span class=\"token class-name\">Word</span> <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> bits<span class=\"token punctuation\">)</span>    <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">|</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>数组对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">Object</span> <span class=\"token class-name\">Header</span> <span class=\"token punctuation\">(</span><span class=\"token number\">96</span> bits<span class=\"token punctuation\">)</span>                                                         <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">Mark</span> <span class=\"token class-name\">Word</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span>bits<span class=\"token punctuation\">)</span>              <span class=\"token operator\">|</span> <span class=\"token class-name\">Klass</span> <span class=\"token class-name\">Word</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span>bits<span class=\"token punctuation\">)</span>    <span class=\"token operator\">|</span> array <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span>bits<span class=\"token punctuation\">)</span>   <span class=\"token operator\">|</span> \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中 Mark Word 结构为</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">Mark</span> <span class=\"token class-name\">Word</span> <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> bits<span class=\"token punctuation\">)</span> \t\t\t\t                    <span class=\"token operator\">|</span>       <span class=\"token class-name\">State</span>        <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> hashcode<span class=\"token operator\">:</span><span class=\"token number\">25</span>              <span class=\"token operator\">|</span> age<span class=\"token operator\">:</span><span class=\"token number\">4</span> <span class=\"token operator\">|</span> biased_lock<span class=\"token operator\">:</span><span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token number\">01</span> <span class=\"token operator\">|</span>       <span class=\"token class-name\">Normal</span>       <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> thread<span class=\"token operator\">:</span><span class=\"token number\">23</span>      <span class=\"token operator\">|</span> epoch<span class=\"token operator\">:</span><span class=\"token number\">2</span> <span class=\"token operator\">|</span> age<span class=\"token operator\">:</span><span class=\"token number\">4</span> <span class=\"token operator\">|</span> biased_lock<span class=\"token operator\">:</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">01</span> <span class=\"token operator\">|</span>       <span class=\"token class-name\">Biased</span>       <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> ptr_to_lock_record<span class=\"token operator\">:</span><span class=\"token number\">30</span> \t                       <span class=\"token operator\">|</span> <span class=\"token number\">00</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Lightweight</span> <span class=\"token class-name\">Locked</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> ptr_to_heavyweight_monitor<span class=\"token operator\">:</span><span class=\"token number\">30</span>                    <span class=\"token operator\">|</span> <span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Heavyweight</span> <span class=\"token class-name\">Locked</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                                  <span class=\"token operator\">|</span> <span class=\"token number\">11</span> <span class=\"token operator\">|</span>     <span class=\"token class-name\">Marked</span> <span class=\"token keyword\">for</span> <span class=\"token constant\">GC</span>  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">|</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>64 位虚拟机 Mark Word</p>\n","text":"进程与线程进程程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。 进程就...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[],"tags":[{"name":"JUC","slug":"JUC","count":1,"path":"api/tags/JUC.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">进程与线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">进程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">线程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%B9%B6%E5%8F%91\"><span class=\"toc-text\">并行与并发</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">Java线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%92%8C%E8%BF%90%E8%A1%8C%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">创建和运行线程</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%82%E5%AF%9F%E5%A4%9A%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%97%B6%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">观察多个线程同时运行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">查看进程线程的方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Park-amp-Unpark\"><span class=\"toc-text\">Park &amp; Unpark</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#wait-x2F-notify\"><span class=\"toc-text\">wait &#x2F; notify</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">主线程与守护线程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B1%82%E9%9D%A2%E7%9A%84%E4%BA%94%E7%A7%8D%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">操作系统层面的五种状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-API-%E5%B1%82%E9%9D%A2%E7%9A%84%E5%85%AD%E7%A7%8D%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">Java API 层面的六种状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">共享模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%92%E6%96%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">互斥的解决方案</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lock-vs-synchronized\"><span class=\"toc-text\">lock vs synchronized</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90\"><span class=\"toc-text\">变量的线程安全分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%B1%BB\"><span class=\"toc-text\">常见线程安全类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#volatile\"><span class=\"toc-text\">volatile</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%82%B2%E8%A7%82%E9%94%81-vs-%E4%B9%90%E8%A7%82%E9%94%81\"><span class=\"toc-text\">悲观锁 vs 乐观锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ThreadLocal\"><span class=\"toc-text\">ThreadLocal</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Monitor%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">Monitor概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Java%E5%AF%B9%E8%B1%A1%E5%A4%B4\"><span class=\"toc-text\">Java对象头</span></a></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"接口优化技巧","uid":"a4984df6ed448f92b70760ecd7f1272b","slug":"接口优化技巧","date":"2023-06-10T06:32:07.000Z","updated":"2023-06-10T15:19:21.407Z","comments":true,"path":"api/articles/接口优化技巧.json","keywords":null,"cover":[],"text":"接口优化的通用方案 1.批处理批量思想：批量操作数据库，这个很好理解，我们在循环插入场景的接口中，可以在批处理执行完成后一次性插入或更新数据库，避免多次 IO。 //for循环单笔入库 list.stream().forEatch(msg->&#123; insert(); &#...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"优化","slug":"优化","count":1,"path":"api/tags/优化.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"微服务-基础","uid":"cbf42b2f3cbb0eee5de5bbaaf2ed03ea","slug":"微服务-基础","date":"2023-06-09T08:53:51.000Z","updated":"2023-06-10T15:55:32.177Z","comments":true,"path":"api/articles/微服务-基础.json","keywords":null,"cover":[],"text":"Nacos配置管理Nacos除了可以做注册中心，同样可以做配置管理来使用。 统一配置管理当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。 Nacos一方面可以将配置集中管理，另...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[],"tags":[],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
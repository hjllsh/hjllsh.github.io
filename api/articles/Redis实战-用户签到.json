{"title":"Redis实战-用户签到_UV统计","uid":"37c665cf8e0e08ae6a11b540ba094729","slug":"Redis实战-用户签到","date":"2023-06-06T02:48:05.000Z","updated":"2023-06-14T14:24:13.759Z","comments":true,"path":"api/articles/Redis实战-用户签到.json","keywords":null,"cover":[],"content":"<h2 id=\"用户签到\"><a href=\"#用户签到\" class=\"headerlink\" title=\"用户签到\"></a>用户签到</h2><h4 id=\"用户签到-BitMap功能演示\"><a href=\"#用户签到-BitMap功能演示\" class=\"headerlink\" title=\"用户签到-BitMap功能演示\"></a>用户签到-BitMap功能演示</h4><p>我们针对签到功能完全可以通过mysql来完成，比如说以下这张表</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653823145495.png\" alt=\"1653823145495\"></p>\n<p>用户一次签到，就是一条记录，假如有1000万用户，平均每人每年签到次数为10次，则这张表一年的数据量为 1亿条</p>\n<p>每签到一次需要使用（8 + 8 + 1 + 1 + 3 + 1）共22 字节的内存，一个月则最多需要600多字节</p>\n<p>我们如何能够简化一点呢？其实可以考虑小时候一个挺常见的方案，就是小时候，咱们准备一张小小的卡片，你只要签到就打上一个勾，我最后判断你是否签到，其实只需要到小卡片上看一看就知道了</p>\n<p>我们可以采用类似这样的方案来实现我们的签到需求。</p>\n<p>我们按月来统计用户签到信息，签到记录为1，未签到则记录为0.</p>\n<p>把每一个bit位对应当月的每一天，形成了映射关系。用0和1标示业务状态，这种思路就称为位图（BitMap）。这样我们就用极小的空间，来实现了大量数据的表示</p>\n<p>Redis中是利用string类型数据结构实现BitMap，因此最大上限是512M，转换为bit则是 2^32个bit位。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653824498278.png\" alt=\"1653824498278\"></p>\n<p>BitMap的操作命令有：</p>\n<ul>\n<li>SETBIT：向指定位置（offset）存入一个0或1</li>\n<li>GETBIT ：获取指定位置（offset）的bit值</li>\n<li>BITCOUNT ：统计BitMap中值为1的bit位的数量</li>\n<li>BITFIELD ：操作（查询、修改、自增）BitMap中bit数组中的指定位置（offset）的值</li>\n<li>BITFIELD_RO ：获取BitMap中bit数组，并以十进制形式返回</li>\n<li>BITOP ：将多个BitMap的结果做位运算（与 、或、异或）</li>\n<li>BITPOS ：查找bit数组中指定范围内第一个0或1出现的位置</li>\n</ul>\n<h4 id=\"用户签到-实现签到功能\"><a href=\"#用户签到-实现签到功能\" class=\"headerlink\" title=\"用户签到-实现签到功能\"></a>用户签到-实现签到功能</h4><p>需求：实现签到接口，将当前用户当天签到信息保存到Redis中</p>\n<p>思路：我们可以把年和月作为bitMap的key，然后保存到一个bitMap中，每次签到就到对应的位上把数字从0变成1，只要对应是1，就表明说明这一天已经签到了，反之则没有签到。</p>\n<p>我们通过接口文档发现，此接口并没有传递任何的参数，没有参数怎么确实是哪一天签到呢？这个很容易，可以通过后台代码直接获取即可，然后到对应的地址上去修改bitMap。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653833970361.png\" alt=\"1653833970361\"></p>\n<p><strong>代码</strong></p>\n<p>UserController</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sign\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>UserServiceImpl</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.获取当前登录用户</span>\n    <span class=\"token class-name\">Long</span> userId <span class=\"token operator\">=</span> <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.获取日期</span>\n    <span class=\"token class-name\">LocalDateTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.拼接key</span>\n    <span class=\"token class-name\">String</span> keySuffix <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":yyyyMM\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token constant\">USER_SIGN_KEY</span> <span class=\"token operator\">+</span> userId <span class=\"token operator\">+</span> keySuffix<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4.获取今天是本月的第几天</span>\n    <span class=\"token keyword\">int</span> dayOfMonth <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 5.写入Redis SETBIT key offset 1</span>\n    stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setBit</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> dayOfMonth <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"用户签到-签到统计\"><a href=\"#用户签到-签到统计\" class=\"headerlink\" title=\"用户签到-签到统计\"></a>用户签到-签到统计</h4><p><strong>问题1：</strong>什么叫做连续签到天数？<br>从最后一次签到开始向前统计，直到遇到第一次未签到为止，计算总的签到次数，就是连续签到天数。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653834455899.png\" alt=\"1653834455899\"></p>\n<p>Java逻辑代码：获得当前这个月的最后一次签到数据，定义一个计数器，然后不停的向前统计，直到获得第一个非0的数字即可，每得到一个非0的数字计数器+1，直到遍历完所有的数据，就可以获得当前月的签到总天数了</p>\n<p><strong>问题2：</strong>如何得到本月到今天为止的所有签到数据？</p>\n<p>  BITFIELD key GET u[dayOfMonth] 0</p>\n<p>假设今天是10号，那么我们就可以从当前月的第一天开始，获得到当前这一天的位数，是10号，那么就是10位，去拿这段时间的数据，就能拿到所有的数据了，那么这10天里边签到了多少次呢？统计有多少个1即可。</p>\n<p><strong>问题3：如何从后向前遍历每个bit位？</strong></p>\n<p>注意：bitMap返回的数据是10进制，假如说返回一个数字8，那么我哪儿知道到底哪些是0，哪些是1呢？我们只需要让得到的10进制数字和1做与运算就可以了，因为1只有遇见1 才是1，其他数字都是0 ，我们把签到结果和1进行与操作，每与一次，就把签到结果向右移动一位，依次内推，我们就能完成逐个遍历的效果了。</p>\n<p>需求：实现下面接口，统计当前用户截止当前时间在本月的连续签到天数</p>\n<p>有用户有时间我们就可以组织出对应的key，此时就能找到这个用户截止这天的所有签到记录，再根据这套算法，就能统计出来他连续签到的次数了</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653835784444.png\" alt=\"1653835784444\"></p>\n<p>代码</p>\n<p><strong>UserController</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sign/count\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">signCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">signCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>UserServiceImpl</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">signCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.获取当前登录用户</span>\n    <span class=\"token class-name\">Long</span> userId <span class=\"token operator\">=</span> <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.获取日期</span>\n    <span class=\"token class-name\">LocalDateTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.拼接key</span>\n    <span class=\"token class-name\">String</span> keySuffix <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":yyyyMM\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token constant\">USER_SIGN_KEY</span> <span class=\"token operator\">+</span> userId <span class=\"token operator\">+</span> keySuffix<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4.获取今天是本月的第几天</span>\n    <span class=\"token keyword\">int</span> dayOfMonth <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 5.获取本月截止今天为止的所有的签到记录，返回的是一个十进制的数字 BITFIELD sign:5:202203 GET u14 0</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bitField</span><span class=\"token punctuation\">(</span>\n            key<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">BitFieldSubCommands</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BitFieldSubCommands<span class=\"token punctuation\">.</span>BitFieldType</span><span class=\"token punctuation\">.</span><span class=\"token function\">unsigned</span><span class=\"token punctuation\">(</span>dayOfMonth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 没有任何签到结果</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">Long</span> num <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 6.循环遍历</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 6.1.让这个数字与1做与运算，得到数字的最后一个bit位  // 判断这个bit位是否为0</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果为0，说明未签到，结束</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果不为0，说明已签到，计数器+1</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 把数字右移一位，抛弃最后一个bit位，继续下一个bit位</span>\n        num <span class=\"token operator\">>>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"关于使用bitmap来解决缓存穿透的方案\"><a href=\"#关于使用bitmap来解决缓存穿透的方案\" class=\"headerlink\" title=\"关于使用bitmap来解决缓存穿透的方案\"></a>关于使用bitmap来解决缓存穿透的方案</h4><p>回顾<strong>缓存穿透</strong>：</p>\n<p>发起了一个数据库不存在的，redis里边也不存在的数据，通常你可以把他看成一个攻击</p>\n<p>解决方案：</p>\n<ul>\n<li><p>判断id&lt;0</p>\n</li>\n<li><p>如果数据库是空，那么就可以直接往redis里边把这个空数据缓存起来</p>\n</li>\n</ul>\n<p>第一种解决方案：遇到的问题是如果用户访问的是id不存在的数据，则此时就无法生效</p>\n<p>第二种解决方案：遇到的问题是：如果是不同的id那就可以防止下次过来直击数据</p>\n<p>所以我们如何解决呢？</p>\n<p>我们可以将数据库的数据，所对应的id写入到一个list集合中，当用户过来访问的时候，我们直接去判断list中是否包含当前的要查询的数据，如果说用户要查询的id数据并不在list集合中，则直接返回，如果list中包含对应查询的id数据，则说明不是一次缓存穿透数据，则直接放行。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653836416586.png\" alt=\"1653836416586\"></p>\n<p>现在的问题是这个主键其实并没有那么短，而是很长的一个 主键</p>\n<p>哪怕你单独去提取这个主键，但是在11年左右，淘宝的商品总量就已经超过10亿个</p>\n<p>所以如果采用以上方案，这个list也会很大，所以我们可以使用bitmap来减少list的存储空间</p>\n<p>我们可以把list数据抽象成一个非常大的bitmap，我们不再使用list，而是将db中的id数据利用哈希思想，比如：</p>\n<p>id % bitmap.size  &#x3D; 算出当前这个id对应应该落在bitmap的哪个索引上，然后将这个值从0变成1，然后当用户来查询数据时，此时已经没有了list，让用户用他查询的id去用相同的哈希算法， 算出来当前这个id应当落在bitmap的哪一位，然后判断这一位是0，还是1，如果是0则表明这一位上的数据一定不存在，  采用这种方式来处理，需要重点考虑一个事情，就是误差率，所谓的误差率就是指当发生哈希冲突的时候，产生的误差。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653836578970.png\" alt=\"1653836578970\"></p>\n<h2 id=\"UV统计\"><a href=\"#UV统计\" class=\"headerlink\" title=\"UV统计\"></a>UV统计</h2><h3 id=\"UV统计-HyperLogLog\"><a href=\"#UV统计-HyperLogLog\" class=\"headerlink\" title=\"UV统计-HyperLogLog\"></a>UV统计-HyperLogLog</h3><p>首先我们搞懂两个概念：</p>\n<ul>\n<li>UV：全称Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1天内同一个用户多次访问该网站，只记录1次。</li>\n<li>PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录1次PV，用户多次打开页面，则记录多次PV。往往用来衡量网站的流量。</li>\n</ul>\n<p>通常来说UV会比PV大很多，所以衡量同一个网站的访问量，我们需要综合考虑很多因素，所以我们只是单纯的把这两个值作为一个参考值</p>\n<p>UV统计在服务端做会比较麻烦，因为要判断该用户是否已经统计过了，需要将统计过的用户信息保存。但是如果每个访问的用户都保存到Redis中，数据量会非常恐怖，那怎么处理呢？</p>\n<p>Hyperloglog(HLL)是从Loglog算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。相关算法原理大家可以参考：<a href=\"https://juejin.cn/post/6844903785744056333#heading-0\">https://juejin.cn/post/6844903785744056333#heading-0</a><br>Redis中的HLL是基于string结构实现的，单个HLL的内存<strong>永远小于16kb</strong>，<strong>内存占用低</strong>的令人发指！作为代价，其测量结果是概率性的，<strong>有小于0.81％的误差</strong>。不过对于UV统计来说，这完全可以忽略。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653837988985.png\" alt=\"1653837988985\"></p>\n<h3 id=\"12-2-UV统计-测试百万数据的统计\"><a href=\"#12-2-UV统计-测试百万数据的统计\" class=\"headerlink\" title=\"12.2 UV统计-测试百万数据的统计\"></a>12.2 UV统计-测试百万数据的统计</h3><p>测试思路：我们直接利用单元测试，向HyperLogLog中添加100万条数据，看看内存占用和统计效果如何</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653838053608.png\" alt=\"1653838053608\"></p>\n<p>经过测试：我们会发生他的误差是在允许范围内，并且内存占用极小</p>\n","text":"用户签到用户签到-BitMap功能演示我们针对签到功能完全可以通过mysql来完成，比如说以下这张表 用户一次签到，就是一条记录，假如有1000万用户，平均每人每年签到次数为10次，则这张表一年的数据量为 1亿条 每签到一次需要使用（8 + 8 + 1 + 1 + 3 + 1）共...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":14,"path":"api/tags/redis.json"},{"name":"Redis实战","slug":"Redis实战","count":10,"path":"api/tags/Redis实战.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E7%AD%BE%E5%88%B0\"><span class=\"toc-text\">用户签到</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E7%AD%BE%E5%88%B0-BitMap%E5%8A%9F%E8%83%BD%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">用户签到-BitMap功能演示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E7%AD%BE%E5%88%B0-%E5%AE%9E%E7%8E%B0%E7%AD%BE%E5%88%B0%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">用户签到-实现签到功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E7%AD%BE%E5%88%B0-%E7%AD%BE%E5%88%B0%E7%BB%9F%E8%AE%A1\"><span class=\"toc-text\">用户签到-签到统计</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8bitmap%E6%9D%A5%E8%A7%A3%E5%86%B3%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E7%9A%84%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">关于使用bitmap来解决缓存穿透的方案</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UV%E7%BB%9F%E8%AE%A1\"><span class=\"toc-text\">UV统计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UV%E7%BB%9F%E8%AE%A1-HyperLogLog\"><span class=\"toc-text\">UV统计-HyperLogLog</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-2-UV%E7%BB%9F%E8%AE%A1-%E6%B5%8B%E8%AF%95%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%9F%E8%AE%A1\"><span class=\"toc-text\">12.2 UV统计-测试百万数据的统计</span></a></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java集合高频考点","uid":"19e0c7830137ba378427a6cdcb7fc021","slug":"Java集合高频考点","date":"2023-06-06T04:20:49.000Z","updated":"2023-06-07T11:08:27.946Z","comments":true,"path":"api/articles/Java集合高频考点.json","keywords":null,"cover":[],"text":"1. 常见的集合有哪些？Java集合类主要由两个根接口Collection和Map派生出来的，Collection派生出了三个子接口：List、Set、Queue（Java5新增的队列），因此Java集合大致也可分成List、Set、Queue、Map四种接口体系。 注意：Col...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"20 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":28,"path":"api/tags/Java.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"Redis实战-附近商户","uid":"9da38b0fade8e3816513eac32a87f012","slug":"Redis实战-附近商户","date":"2023-06-06T02:39:30.000Z","updated":"2023-06-14T14:22:52.939Z","comments":true,"path":"api/articles/Redis实战-附近商户.json","keywords":null,"cover":[],"text":"附近商户附近商户-GEO数据结构的基本用法GEO就是Geolocation的简写形式，代表地理坐标。Redis在3.2版本中加入了对GEO的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令有： GEOADD：添加一个地理空间信息，包含：经度（longitude...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":14,"path":"api/tags/redis.json"},{"name":"Redis实战","slug":"Redis实战","count":10,"path":"api/tags/Redis实战.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
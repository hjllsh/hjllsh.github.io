{"title":"适配器模式","uid":"a8b2eb4f810dce05fcecb16e8edfd126","slug":"适配器模式","date":"2023-05-09T08:09:59.000Z","updated":"2023-05-09T09:08:48.890Z","comments":true,"path":"api/articles/适配器模式.json","keywords":null,"cover":null,"content":"<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><p><strong>适配器模式（Adapter Pattern）</strong>是一种结构型设计模式，它用于将一个类的接口转换成客户端所期望的另一种接口，从而使原本不兼容的接口能够协同工作。在适配器模式中，适配器充当了两个不兼容接口之间的桥梁，它负责允许这些接口间能够相互协作。</p>\n<p>在Java中，适配器模式常用于将不兼容的接口进行转换，通常包含以下三个角色：</p>\n<ul>\n<li>Target（目标抽象类）：客户端所期望的接口，定义客户端所需的操作。</li>\n<li>Adapter（适配器类）：适配器，将Adaptee转换成Target所期望的接口。它维护了一个指向Adaptee对象的引用，并实现Target接口，使得客户端能够通过Adapter来访问Adaptee对象。</li>\n<li>Adaptee（原本的类）：需要被适配的类，包含原本的方法或接口。</li>\n</ul>\n<h6 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h6><p>我们模拟了一个旧版的Android手机（OldAndroidPhone）和一个新版的iOS手机（NewiPhone），它们分别有不同的音乐播放器接口，而我们需要使用一个适配器（MusicPlayerAdapter）来兼容它们的操作：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//原有音乐播放接口 </span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MusicPlayer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">playMP3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//旧版Android手机</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OldAndroidPhone</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MusicPlayer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">playMP3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Old Android phone is playing MP3 file: \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//新版iPhone手机 </span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">NewiPhonePlayer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">playAAC</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NewiPhone</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NewiPhonePlayer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">playAAC</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"New iPhone is playing AAC file: \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//适配器，将旧版手机的操作适配成新版手机可以使用的形式</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MusicPlayerAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NewiPhonePlayer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MusicPlayer</span> player<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MusicPlayerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MusicPlayer</span> player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>player <span class=\"token operator\">=</span> player<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//适配器将AAC文件转化为MP3文件，并调用原有的播放方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">playAAC</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> mp3File <span class=\"token operator\">=</span> <span class=\"token function\">convertAACtoMP3</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        player<span class=\"token punctuation\">.</span><span class=\"token function\">playMP3</span><span class=\"token punctuation\">(</span>mp3File<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">convertAACtoMP3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Converting AAC to MP3: \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> fileName<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".aac\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".mp3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//客户端使用例子</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//旧版Android手机播放MP3</span>\n        <span class=\"token class-name\">MusicPlayer</span> oldPhone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OldAndroidPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oldPhone<span class=\"token punctuation\">.</span><span class=\"token function\">playMP3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"old_phone_music.mp3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">//新版iPhone手机播放AAC，使用适配器兼容播放MP3文件</span>\n        <span class=\"token class-name\">NewiPhonePlayer</span> newPhone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NewiPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MusicPlayerAdapter</span> adapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MusicPlayerAdapter</span><span class=\"token punctuation\">(</span>oldPhone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newPhone<span class=\"token punctuation\">.</span><span class=\"token function\">playAAC</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new_phone_music.aac\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        adapter<span class=\"token punctuation\">.</span><span class=\"token function\">playAAC</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new_phone_music.aac\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的代码中，我们首先定义了两个已有的音乐播放器接口 MusicPlayer 和 NewiPhonePlayer，它们分别被 OldAndroidPhone 和 NewiPhone 实现。然后，我们使用 MusicPlayerAdapter 类将 OldAndroidPhone 类的 playMP3 方法适配成 NewiPhonePlayer 接口的 playAAC 方法，通过这个适配器，新版 iPhone 手机可以兼容旧版 Android 手机的音乐播放功能。在客户端使用时，我们分别调用了 OldAndroidPhone 的 playMP3 方法（旧版 Android 手机）和 NewiPhonePlayer 的 playAAC 方法（新版 iPhone 手机，使用 MusicPlayerAdapter 适配器）。</p>\n<p>我们可以看出适配器模式的优点：</p>\n<ul>\n<li>可以让原有的接口和新接口之间不发生冲突地协同工作，从而让代码更好地拓展和维护。</li>\n</ul>\n","text":"适配器模式适配器模式（Adapter Pattern）是一种结构型设计模式，它用于将一个类的接口转换成客户端所期望的另一种接口，从而使原本不兼容的接口能够协同工作。在适配器模式中，适配器充当了两个不兼容接口之间的桥梁，它负责允许这些接口间能够相互协作。 在Java中，适配器模式常...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":14,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":12,"path":"api/tags/设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">适配器模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"组合模式","uid":"890198f3e29403fa2d961081f54ed8cd","slug":"组合模式","date":"2023-05-09T10:42:25.000Z","updated":"2023-05-09T11:00:22.048Z","comments":true,"path":"api/articles/组合模式.json","keywords":null,"cover":null,"text":"组合模式组合模式 主要通过将对象组合成树形结构来表示“整体-部分”的关系，让客户端能够以一致的方式对待单个对象和对象合。 下面是一个简单的例子import java.util.ArrayList; import java.util.List; public interface E...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":14,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":12,"path":"api/tags/设计模式.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"工厂模式","uid":"3dbdc722104d94fc07273118e255f7fd","slug":"工厂模式","date":"2023-05-09T05:19:32.000Z","updated":"2023-05-09T07:00:21.428Z","comments":true,"path":"api/articles/工厂模式.json","keywords":null,"cover":[],"text":"工厂模式简单⼯⼚模式指由⼀个⼯⼚对象来创建实例，客户端不需要关注创建逻辑，只需提供传⼊⼯⼚的参数 简单工厂UML类图 适⽤于⼯⼚类负责创建对象较少的情况，缺点是如果要增加新产品，就需 要修改⼯⼚类的判断逻辑，违背开闭原则，且产品多的话会使⼯⼚类⽐较 复杂。 简单工厂的例子: Ca...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":14,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":12,"path":"api/tags/设计模式.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
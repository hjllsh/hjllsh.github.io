{"title":"代理的创建时机","uid":"a685b627e4865e5f328e43bd436e0d9e","slug":"代理的创建时机","date":"2023-05-11T12:55:58.000Z","updated":"2023-05-11T13:36:21.626Z","comments":true,"path":"api/articles/代理的创建时机.json","keywords":null,"cover":null,"content":"<h2 id=\"代理的创建时机\"><a href=\"#代理的创建时机\" class=\"headerlink\" title=\"代理的创建时机\"></a>代理的创建时机</h2><p><strong>代理的创建时机</strong></p>\n<p>创建 -&gt; ( * ) 依赖注入 -&gt; 初始化 ( * )</p>\n<ul>\n<li><p>初始化之后 (无循环依赖时)</p>\n</li>\n<li><p>实例创建后, 依赖注入前 (有循环依赖时), 并暂存于二级缓存</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A17_1</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">GenericApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationClassPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建 -> (*) 依赖注入 -> 初始化 (*)</span>\n        <span class=\"token comment\">/*\n            学到了什么\n                a. 代理的创建时机\n                    1. 初始化之后 (无循环依赖时)\n                    2. 实例创建后, 依赖注入前 (有循环依赖时), 并暂存于二级缓存\n                b. 依赖注入与初始化不应该被增强, 仍应被施加于原始对象\n         */</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Configuration</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Bean</span> <span class=\"token comment\">// 解析 @Aspect、产生代理</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">AnnotationAwareAspectJAutoProxyCreator</span> <span class=\"token function\">annotationAwareAspectJAutoProxyCreator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationAwareAspectJAutoProxyCreator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token annotation punctuation\">@Bean</span> <span class=\"token comment\">// 解析 @Autowired</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">AutowiredAnnotationBeanPostProcessor</span> <span class=\"token function\">autowiredAnnotationBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AutowiredAnnotationBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token annotation punctuation\">@Bean</span> <span class=\"token comment\">// 解析 @PostConstruct</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">CommonAnnotationBeanPostProcessor</span> <span class=\"token function\">commonAnnotationBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonAnnotationBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Advisor</span> <span class=\"token function\">advisor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodInterceptor</span> advice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">AspectJExpressionPointcut</span> pointcut <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AspectJExpressionPointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pointcut<span class=\"token punctuation\">.</span><span class=\"token function\">setExpression</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* foo())\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultPointcutAdvisor</span><span class=\"token punctuation\">(</span>pointcut<span class=\"token punctuation\">,</span> advice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">MethodInterceptor</span> <span class=\"token function\">advice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodInvocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean1</span> <span class=\"token function\">bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean2</span> <span class=\"token function\">bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean1</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bean1()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">/*\n        @Autowired \n        public void setBean2(Bean2 bean2) &#123;\n            System.out.println(\"Bean1 setBean2(bean2) class is: \" + bean2.getClass());\n        &#125;*/</span>\n        <span class=\"token annotation punctuation\">@PostConstruct</span> \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bean1 init()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean2</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bean2()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token annotation punctuation\">@Autowired</span> \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBean1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean1</span> bean1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bean2 setBean1(bean1) class is: \"</span> <span class=\"token operator\">+</span> bean1<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token annotation punctuation\">@PostConstruct</span> \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bean2 init()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上例子是一个单向的依赖，Bean2的创建依赖Bean1。代理的创建时机为类的初始化之后</p>\n<h6 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">&gt;&gt;&gt;&gt;创建Bean1\nBean1()\n&gt;&gt;&gt;&gt;完成初始化\nBean1 init()\n&gt;&gt;&gt;&gt;为bean1创建代理\n[TRACE] 21:09:48.069 [main] o.s.a.a.a.AnnotationAwareAspectJAutoProxyCreator - Creating implicit proxy for bean &#39;bean1&#39; with 0 common interceptors and 2 specific interceptors \n&gt;&gt;&gt;&gt;创建Bean2\nBean2()\n&gt;&gt;&gt;&gt;完成Bean1属性的的依赖注入，注入的是代理\nBean2 setBean1(bean1) class is: class \norg.springframework.aop.framework.autoproxy.A17_1$Bean1$$EnhancerBySpringCGLIB$$2c2cbac1\n&gt;&gt;&gt;&gt;完成初始化\nBean2 init()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改Bean1的代码，让Bean1，Bean2存在循环依赖</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean1</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bean1()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token annotation punctuation\">@Autowired</span> \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBean2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean2</span> bean2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bean1 setBean2(bean2) class is: \"</span> <span class=\"token operator\">+</span> bean2<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token annotation punctuation\">@PostConstruct</span> \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bean1 init()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"运行结果如下：\"><a href=\"#运行结果如下：\" class=\"headerlink\" title=\"运行结果如下：\"></a>运行结果如下：</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">>>></span>创建<span class=\"token class-name\">Bean1</span>，<span class=\"token class-name\">Spring</span>的放入三级缓存，发现需要依赖<span class=\"token class-name\">Bean2</span>，查找缓存没有<span class=\"token class-name\">Bean2</span>，就创建<span class=\"token class-name\">Bean2</span>\n<span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>>></span>创建<span class=\"token class-name\">Bean2</span>，<span class=\"token class-name\">Spring</span>的放入三级缓存<span class=\"token punctuation\">,</span>需要<span class=\"token class-name\">Bean1</span>，查找缓存有<span class=\"token class-name\">Bean1</span>\n<span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>>></span>创建<span class=\"token class-name\">Bean1</span>的代理\n<span class=\"token punctuation\">[</span><span class=\"token constant\">TRACE</span><span class=\"token punctuation\">]</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">16</span><span class=\"token operator\">:</span><span class=\"token number\">39.601</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">o<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span></span>AnnotationAwareAspectJAutoProxyCreator</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Creating</span> implicit proxy <span class=\"token keyword\">for</span> bean <span class=\"token char\">'bean1'</span> <span class=\"token keyword\">with</span> <span class=\"token number\">0</span> common interceptors and <span class=\"token number\">2</span> specific interceptors \n<span class=\"token operator\">>>></span><span class=\"token operator\">></span>注入代理对象\n<span class=\"token class-name\">Bean2</span> <span class=\"token function\">setBean1</span><span class=\"token punctuation\">(</span>bean1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">class</span> is<span class=\"token operator\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>autoproxy<span class=\"token punctuation\">.</span></span>A17_1</span>$<span class=\"token class-name\">Bean1</span>$$<span class=\"token class-name\">EnhancerBySpringCGLIB</span>$$c459ff85\n<span class=\"token operator\">>>></span><span class=\"token operator\">></span>完成初始化\n<span class=\"token class-name\">Bean2</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>>></span><span class=\"token operator\">></span>注入<span class=\"token class-name\">Bean2</span>的代理\n<span class=\"token class-name\">Bean1</span> <span class=\"token function\">setBean2</span><span class=\"token punctuation\">(</span>bean2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">class</span> is<span class=\"token operator\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>autoproxy<span class=\"token punctuation\">.</span></span>A17_1</span>$<span class=\"token class-name\">Bean2</span>\n<span class=\"token operator\">>>></span><span class=\"token operator\">></span>完成初始化\n<span class=\"token class-name\">Bean1</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>循环依赖时，代理的创建时机被提前到依赖注入之前</p>\n<p>依赖注入（set方法）与初始化（初始化方法）不应该被增强, 仍用原始对象的set和初始化方法</p>\n<div style = \"text-align: center\"><代理对象的创建时机></div>\n\n","text":"代理的创建时机代理的创建时机 创建 -&gt; ( * ) 依赖注入 -&gt; 初始化 ( * ) 初始化之后 (无循环依赖时) 实例创建后, 依赖注入前 (有循环依赖时), 并暂存于二级缓存 public class A17_1 &#123; public static vo...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":25,"path":"api/tags/Java.json"},{"name":"Spring","slug":"Spring","count":10,"path":"api/tags/Spring.json"},{"name":"Proxy","slug":"Proxy","count":2,"path":"api/tags/Proxy.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%90%86%E7%9A%84%E5%88%9B%E5%BB%BA%E6%97%B6%E6%9C%BA\"><span class=\"toc-text\">代理的创建时机</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">输出结果</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">运行结果如下：</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Spring如何解决循环依赖","uid":"2846594611fd32071ec8e1a72cd8f17d","slug":"Spring如何解决循环依赖","date":"2023-05-11T13:26:38.000Z","updated":"2023-05-13T09:55:27.202Z","comments":true,"path":"api/articles/Spring如何解决循环依赖.json","keywords":null,"cover":[],"text":"Spring如何解决循环依赖解决Set循环依赖注入Spring一级缓存singletonObjects singletonObjects是一级缓存，用于存储单例Bean的实例对象。也就是说，当Spring容器创建一个单例Bean时，会将该Bean的实例对象放入一级缓存中，在后续使...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":25,"path":"api/tags/Java.json"},{"name":"Spring","slug":"Spring","count":10,"path":"api/tags/Spring.json"},{"name":"面试题","slug":"面试题","count":5,"path":"api/tags/面试题.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"从@Aspect到Advisor","uid":"a95318a81b0b3097ed11bab255c7390f","slug":"从@Aspect到Advisor","date":"2023-05-11T12:04:08.000Z","updated":"2023-05-11T13:38:30.919Z","comments":true,"path":"api/articles/从@Aspect到Advisor.json","keywords":null,"cover":null,"text":"@Aspect—&gt;&gt;AdvisorAnnotationAwareAspectJAutoProxyCreator AnnotationAwareAspectJAutoProxyCreator的作用是将高级切面转换成低级切面，使其能够被Spring框架所识别和使用。具体来...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[],"tags":[],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
{"title":"状态模式","uid":"b886b366f3cb34006709f66f49ec6b62","slug":"状态模式","date":"2023-05-15T10:11:38.000Z","updated":"2023-05-15T11:53:16.531Z","comments":true,"path":"api/articles/状态模式.json","keywords":null,"cover":null,"content":"<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h2><p>它将对象的行为与其内部状态分离开来，使得对象可以根据其内部状态的变化而改变其行为。状态模式通过将状态的切换封装在状态类中，使得状态转换具有可扩展性和灵活性，并避免了由于状态转换所带来的“if-else”嵌套过多的问题。</p>\n<p>状态模式的基本机制是将状态抽象为一个接口或者抽象类，每个具体状态类都实现该接口或者抽象类，并且在具体状态类中实现其对应的行为。在状态模式中，对象的状态切换是通过改变对象持有的状态实例来实现的。当对象需要状态转换时，它会委托当前状态实例处理状态转换，从而使得对象的行为和状态相互解耦，具有更好的可扩展性和灵活性。</p>\n<p>状态模式符合“单一职责原则”和“开闭原则”两个软件设计原则。其中，“单一职责原则”指一个类只负责一个职责，状态模式将状态抽象为一个独立的类，使得每个状态类只负责处理一个状态，从而使得每个类都具有单一的职责；“开闭原则”指对扩展开放，对修改关闭，状态模式通过增加新的状态类来扩展状态转换过程，而不需要修改原有的代码，从而符合“开闭原则”。</p>\n<p>状态模式存在三个角色：</p>\n<ol>\n<li>环境（Context）角色：它定义了客户端所感兴趣的接口，通常包含一个状态实例并维护一个指向具体状态对象的引用。这个上下文类可以处理请求并将其委托给当前状态对象。</li>\n<li>抽象状态（State）角色：它把所有具体状态类的共同点抽象出来，定义了这些共同点对应的接口或抽象类，并在其中定义了该状态下对象的行为。</li>\n<li>具体状态（Concrete State）角色：它实现了抽象状态的接口或抽象类，并且定义了在该状态下对象的行为。</li>\n</ol>\n<p>假设我们要设计一个电灯类，电灯可以处于3个不同的状态：</p>\n<p>关闭状态、开启状态和闪烁状态。电灯类的代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Light</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">State</span> state<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Light</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OffState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        state<span class=\"token punctuation\">.</span><span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">turnOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        state<span class=\"token punctuation\">.</span><span class=\"token function\">turnOff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">blink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        state<span class=\"token punctuation\">.</span><span class=\"token function\">blink</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这里，我们将电灯的状态抽象成了接口State，然后定义了3个具体的状态类：OffState、OnState和BlinkState，这3个类实现了State接口。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Light</span> light<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">turnOff</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Light</span> light<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">blink</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Light</span> light<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OffState</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Light</span> light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电灯开启\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        light<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OnState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">turnOff</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Light</span> light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电灯已经关闭，不能再关闭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">blink</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Light</span> light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电灯未开启，不能闪烁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OnState</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Light</span> light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电灯已经开启，不需要再开启\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">turnOff</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Light</span> light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电灯关闭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        light<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OffState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">blink</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Light</span> light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电灯开始闪烁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        light<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BlinkState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlinkState</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Light</span> light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电灯已经开启，不需要再开启\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">turnOff</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Light</span> light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电灯关闭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        light<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OffState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">blink</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Light</span> light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电灯停止闪烁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        light<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OnState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在电灯类中，引入了一个State类型的变量state，表示当前电灯处于哪种状态。当电灯需要改变状态时，它会调用state的对应方法，然后将state设为新的状态。例如，当电灯需要开启时，它将调用OnState的turnOn方法，并将state设为OnState实例。</p>\n<p>下面是一个应用电灯类的例子：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Light</span> light <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Light</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    light<span class=\"token punctuation\">.</span><span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 电灯开启</span>\n    light<span class=\"token punctuation\">.</span><span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 电灯已经开启，不需要再开启</span>\n    light<span class=\"token punctuation\">.</span><span class=\"token function\">blink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 电灯开始闪烁</span>\n    light<span class=\"token punctuation\">.</span><span class=\"token function\">turnOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 电灯关闭</span>\n    light<span class=\"token punctuation\">.</span><span class=\"token function\">blink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 电灯未开启，不能闪烁</span>\n    light<span class=\"token punctuation\">.</span><span class=\"token function\">turnOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 电灯已经关闭，不能再关闭</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这个例子中，我们首先创建了一个电灯实例light，然后通过调用它的turnOn、blink和turnOff方法，改变了它的状态，并输出了相应的信息。</p>\n<p>这个例子可以帮助我们理解状态模式的基本用法和原理，同时也能让我们感受到状态模式所提供的可扩展性和灵活性。当需要新增或修改状态时，我们只需要添加或修改相应的状态类，而不需要修改电灯类的代码，从而大大降低了代码的耦合度和维护成本。</p>\n","feature":true,"text":"状态模式它将对象的行为与其内部状态分离开来，使得对象可以根据其内部状态的变化而改变其行为。状态模式通过将状态的切换封装在状态类中，使得状态转换具有可扩展性和灵活性，并避免了由于状态转换所带来的“if-else”嵌套过多的问题。 状态模式的基本机制是将状态抽象为一个接口或者抽象类，...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":25,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":17,"path":"api/tags/设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">状态模式</span></a></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MySQL_DCL_函数","uid":"8f9e88b96addebc57d8b075bdae2d985","slug":"MySQL-DCL-函数","date":"2023-05-16T08:56:15.000Z","updated":"2023-05-16T13:39:52.755Z","comments":true,"path":"api/articles/MySQL-DCL-函数.json","keywords":null,"cover":[],"text":"DCLData Control Language(数据控制语言)，用来管理数据库用户、控制数据库的访问权限。 管理用户查询用户 select * from mysql.user; 其中 Host代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":5,"path":"api/tags/MySQL.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"迭代器模式","uid":"ab4a664e2e3638cd67bb057e6ee644aa","slug":"迭代器模式","date":"2023-05-15T09:44:26.000Z","updated":"2023-05-15T10:07:39.257Z","comments":true,"path":"api/articles/迭代器模式.json","keywords":null,"cover":null,"text":"迭代器模式它提供一种方便的方式来访问并遍历集合对象的元素，而无需暴露集合的内部表示。该模式将遍历集合的过程与集合的实现分离开来，使得可以在不影响客户端代码的情况下更改集合的内部实现。 迭代器模式包括以下几个元素： 1.迭代器接口（Iterator）：定义了用于访问和遍历集合元素的...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":25,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":17,"path":"api/tags/设计模式.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
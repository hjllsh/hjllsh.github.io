{"title":"接口优化技巧","uid":"a4984df6ed448f92b70760ecd7f1272b","slug":"接口优化技巧","date":"2023-06-10T06:32:07.000Z","updated":"2023-06-10T15:19:21.407Z","comments":true,"path":"api/articles/接口优化技巧.json","keywords":null,"cover":[],"content":"<h2 id=\"接口优化的通用方案\"><a href=\"#接口优化的通用方案\" class=\"headerlink\" title=\"接口优化的通用方案\"></a>接口优化的通用方案</h2><p><img src=\"/../assets/images/%E6%8E%A5%E5%8F%A3%E4%BC%98%E5%8C%9601.png\" alt=\"图片\"></p>\n<h3 id=\"1-批处理\"><a href=\"#1-批处理\" class=\"headerlink\" title=\"1.批处理\"></a>1.批处理</h3><p>批量思想：批量操作数据库，这个很好理解，我们在循环插入场景的接口中，可以在批处理执行完成后一次性插入或更新数据库，避免多次 IO。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//for循环单笔入库</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEatch</span><span class=\"token punctuation\">(</span>msg<span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//批量入库</span>\n<span class=\"token function\">batchInsert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-异步处理\"><a href=\"#2-异步处理\" class=\"headerlink\" title=\"2. 异步处理\"></a>2. 异步处理</h3><p>异步思想：针对耗时比较长且不是结果必须的逻辑，我们可以考虑放到异步执行，这样能降低接口耗时。</p>\n<p>例如一个理财的申购接口，<strong>入账</strong>和<strong>写入申购文件</strong>是同步执行的，因为是 T+1 交易，后面这两个逻辑其实不是结果必须的，我们并不需要关注它的实时结果，所以我们考虑把<strong>入账</strong>和<strong>写入申购文件</strong>改为异步处理。</p>\n<p>至于异步的实现方式，可以用线程池，也可以用消息队列，还可以用一些调度任务框架。</p>\n<h3 id=\"3-空间换时间\"><a href=\"#3-空间换时间\" class=\"headerlink\" title=\"3.空间换时间\"></a>3.空间换时间</h3><p>一个很好理解的<strong>空间换时间</strong>的例子是合理使用缓存，针对一些频繁使用且不频繁变更的数据，可以提前缓存起来，需要时直接查缓存，避免频繁地查询数据库或者重复计算。</p>\n<p>需要注意的事，这里用了合理二字，因为空间换时间也是一把双刃剑，需要综合考虑你的使用场景，毕竟缓存带来的数据一致性问题也挺令人头疼。</p>\n<p>这里的缓存可以是 R2M，也可以是本地缓存、memcached，或者 Map。</p>\n<h3 id=\"4-预处理\"><a href=\"#4-预处理\" class=\"headerlink\" title=\"4. 预处理\"></a><strong>4. 预处理</strong></h3><p>也就是预取思想，就是提前要把查询的数据，提前计算好，放入缓存或者表中的某个字段，用的时候会大幅提高接口性能。跟上面那个例子很像，但是关注点不同。</p>\n<p>举个简单的例子：理财产品，会有根据净值计算年化收益率的数据展示需求，利用净值去套用年化收益率计算公式计算的逻辑我们可以采用预处理，这样每一次接口调用直接取对应字段就可以了。</p>\n<h3 id=\"5-池化思想\"><a href=\"#5-池化思想\" class=\"headerlink\" title=\"5. 池化思想\"></a>5. 池化思想</h3><p>我们都用过数据库连接池，线程池等，这就是池思想的体现，它们解决的问题就是避免重复创建对象或创建连接，可以重复利用，避免不必要的损耗，毕竟创建销毁也会占用时间。</p>\n<p>池化思想包含但并不局限于以上两种，总的来说池化思想的本质是<strong>预分配与循环使用，</strong>明白这个原理后，我们即使是在做一些业务场景的需求时，也可以利用起来。</p>\n<p>比如：对象池</p>\n<h3 id=\"6-串行改并行\"><a href=\"#6-串行改并行\" class=\"headerlink\" title=\"6. 串行改并行\"></a>6. 串行改并行</h3><p>串行就是，当前执行逻辑必须等上一个执行逻辑结束之后才执行，并行就是两个执行逻辑互不干扰，所以并行相对来说就比较节省时间，当然是建立在没有结果参数依赖的前提下。</p>\n<p>比如，理财的持仓信息展示接口，我们既需要查询用户的账户信息，也需要查询商品信息和 banner 位信息等等来渲染持仓页，如果是串行，基本上接口耗时就是累加的。如果是并行，接口耗时将大大降低。</p>\n<h3 id=\"7-索引\"><a href=\"#7-索引\" class=\"headerlink\" title=\"7. 索引\"></a><strong>7. 索引</strong></h3><p>加索引能大大提高数据查询效率，这个在接口设计之出也会考虑到，这里不再多赘述，随着需求的迭代，我们重点整理一下索引不生效的一些场景，希望对小伙伴们有所帮助。</p>\n<p>具体不生效场景不再一一举例，后面有时间的话，单独整理一下。</p>\n<p><img src=\"/../assets/images/%E6%8E%A5%E5%8F%A3%E4%BC%98%E5%8C%9602.png\" alt=\"图片\"></p>\n<h3 id=\"8-避免大事务\"><a href=\"#8-避免大事务\" class=\"headerlink\" title=\"8. 避免大事务\"></a><strong>8. 避免大事务</strong></h3><p>所谓大事务问题，就是<strong>运行时间较长的事务，</strong>由于事务一致不提交，会导致数据库连接被占用，影响到别的请求访问数据库，影响别的接口性能。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span><span class=\"token string\">\"taskTransactionManager\"</span><span class=\"token punctuation\">,</span> propagation <span class=\"token operator\">=</span><span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">,</span> isolation <span class=\"token operator\">=</span><span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">READ_COMMITTED</span><span class=\"token punctuation\">,</span> rollbackFor <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">publicBasicResultpurchaseRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PurchaseRecordrecord</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">BasicResult</span> result <span class=\"token operator\">=</span><span class=\"token function\">newBasicResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//插入账户任务</span>\n        taskMapper<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ManagerParamUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildTask</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">,</span><span class=\"token class-name\">TaskEnum<span class=\"token punctuation\">.</span>Task_type</span><span class=\"token punctuation\">.</span>pension_account<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TaskEnum<span class=\"token punctuation\">.</span>Account_bizType</span><span class=\"token punctuation\">.</span>purchase_request<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//插入同步任务</span>\n        taskMapper<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ManagerParamUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildTask</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">,</span><span class=\"token class-name\">TaskEnum<span class=\"token punctuation\">.</span>Task_type</span><span class=\"token punctuation\">.</span>pension_sync<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TaskEnum<span class=\"token punctuation\">.</span>Sync_bizType</span><span class=\"token punctuation\">.</span>purchase<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//插入影像件上传任务</span>\n        taskMapper<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ManagerParamUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildTask</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">,</span><span class=\"token class-name\">TaskEnum<span class=\"token punctuation\">.</span>Task_type</span><span class=\"token punctuation\">.</span>pension_sync<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TaskEnum<span class=\"token punctuation\">.</span>Sync_bizType</span><span class=\"token punctuation\">.</span>cert<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">setInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultInfoEnum</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面这块代码主要是申购申请完成后，执行一系列的后续操作，如果现在新增申购完成后，发送 push 通知用户的需求。很有可能我们会在后面直接追加，如下图所示：事务中嵌套 RPC 调用，即非 DB 操作，这些非 DB 操作如果耗时较大的话，可能会出现大事务问题。大数据引发的问题主要有：死锁、接口超时、主从延迟等。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span><span class=\"token string\">\"taskTransactionManager\"</span><span class=\"token punctuation\">,</span> propagation <span class=\"token operator\">=</span><span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">,</span> isolation <span class=\"token operator\">=</span><span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">READ_COMMITTED</span><span class=\"token punctuation\">,</span> rollbackFor <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BasicResult</span> <span class=\"token function\">purchaseRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PurchaseRecord</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">BasicResult</span> result <span class=\"token operator\">=</span><span class=\"token function\">newBasicResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        pushRpc<span class=\"token punctuation\">.</span><span class=\"token function\">doPush</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">setInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultInfoEnum</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以为避免大事务问题，我们可以通过以下方案规避：</p>\n<p>1，RPC 调用不放到事务里面</p>\n<p>2，查询操作尽量放到事务之外</p>\n<p>3，事务中避免处理太多数据</p>\n<h3 id=\"9-优化程序结构\"><a href=\"#9-优化程序结构\" class=\"headerlink\" title=\"9. 优化程序结构\"></a>9. 优化程序结构</h3><p>程序结构问题一般出现在多次需求迭代后，代码叠加形成。会造成一些重复查询、多次创建对象等耗时问题。在多人维护一个项目时比较多见。解决起来也比较简单，我们需要针对接口整体做重构，评估每个代码块的作用和用途，调整执行顺序。</p>\n<h3 id=\"10-深分页问题\"><a href=\"#10-深分页问题\" class=\"headerlink\" title=\"10. 深分页问题\"></a>10. 深分页问题</h3><p>深分页问题比较常见，分页我们一般最先想到的就是 limit ，为什么会慢，我们可以看下这个 SQL：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select*from purchase_record where productCode &#x3D;&#39;PA9044&#39;and status&#x3D;4 order by orderTime desc limit 100000,200<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>limit 100000,200 意味着会扫描 100200 行，然后返回 200 行，丢弃掉前 100000 行。所以执行速度很慢。一般可以采用标签记录法来优化，比如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select * from purchase_record where productCode &#x3D;&#39;PA9044&#39;and status&#x3D;4 and id &gt;100000 limit 200<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样优化的好处是命中了<strong>主键索引</strong>，无论多少页，性能都还不错，但是局限性是需要一个连<strong>续自增的字段</strong></p>\n<h3 id=\"11-锁粒度避免过粗\"><a href=\"#11-锁粒度避免过粗\" class=\"headerlink\" title=\"11. 锁粒度避免过粗\"></a>11. 锁粒度避免过粗</h3><p>锁一般是为了在高并发场景下保护共享资源采用的一种手段，但是如果锁的粒度太粗，会很影响接口性能。</p>\n<p>关于锁粒度：就是你要锁的范围有多大，不管是 synchronized 还是 redis 分布式锁，只需要在临界资源处加锁即可，不涉及共享资源的，不必要加锁。</p>\n","text":"接口优化的通用方案 1.批处理批量思想：批量操作数据库，这个很好理解，我们在循环插入场景的接口中，可以在批处理执行完成后一次性插入或更新数据库，避免多次 IO。 //for循环单笔入库 list.stream().forEatch(msg->&#123; insert(); &#...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"优化","slug":"优化","count":1,"path":"api/tags/优化.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E4%BC%98%E5%8C%96%E7%9A%84%E9%80%9A%E7%94%A8%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">接口优化的通用方案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%89%B9%E5%A4%84%E7%90%86\"><span class=\"toc-text\">1.批处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86\"><span class=\"toc-text\">2. 异步处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%A9%BA%E9%97%B4%E6%8D%A2%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">3.空间换时间</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%A2%84%E5%A4%84%E7%90%86\"><span class=\"toc-text\">4. 预处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%B1%A0%E5%8C%96%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">5. 池化思想</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E4%B8%B2%E8%A1%8C%E6%94%B9%E5%B9%B6%E8%A1%8C\"><span class=\"toc-text\">6. 串行改并行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">7. 索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E9%81%BF%E5%85%8D%E5%A4%A7%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">8. 避免大事务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E4%BC%98%E5%8C%96%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">9. 优化程序结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E6%B7%B1%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">10. 深分页问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E9%94%81%E7%B2%92%E5%BA%A6%E9%81%BF%E5%85%8D%E8%BF%87%E7%B2%97\"><span class=\"toc-text\">11. 锁粒度避免过粗</span></a></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lambda表达式","uid":"32a652994e7e566383677d79f35d7c59","slug":"Lambda表达式","date":"2023-06-10T07:21:11.000Z","updated":"2023-06-10T15:16:34.349Z","comments":true,"path":"api/articles/Lambda表达式.json","keywords":null,"cover":[],"text":"函数式编程思想函数式编程思想类似于我们数学中的函数，它主要关注的是对数据进行了什么操作。 优点： 代码简洁，开发快速 接近自然语言，易于理解 易于“并发编程” Lambda表达式Lambda是JDK8中一个语法糖，它可以对某些匿名内部类的写法进行简化。它是函数式编程思想的一个重要...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":28,"path":"api/tags/Java.json"},{"name":"Lambda","slug":"Lambda","count":1,"path":"api/tags/Lambda.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"进程与线程","uid":"89180d8ad200729090513c1ce4f6ad31","slug":"进程与线程","date":"2023-06-09T12:37:40.000Z","updated":"2023-06-14T14:27:21.010Z","comments":true,"path":"api/articles/进程与线程.json","keywords":null,"cover":[],"text":"进程与线程进程程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。 进程就...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"JUC","slug":"JUC","count":1,"path":"api/tags/JUC.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
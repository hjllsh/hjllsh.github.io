{"title":"Redis实战-Redission分布式锁","uid":"b241352e87f784e0f5d32e5898f90895","slug":"Redis实战-Redission分布式锁","date":"2023-06-04T14:29:14.000Z","updated":"2023-06-14T14:22:32.062Z","comments":true,"path":"api/articles/Redis实战-Redission分布式锁.json","keywords":null,"cover":[],"content":"<h2 id=\"分布式锁-redission\"><a href=\"#分布式锁-redission\" class=\"headerlink\" title=\"分布式锁-redission\"></a>分布式锁-redission</h2><h3 id=\"分布式锁-redission的功能\"><a href=\"#分布式锁-redission的功能\" class=\"headerlink\" title=\"分布式锁-redission的功能\"></a>分布式锁-redission的功能</h3><p>基于setnx实现的分布式锁存在下面的问题：</p>\n<p><strong>重入问题</strong>：重入问题是指 获得锁的线程可以再次进入到相同的锁的代码块中，可重入锁的意义在于<strong>防止死锁</strong></p>\n<p><strong>不可重试</strong>：是指目前的分布式只能尝试一次，合理的情况是：当线程在获得锁失败后，他应该能再次尝试获得锁。</p>\n<p><strong>超时释放：</strong>我们在加锁时增加了过期时间，这样的我们可以防止死锁，但是如果卡顿的时间超长，虽然我们采用了lua表达式防止删锁的时候，误删别人的锁，但是毕竟存在没有锁住，有安全隐患</p>\n<p><strong>主从一致性：</strong> 如果Redis提供了主从集群，当我们向集群写数据时，主机需要异步的将数据同步给从机，而万一在同步过去之前，主机宕机了，就会出现死锁问题。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653546070602.png\" alt=\"1653546070602\"></p>\n<p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。</p>\n<p>Redission提供了分布式锁的多种多样的功能</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653546736063.png\" alt=\"1653546736063\"></p>\n<h3 id=\"分布式锁-redission可重入锁原理\"><a href=\"#分布式锁-redission可重入锁原理\" class=\"headerlink\" title=\"分布式锁-redission可重入锁原理\"></a>分布式锁-redission可重入锁原理</h3><p>​\t\t参考jdk ReentrantLock原理（可重入锁） ：当判断这个锁已经有人的情况下，再判断获取锁的是不是自己，使用一个记录器count记录重入的次数，基于redis实现简单的可重入锁。</p>\n<p><img src=\"/../assets/images/redis%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81.png\"></p>\n<p>获取锁的Lua脚本（保证操作的原子性）</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">\n\n<span class=\"token keyword\">local</span> key <span class=\"token operator\">=</span> KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">--锁的key</span>\n\n<span class=\"token keyword\">local</span> threadId <span class=\"token operator\">=</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">--线程唯一标识</span>\n\n<span class=\"token keyword\">local</span> releaseTime <span class=\"token operator\">=</span> ARVG<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">--锁的自动释放时间</span>\n\n<span class=\"token comment\">--判断锁是否存在</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exists'</span><span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n\n<span class=\"token comment\">--不存在，获取锁</span>\n\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hset'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">--设置有效时间</span>\n\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expire'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> releaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">--放回结果</span>\n\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span>\n\n锁已存在，判断threadId是否是自己\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hexists'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n\n<span class=\"token comment\">--是自己，获取锁，重入次数+1</span>\n\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hincrby'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">--设置有效期</span>\n\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expire'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> releaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">--返回结果</span>\n\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">--代码走到这说明获取的锁不是自己的，获取锁失败</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>释放锁的Lua脚本</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> key <span class=\"token operator\">=</span> KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">local</span> threadId <span class=\"token operator\">=</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">local</span> releaseTime <span class=\"token operator\">=</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">--判断是否是自己的锁</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hexists'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n\n<span class=\"token comment\">--</span>\n\n不是自己的锁，直接返回\n\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">--是自己的锁，则锁重入次数 -1；</span>\n\n<span class=\"token keyword\">local</span> count <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hincrby'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">--判断锁的重入次数是否为0</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">then</span>\n\n<span class=\"token comment\">--不为0，重置过期时间</span>\n\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expire'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> releaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">else</span>\n\n<span class=\"token comment\">--为0则删除锁</span>\n\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'del'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在Lock锁中，他是借助于底层的一个voaltile的一个state变量来记录重入的状态的，比如当前没有人持有这把锁，那么state&#x3D;0，假如有人持有这把锁，那么state&#x3D;1，如果持有这把锁的人再次持有这把锁，那么state就会+1 ，如果是对于synchronized而言，他在c语言代码中会有一个count，原理和state类似，也是重入一次就加一，释放一次就-1 ，直到减少成0 时，表示当前这把锁没有被人持有。  </p>\n<p>在分布式锁中，采用hash结构用来存储锁，其中大key表示这把锁是否存在，用小key表示当前这把锁被哪个线程持有，所以接下来我们一起分析一下当前的这个lua表达式</p>\n<p>这个地方一共有3个参数</p>\n<p><strong>KEYS[1] ： 锁名称</strong></p>\n<p><strong>ARGV[1]：  锁失效时间</strong></p>\n<p><strong>ARGV[2]：  id + “:” + threadId; \t锁的小key</strong></p>\n<p>exists: 判断数据是否存在  name是lock,如果&#x3D;&#x3D;0，就表示当前这把锁不存在</p>\n<p>redis.call(‘hset’, KEYS[1], ARGV[2], 1);此时他就开始往redis里边去写数据 ，写成一个hash结构</p>\n<p>Lock{</p>\n<p>​    id + <strong>“:”</strong> + threadId :  1</p>\n<p>}</p>\n<p>如果当前这把锁存在，则第一个条件不满足，再判断</p>\n<p>redis.call(‘hexists’, KEYS[1], ARGV[2]) &#x3D;&#x3D; 1</p>\n<p>此时需要通过大key+小key判断当前这把锁是否是属于自己的，如果是自己的，则进行</p>\n<p>redis.call(‘hincrby’, KEYS[1], ARGV[2], 1)</p>\n<p>将当前这个锁的value进行+1 ，redis.call(‘pexpire’, KEYS[1], ARGV[1]); 然后再对其设置过期时间，如果以上两个条件都不满足，则表示当前这把锁抢锁失败，最后返回pttl，即为当前这把锁的失效时间</p>\n<p><strong>redission实现可重入锁：</strong></p>\n<p>trylock()</p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230304162313291.png\" alt=\"image-20230304162313291\"></p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230304170039946.png\" alt=\"image-20230304170039946\"></p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230304170121988.png\" alt=\"image-20230304170121988\"></p>\n<p>tryAcquire()</p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230304162339143.png\" alt=\"image-20230304162339143\"></p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230304171854024.png\" alt=\"image-20230304171854024\"></p>\n<p>获取锁</p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230304134223508.png\" alt=\"image-20230304134223508\"></p>\n<p>释放锁</p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230304134301404.png\" alt=\"image-20230304134301404\"></p>\n<p>获取锁成功返回nil，获取锁失败返回锁的pttl(毫秒)剩余有效期</p>\n<p>RFuture接收：因为函数tryLockInnerAsync是一个异步函数：函数执行完，只代表命令发出去了。</p>\n<p>tryAcquire阻塞并等待tryAcquireAsync返回的剩余有效期</p>\n<p>redisson解决锁重试问题：获取尝试最大等待时间；获取当前时间；获取线程id；尝试获取（返回null代表获取锁成功，返回有效期代表获取锁失败）判断是否是null,是null返回true，表示获取锁成功。否则就用最大尝试等待时间-（当前时间-获取锁操作的时间） 然后判断如果time是小于等于0，表示已经超过尝试最大等待时间，返回false表示获取所失败。如果大于0，再次获取当前时间，准备进行下一次尝试（！不是马上尝试，因为其他线程获取锁，要执行操作，立马尝试失败的概率很大）：先订阅别人释放锁的信号（unLockInnerAsync释放锁的时候，“redis.call(‘publish’, KEYS[2], ARGV[1]);”会发布通知。</p>\n<p>下一次尝试的结果也是不确定的,所以用RFutre接收，具体等待时间为剩余的尝试最大等待时间，如果超时则取消订阅，返回false,获取锁失败；如果在未超过尝试最大等待时间，获取了别人发布的释放锁的信号，又一次计算剩余的尝试最大等待时间，依然有剩余的话，才是真正的尝试获取锁。如果再次获取锁失败并且剩余最大尝试等待时间还大于0，会再次准备进行下一轮尝试（两次尝试的不同：第二次尝试会使用信号量的方式getLatch()获取，第二轮尝试会在while(true)内进行。</p>\n<p>Reddisson解决锁超时：tryAcquireAsync传入的参数中，未设置过期时间时，会开启一个固定的时间（看门狗时间：30秒）不停的更新有效期</p>\n<p>优点：精确的时间计算，不是盲目的等待，不会无故的占用cpu</p>\n<h3 id=\"分布式锁-redission锁重试和WatchDog机制\"><a href=\"#分布式锁-redission锁重试和WatchDog机制\" class=\"headerlink\" title=\"分布式锁-redission锁重试和WatchDog机制\"></a>分布式锁-redission锁重试和WatchDog机制</h3><p>抢锁过程中，获得当前线程，通过tryAcquire进行抢锁，该抢锁逻辑和之前逻辑相同</p>\n<p>1、先判断当前这把锁是否存在，如果不存在，插入一把锁，返回null</p>\n<p>2、判断当前这把锁是否是属于当前线程，如果是，则返回null</p>\n<p>所以如果返回是null，则代表着当前已经抢锁完毕，或者可重入完毕，但是如果以上两个条件都不满足，则进入到第三个条件，返回的是锁的失效时间，你能发现有个while( true) 再次进行tryAcquire进行抢锁</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> threadId <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Long</span> ttl <span class=\"token operator\">=</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// lock acquired</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ttl <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来会有一个条件分支，因为lock方法有重载方法，一个是带参数，一个是不带参数，如果带参数传入的值是-1，则leaseTime是他本身，所以如果传入了其他参数，此时leaseTime !&#x3D; -1 则会进去抢锁，抢锁的逻辑就是之前说的那三个逻辑</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">tryLockInnerAsync</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedisCommands</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EVAL_LONG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果是没有传入时间，则此时也会进行抢锁， 而且抢锁时间是默认看门狗时间 commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout()</p>\n<p>ttlRemainingFuture.onComplete((ttlRemaining, e) 这句话相当于对以上抢锁进行了监听，也就是说当上边抢锁完毕后，此方法会被调用，具体调用的逻辑就是去后台开启一个线程，进行续约逻辑，也就是看门狗线程</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> ttlRemainingFuture <span class=\"token operator\">=</span> <span class=\"token function\">tryLockInnerAsync</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span>\n                                        commandExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCfg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLockWatchdogTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedisCommands</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EVAL_LONG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nttlRemainingFuture<span class=\"token punctuation\">.</span><span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ttlRemaining<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// lock acquired</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ttlRemaining <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> ttlRemainingFuture<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此逻辑就是续约逻辑，注意看commandExecutor.getConnectionManager().newTimeout（） 此方法</p>\n<p>Method(  <strong>new</strong> TimerTask() {},参数2 ，参数3  )</p>\n<p>指的是：通过参数2，参数3 去描述什么时候去做参数1的事情，现在的情况是：10s之后去做参数一的事情</p>\n<p>因为锁的失效时间是30s，当10s之后，此时这个timeTask 就触发了，他就去进行续约，把当前这把锁续约成30s，如果操作成功，那么此时就会递归调用自己，再重新设置一个timeTask()，于是再过10s后又再设置一个timerTask，完成不停的续约</p>\n<p>那么大家可以想一想，假设我们的线程出现了宕机他还会续约吗？当然不会，因为没有人再去调用renewExpiration这个方法，所以等到时间之后自然就释放了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">renewExpiration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ExpirationEntry</span> ee <span class=\"token operator\">=</span> <span class=\"token constant\">EXPIRATION_RENEWAL_MAP</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEntryName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ee <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token class-name\">Timeout</span> task <span class=\"token operator\">=</span> commandExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TimerTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Timeout</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ExpirationEntry</span> ent <span class=\"token operator\">=</span> <span class=\"token constant\">EXPIRATION_RENEWAL_MAP</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEntryName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">Long</span> threadId <span class=\"token operator\">=</span> ent<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadId <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            \n            <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> future <span class=\"token operator\">=</span> <span class=\"token function\">renewExpirationAsync</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            future<span class=\"token punctuation\">.</span><span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't update lock \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" expiration\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                \n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// reschedule itself</span>\n                    <span class=\"token function\">renewExpiration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> internalLockLeaseTime <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    ee<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"redission锁的MutiLock-联锁-原理\"><a href=\"#redission锁的MutiLock-联锁-原理\" class=\"headerlink\" title=\"redission锁的MutiLock(联锁)原理\"></a>redission锁的MutiLock(联锁)原理</h3><p>为了提高redis的可用性，我们会搭建集群或者主从，现在以主从为例</p>\n<p>此时我们去写命令，写在主机上， 主机会将数据同步给从机，但是假设在主机还没有来得及把数据写入到从机去的时候，此时主机宕机，哨兵会发现主机宕机，并且选举一个slave变成master，而此时新的master中实际上并没有锁信息，此时锁信息就已经丢掉了。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653553998403.png\" alt=\"1653553998403\"></p>\n<p>为了解决这个问题，redission提出来了MutiLock锁，使用这把锁咱们就不使用主从了，每个节点的地位都是一样的， 这把锁加锁的逻辑需要写入到每一个主丛节点上，只有所有的服务器都写入成功，此时才是加锁成功，假设现在某个节点挂了，那么他去获得锁的时候，只要有一个节点拿不到，都不能算是加锁成功，就保证了加锁的可靠性。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653554055048.png\" alt=\"1653554055048\"></p>\n<p>MutiLock 加锁原理</p>\n<p>当我们去设置了多个锁时，redission会将多个锁添加到一个集合中，然后用while循环去不停去尝试拿锁，但是会有一个总共的加锁时间，这个时间是用需要加锁的个数 * 1500ms ，假设有3个锁，那么时间就是4500ms，假设在这4500ms内，所有的锁都加锁成功， 那么此时才算是加锁成功，如果在4500ms有线程加锁失败，则会再次去进行重试。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653553093967.png\" alt=\"1653553093967\"></p>\n<h2 id=\"秒杀优化\"><a href=\"#秒杀优化\" class=\"headerlink\" title=\"秒杀优化\"></a>秒杀优化</h2><h3 id=\"秒杀优化-异步秒杀思路\"><a href=\"#秒杀优化-异步秒杀思路\" class=\"headerlink\" title=\"秒杀优化-异步秒杀思路\"></a>秒杀优化-异步秒杀思路</h3><p>当用户发起请求，此时会请求nginx，nginx会访问到tomcat，而tomcat中的程序，会进行串行操作，分成如下几个步骤</p>\n<p>1、查询优惠卷</p>\n<p>2、判断秒杀库存是否足够</p>\n<p>3、查询订单</p>\n<p>4、校验是否是一人一单</p>\n<p>5、扣减库存</p>\n<p>6、创建订单</p>\n<p>在这六步操作中，又有很多操作是要去操作数据库的，而且还是一个线程串行执行， 这样就会导致我们的程序执行的很慢，所以需要异步程序执行。</p>\n<p>可以使用异步吗？比如，我们可不可以使用异步编排来做，或者说我开启N多线程，N多个线程，一个线程执行查询优惠卷，一个执行判断扣减库存，一个去创建订单等等，然后再统一做返回。</p>\n<p>如果你采用异步的方式，如果访问的人很多，那么线程池中的线程可能一下子就被消耗完了，而且你使用异步方案，最大的特点在于，你觉得时效性会非常重要，但是你想想是吗？并不是，比如我只要确定他能做这件事，然后我后边慢慢做就可以了，我并不需要他一口气做完这件事，所以我们不应当采用异步。使用类似消息队列的方式来完成我们的需求，而不是使用线程池或者是异步编排的方式来完成这个需求</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653560986599.png\" alt=\"1653560986599\"></p>\n<p>优化方案：我们将耗时比较短的逻辑判断放入到redis中，比如是否库存足够，比如是否一人一单，这样的操作，只要这种逻辑可以完成，就意味着我们是一定可以下单完成的，我们只需要进行快速的逻辑判断，根本就不用等下单逻辑走完，我们直接给用户返回成功， 再在后台开一个线程，后台线程慢慢的去执行queue里边的消息，这样程序不就超级快了吗？而且也不用担心线程池消耗殆尽的问题，因为这里我们的程序中并没有手动使用任何线程池，当然这里边有两个难点</p>\n<p>第一个难点是我们怎么在redis中去快速校验一人一单，还有库存判断</p>\n<p>第二个难点是由于我们校验和tomcat下单是两个线程，那么我们如何知道到底哪个单他最后是否成功，或者是下单完成，为了完成这件事我们在redis操作完之后，我们会将一些信息返回给前端，同时也会把这些信息丢到异步queue中去，后续操作中，可以通过这个id来查询我们tomcat中的下单逻辑是否完成了。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653561657295.png\" alt=\"1653561657295\"></p>\n<p>我们现在来看看整体思路：当用户下单之后，判断库存是否充足只需要导redis中去根据key找对应的value是否大于0即可，如果不充足，则直接结束，如果充足，继续在redis中判断用户是否可以下单，如果set集合中没有这条数据，说明他可以下单，如果set集合中没有这条记录，则将userId和优惠卷存入到redis中，并且返回0，整个过程需要保证是原子性的，我们可以使用lua来操作</p>\n<p>当以上判断逻辑走完之后，我们可以判断当前redis中返回的结果是否是0 ，如果是0，则表示可以下单，则将之前说的信息存入到到queue中去，然后返回，然后再来个线程异步的下单，前端可以通过返回的订单id来判断是否下单成功。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653562234886.png\" alt=\"1653562234886\"></p>\n<h3 id=\"秒杀优化-Redis完成秒杀资格判断\"><a href=\"#秒杀优化-Redis完成秒杀资格判断\" class=\"headerlink\" title=\"秒杀优化-Redis完成秒杀资格判断\"></a>秒杀优化-Redis完成秒杀资格判断</h3><p>需求：</p>\n<ul>\n<li><p>新增秒杀优惠券的同时，将优惠券信息保存到Redis中</p>\n</li>\n<li><p>基于Lua脚本，判断秒杀库存、一人一单，决定用户是否抢购成功</p>\n</li>\n<li><p>如果抢购成功，将优惠券id和用户id封装后存入阻塞队列</p>\n</li>\n<li><p>开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1656080546603.png\" alt=\"1656080546603\"></p>\n</li>\n</ul>\n<p>VoucherServiceImpl</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token annotation punctuation\">@Transactional</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addSeckillVoucher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Voucher</span> voucher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 保存优惠券</span>\n    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 保存秒杀信息</span>\n    <span class=\"token class-name\">SeckillVoucher</span> seckillVoucher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SeckillVoucher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    seckillVoucher<span class=\"token punctuation\">.</span><span class=\"token function\">setVoucherId</span><span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    seckillVoucher<span class=\"token punctuation\">.</span><span class=\"token function\">setStock</span><span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    seckillVoucher<span class=\"token punctuation\">.</span><span class=\"token function\">setBeginTime</span><span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getBeginTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    seckillVoucher<span class=\"token punctuation\">.</span><span class=\"token function\">setEndTime</span><span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getEndTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    seckillVoucherService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>seckillVoucher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 保存秒杀库存到Redis中</span>\n    <span class=\"token comment\">//SECKILL_STOCK_KEY 这个变量定义在RedisConstans中</span>\n    <span class=\"token comment\">//private static final String SECKILL_STOCK_KEY =\"seckill:stock:\"</span>\n    stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SECKILL_STOCK_KEY</span> <span class=\"token operator\">+</span> voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>完整lua表达式</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 1.参数列表</span>\n<span class=\"token comment\">-- 1.1.优惠券id</span>\n<span class=\"token keyword\">local</span> voucherId <span class=\"token operator\">=</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- 1.2.用户id</span>\n<span class=\"token keyword\">local</span> userId <span class=\"token operator\">=</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- 1.3.订单id</span>\n<span class=\"token keyword\">local</span> orderId <span class=\"token operator\">=</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">-- 2.数据key</span>\n<span class=\"token comment\">-- 2.1.库存key</span>\n<span class=\"token keyword\">local</span> stockKey <span class=\"token operator\">=</span> <span class=\"token string\">'seckill:stock:'</span> <span class=\"token operator\">..</span> voucherId\n<span class=\"token comment\">-- 2.2.订单key</span>\n<span class=\"token keyword\">local</span> orderKey <span class=\"token operator\">=</span> <span class=\"token string\">'seckill:order:'</span> <span class=\"token operator\">..</span> voucherId\n\n<span class=\"token comment\">-- 3.脚本业务</span>\n<span class=\"token comment\">-- 3.1.判断库存是否充足 get stockKey</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">tonumber</span><span class=\"token punctuation\">(</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> stockKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n    <span class=\"token comment\">-- 3.2.库存不足，返回1</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token comment\">-- 3.2.判断用户是否下单 SISMEMBER orderKey userId</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sismember'</span><span class=\"token punctuation\">,</span> orderKey<span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n    <span class=\"token comment\">-- 3.3.存在，说明是重复下单，返回2</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token comment\">-- 3.4.扣库存 incrby stockKey -1</span>\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'incrby'</span><span class=\"token punctuation\">,</span> stockKey<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 3.5.下单（保存用户）sadd orderKey userId</span>\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sadd'</span><span class=\"token punctuation\">,</span> orderKey<span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 3.6.发送消息到队列中， XADD stream.orders * k1 v1 k2 v2 ...</span>\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xadd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stream.orders'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'userId'</span><span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">,</span> <span class=\"token string\">'voucherId'</span><span class=\"token punctuation\">,</span> voucherId<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> orderId<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当以上lua表达式执行完毕后，剩下的就是根据步骤3,4来执行我们接下来的任务了</p>\n<p>VoucherOrderServiceImpl</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">seckillVoucher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> voucherId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//获取用户</span>\n    <span class=\"token class-name\">Long</span> userId <span class=\"token operator\">=</span> <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> orderId <span class=\"token operator\">=</span> redisIdWorker<span class=\"token punctuation\">.</span><span class=\"token function\">nextId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 1.执行lua脚本</span>\n    <span class=\"token class-name\">Long</span> result <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>\n            <span class=\"token constant\">SECKILL_SCRIPT</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            voucherId<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.判断结果是否为0</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 2.1.不为0 ，代表没有购买资格</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"库存不足\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"不能重复下单\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//TODO 保存阻塞队列</span>\n    <span class=\"token comment\">// 3.返回订单id</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"秒杀优化-基于阻塞队列实现秒杀优化\"><a href=\"#秒杀优化-基于阻塞队列实现秒杀优化\" class=\"headerlink\" title=\"秒杀优化-基于阻塞队列实现秒杀优化\"></a>秒杀优化-基于阻塞队列实现秒杀优化</h3><p>VoucherOrderServiceImpl</p>\n<p>修改下单动作，现在我们去下单时，是通过lua表达式去原子执行判断逻辑，如果判断我出来不为0 ，则要么是库存不足，要么是重复下单，返回错误信息，如果是0，则把下单的逻辑保存到队列中去，然后异步执行</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//异步处理线程池</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token constant\">SECKILL_ORDER_EXECUTOR</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//在类初始化之后执行，因为当这个类初始化好了之后，随时都是有可能要执行的</span>\n<span class=\"token annotation punctuation\">@PostConstruct</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token constant\">SECKILL_ORDER_EXECUTOR</span><span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">VoucherOrderHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 用于线程池处理的任务</span>\n<span class=\"token comment\">// 当初始化完毕后，就会去从对列中去拿信息</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VoucherOrderHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 1.获取队列中的订单信息</span>\n                    <span class=\"token class-name\">VoucherOrder</span> voucherOrder <span class=\"token operator\">=</span> orderTasks<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// 2.创建订单</span>\n                    <span class=\"token function\">handleVoucherOrder</span><span class=\"token punctuation\">(</span>voucherOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"处理订单异常\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n          \t <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n     \n       <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleVoucherOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VoucherOrder</span> voucherOrder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//1.获取用户</span>\n            <span class=\"token class-name\">Long</span> userId <span class=\"token operator\">=</span> voucherOrder<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 2.创建锁对象</span>\n            <span class=\"token class-name\">RLock</span> redisLock <span class=\"token operator\">=</span> redissonClient<span class=\"token punctuation\">.</span><span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock:order:\"</span> <span class=\"token operator\">+</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 3.尝试获取锁</span>\n            <span class=\"token keyword\">boolean</span> isLock <span class=\"token operator\">=</span> redisLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 4.判断是否获得锁成功</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 获取锁失败，直接返回失败或者重试</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不允许重复下单！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">//注意：由于是spring的事务是放在threadLocal中，此时的是多线程，事务会失效</span>\n                proxy<span class=\"token punctuation\">.</span><span class=\"token function\">createVoucherOrder</span><span class=\"token punctuation\">(</span>voucherOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 释放锁</span>\n                redisLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token comment\">//a</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">VoucherOrder</span><span class=\"token punctuation\">></span></span> orderTasks <span class=\"token operator\">=</span><span class=\"token keyword\">new</span>  <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">seckillVoucher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> voucherId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Long</span> userId <span class=\"token operator\">=</span> <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> orderId <span class=\"token operator\">=</span> redisIdWorker<span class=\"token punctuation\">.</span><span class=\"token function\">nextId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 1.执行lua脚本</span>\n        <span class=\"token class-name\">Long</span> result <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>\n                <span class=\"token constant\">SECKILL_SCRIPT</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                voucherId<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2.判断结果是否为0</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 2.1.不为0 ，代表没有购买资格</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"库存不足\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"不能重复下单\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">VoucherOrder</span> voucherOrder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VoucherOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2.3.订单id</span>\n        <span class=\"token keyword\">long</span> orderId <span class=\"token operator\">=</span> redisIdWorker<span class=\"token punctuation\">.</span><span class=\"token function\">nextId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        voucherOrder<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2.4.用户id</span>\n        voucherOrder<span class=\"token punctuation\">.</span><span class=\"token function\">setUserId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2.5.代金券id</span>\n        voucherOrder<span class=\"token punctuation\">.</span><span class=\"token function\">setVoucherId</span><span class=\"token punctuation\">(</span>voucherId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2.6.放入阻塞队列</span>\n        orderTasks<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>voucherOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//3.获取代理对象</span>\n         proxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IVoucherOrderService</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">AopContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//4.返回订单id</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n     \n      <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">public</span>  <span class=\"token keyword\">void</span> <span class=\"token function\">createVoucherOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VoucherOrder</span> voucherOrder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Long</span> userId <span class=\"token operator\">=</span> voucherOrder<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 5.1.查询订单</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"voucher_id\"</span><span class=\"token punctuation\">,</span> voucherOrder<span class=\"token punctuation\">.</span><span class=\"token function\">getVoucherId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 5.2.判断是否存在</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 用户已经购买过了</span>\n           log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户已经购买过了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 6.扣减库存</span>\n        <span class=\"token keyword\">boolean</span> success <span class=\"token operator\">=</span> seckillVoucherService<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stock = stock - 1\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// set stock = stock - 1</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"voucher_id\"</span><span class=\"token punctuation\">,</span> voucherOrder<span class=\"token punctuation\">.</span><span class=\"token function\">getVoucherId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stock\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// where id = ? and stock > 0</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 扣减失败</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"库存不足\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>voucherOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>小总结：</strong>秒杀业务的优化思路是什么？</p>\n<ul>\n<li>先利用Redis完成库存余量、一人一单判断，完成抢单业务</li>\n<li>再将下单业务放入阻塞队列，利用独立线程异步下单</li>\n<li>基于阻塞队列的异步秒杀存在哪些问题？<ul>\n<li>内存限制问题</li>\n<li>数据安全问题</li>\n</ul>\n</li>\n</ul>\n","text":"分布式锁-redission分布式锁-redission的功能基于setnx实现的分布式锁存在下面的问题： 重入问题：重入问题是指 获得锁的线程可以再次进入到相同的锁的代码块中，可重入锁的意义在于防止死锁 不可重试：是指目前的分布式只能尝试一次，合理的情况是：当线程在获得锁失败后...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":11,"path":"api/tags/redis.json"},{"name":"Redis实战","slug":"Redis实战","count":10,"path":"api/tags/Redis实战.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-redission\"><span class=\"toc-text\">分布式锁-redission</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-redission%E7%9A%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">分布式锁-redission的功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-redission%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">分布式锁-redission可重入锁原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-redission%E9%94%81%E9%87%8D%E8%AF%95%E5%92%8CWatchDog%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">分布式锁-redission锁重试和WatchDog机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#redission%E9%94%81%E7%9A%84MutiLock-%E8%81%94%E9%94%81-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">redission锁的MutiLock(联锁)原理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A7%92%E6%9D%80%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">秒杀优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A7%92%E6%9D%80%E4%BC%98%E5%8C%96-%E5%BC%82%E6%AD%A5%E7%A7%92%E6%9D%80%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">秒杀优化-异步秒杀思路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A7%92%E6%9D%80%E4%BC%98%E5%8C%96-Redis%E5%AE%8C%E6%88%90%E7%A7%92%E6%9D%80%E8%B5%84%E6%A0%BC%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">秒杀优化-Redis完成秒杀资格判断</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A7%92%E6%9D%80%E4%BC%98%E5%8C%96-%E5%9F%BA%E4%BA%8E%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E7%A7%92%E6%9D%80%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">秒杀优化-基于阻塞队列实现秒杀优化</span></a></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Redis实战-消息队列","uid":"4b50e524d6593265b35d48bd112d4791","slug":"Redis实战-消息队列","date":"2023-06-05T14:00:00.000Z","updated":"2023-06-14T14:23:58.325Z","comments":true,"path":"api/articles/Redis实战-消息队列.json","keywords":null,"cover":[],"text":"Redis消息队列认识消息队列什么是消息队列：字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色： 消息队列：存储和管理消息，也被称为消息代理（Message Broker） 生产者：发送消息到消息队列 消费者：从消息队列获取消息并处理消息 使用队列的好处在于 解耦：所...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":11,"path":"api/tags/redis.json"},{"name":"Redis实战","slug":"Redis实战","count":10,"path":"api/tags/Redis实战.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"Redis实战-分布式锁","uid":"ccca64486565a23a9fbb5012df3ad7c1","slug":"Redis实战-分布式锁","date":"2023-06-04T10:10:53.000Z","updated":"2023-06-14T14:21:44.273Z","comments":true,"path":"api/articles/Redis实战-分布式锁.json","keywords":null,"cover":[],"text":"4、分布式锁基本原理和实现方式对比分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。 分布式锁的核心思想就是让大家都使用同一把锁，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路 分布式锁应该满足以下条件： 可见性：...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":11,"path":"api/tags/redis.json"},{"name":"Redis实战","slug":"Redis实战","count":10,"path":"api/tags/Redis实战.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
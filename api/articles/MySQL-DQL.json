{"title":"MySQL_DQL","uid":"4fe76f7b940933ddf5de5f39814faa1c","slug":"MySQL-DQL","date":"2023-05-14T06:22:31.000Z","updated":"2023-05-16T08:55:45.033Z","comments":true,"path":"api/articles/MySQL-DQL.json","keywords":null,"cover":[],"content":"<h2 id=\"DQL\"><a href=\"#DQL\" class=\"headerlink\" title=\"DQL\"></a>DQL</h2><p>DQL英文全称是Data Query Language(数据查询语言)，数据查询语言，用来查询数据库中表的记录</p>\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><p>DQL 查询语句，语法结构如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELET\n\t字段列表\n<span class=\"token keyword\">FROM</span>\n\t表名列表\n<span class=\"token keyword\">WHERE</span>\n\t条件列表\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span>\n\t分组字段列表\n<span class=\"token keyword\">HAVING</span>\n\t分组后条件列表\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span>\n\t排序字段列表\n<span class=\"token keyword\">LIMIT</span>\n\t分页参数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>基本查询（不带任何条件）</p>\n</li>\n<li><p>条件查询（WHERE）</p>\n</li>\n<li><p>聚合函数（count、max、min、avg、sum）</p>\n</li>\n<li><p>分组查询（group by）</p>\n</li>\n<li><p>排序查询（order by）</p>\n</li>\n<li><p>分页查询（limit）</p>\n</li>\n</ul>\n<h5 id=\"基础查询\"><a href=\"#基础查询\" class=\"headerlink\" title=\"基础查询\"></a>基础查询</h5><p> * 号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）</p>\n<p> <strong>查询多个字段</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 字段<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 字段<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 字段<span class=\"token number\">3</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>字段设置别名</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 字段<span class=\"token number\">1</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">AS</span> 别名<span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> 字段<span class=\"token number\">2</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">AS</span> 别名<span class=\"token number\">2</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">SELECT</span> 字段<span class=\"token number\">1</span> <span class=\"token punctuation\">[</span> 别名<span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> 字段<span class=\"token number\">2</span> <span class=\"token punctuation\">[</span> 别名<span class=\"token number\">2</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>去除重复记录(DISTINCT)</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> 字段列表 <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查询所有员工的工作地址,起别名,不重复</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> workaddress <span class=\"token string\">'工作地址'</span> <span class=\"token keyword\">from</span>  emp<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h5><p><strong>语法</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 字段名 from 表名 WHERE 条件列表; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&gt; 、&gt;&#x3D;</td>\n<td>大于、大于等于</td>\n</tr>\n<tr>\n<td>&lt; 、&lt;&#x3D;</td>\n<td>小于、小于等于</td>\n</tr>\n<tr>\n<td>&#x3D;</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>&lt;&gt; 、!&#x3D;</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>BETWEEN … AND …</td>\n<td>在某个范围之内(包含最小、最大值)</td>\n</tr>\n<tr>\n<td>IN(…)</td>\n<td>在in之后的列表中的值</td>\n</tr>\n<tr>\n<td>LIKE  占位符</td>\n<td>模糊匹配(_匹配单个字符, %匹配任意个字符)</td>\n</tr>\n<tr>\n<td>IS  NOT NULL</td>\n<td>不是NULL</td>\n</tr>\n<tr>\n<td>IS  NULL</td>\n<td>是NULL</td>\n</tr>\n<tr>\n<td>AND 、&amp;&amp;</td>\n<td>并且 (多个条件同时成立)</td>\n</tr>\n<tr>\n<td>OR 、||</td>\n<td>或者 (多个条件任意一个成立)</td>\n</tr>\n<tr>\n<td>NOT 、!</td>\n<td>非 , 不是</td>\n</tr>\n</tbody></table>\n<p> 小案例：查询没有身份证号的员工信息</p>\n<p>不可以使用 &#x3D; null</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> idcard <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>聚合函数</strong></p>\n<p>将一列数据作为一个整体，进行纵向计算</p>\n<p>常见的聚合函数</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>count</td>\n<td>统计数量</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>avg</td>\n<td>平均值</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>求和</td>\n</tr>\n</tbody></table>\n<p><strong>语法</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 聚合函数<span class=\"token punctuation\">(</span>字段列表<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token punctuation\">[</span>条件查询<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意 :NULL值是不参与所有聚合函数运算的</p>\n<p>对于count聚合函数，统计符合条件的总记录数，还可以通过 count(数字&#x2F;字符串)的形式进行统计查询</p>\n<p>小案例：统计该企业员工数量</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>idcard<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">-- 字段值为NULL，是不参与所有聚合函数运算的</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>分组查询</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 字段列表 <span class=\"token keyword\">FROM</span> 表名 <span class=\"token punctuation\">[</span> <span class=\"token keyword\">WHERE</span> 条件 <span class=\"token punctuation\">]</span> <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> 分组字段名 <span class=\"token punctuation\">[</span> <span class=\"token keyword\">HAVING</span> 分组\n后过滤条件 <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p> <strong>where与having区别</strong></p>\n<ul>\n<li><p>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤</p>\n</li>\n<li><p>判断条件不同：where不能对聚合函数进行判断，而having可以</p>\n</li>\n</ul>\n<p>注意事项:</p>\n<ul>\n<li><p>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</p>\n</li>\n<li><p>执行顺序: where &gt; 聚合函数 &gt; having 。</p>\n</li>\n<li><p>支持多字段分组, 具体语法为 : group by columnA,columnB</p>\n</li>\n</ul>\n<p>小案例：查询年龄小于45的员工 , 并根据工作地址分组 , 获取员工数量大于等于3的工作地址</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> workaddress<span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> number <span class=\"token keyword\">from</span> emp \n<span class=\"token keyword\">where</span> age <span class=\"token operator\">&lt;</span> <span class=\"token number\">45</span> \n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> workaddress\n<span class=\"token keyword\">having</span> number <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>小案例： 统计各个工作地址上班的男性及女性员工的数量</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> workaddress<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> number <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> workaddress<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"排序查询\"><a href=\"#排序查询\" class=\"headerlink\" title=\"排序查询\"></a>排序查询</h5><p> <strong>语法</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 字段列表 <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> 字段<span class=\"token number\">1</span> 排序方式<span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> 字段<span class=\"token number\">2</span> 排序方式<span class=\"token number\">2</span> <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> <strong>排序方式</strong>      ASC : 升序(默认值)      DESC: 降序</p>\n<p>如果是升序, 可以不指定排序方式ASC ;</p>\n<p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 ;</p>\n<p>小案例：根据年龄对公司的员工进行升序排序 , 年龄相同 , 再按照入职时间进行降序排序</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> age <span class=\"token keyword\">desc</span><span class=\"token punctuation\">,</span> entrydate <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h5><p><strong>语法</strong></p>\n<p>起始索引从0开始，起始索引 &#x3D; （查询页码 - 1）* 每页显示记录数。</p>\n<p>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。</p>\n<p>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 字段列表 <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">LIMIT</span> 起始索引<span class=\"token punctuation\">,</span> 查询记录数 <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>小案例：查询第2页员工数据, 每页展示10条记录 ——–&gt; (页码-1)*页展示记录数</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">limit</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h5><p><img src=\"/asset/img/sql_execute_order.png\" alt=\"执行顺序\"></p>\n<p><strong>验证</strong>  : 查询年龄大于15的员工姓名、年龄，并根据年龄进行升序排序</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> name<span class=\"token punctuation\">,</span> age <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> age <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> age <span class=\"token keyword\">asc</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在查询时，我们给emp表起一个别名 e，然后在select 及 where中使用该别名。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> e<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>age <span class=\"token keyword\">from</span> emp e <span class=\"token keyword\">where</span> e<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> age <span class=\"token keyword\">asc</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行上述SQL语句后，我们看到依然可以正常的查询到结果，此时就说明： from 先执行, 然后where 和 select 执行。</p>\n<p>那 where 和 select 到底哪个先执行呢?</p>\n<p>此时，此时我们可以给select后面的字段起别名，然后在 where 中使用这个别名，然后看看是否可以执行成功。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> e<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>age eage <span class=\"token keyword\">from</span> emp e <span class=\"token keyword\">where</span> eage <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> e<span class=\"token punctuation\">.</span>age <span class=\"token keyword\">asc</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行上述SQL报错了:1054 - Unknown column ‘eage’ in ‘where clause’</p>\n<p>说明是执行完from之后，到执行where。</p>\n<p>接下来，我们再执行如下SQL语句，查看执行效果：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> e<span class=\"token punctuation\">.</span>name ename <span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>age eage <span class=\"token keyword\">from</span> emp e <span class=\"token keyword\">where</span> e<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> eage <span class=\"token keyword\">asc</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果执行成功。 那么也就验证了: order by 是在select 语句之后执行的。</p>\n<p>综上所述，DQL语句的执行顺序为：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">where</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">having</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">select</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">limit</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n","text":"DQLDQL英文全称是Data Query Language(数据查询语言)，数据查询语言，用来查询数据库中表的记录 基本语法DQL 查询语句，语法结构如下： SELET 字段列表 FROM 表名列表 WHERE 条件列表 GROUP BY 分组字段列表 HAVING 分组后条件...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/tags/MySQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DQL\"><span class=\"toc-text\">DQL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">基础查询</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">条件查询</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">排序查询</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">分页查询</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">执行顺序</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"中介者模式","uid":"ba45023a93415880bd8ff889992600c8","slug":"中介者模式","date":"2023-05-15T07:45:06.000Z","updated":"2023-05-15T08:20:29.485Z","comments":true,"path":"api/articles/中介者模式.json","keywords":null,"cover":null,"text":"中介者模式它的作用是减少对象之间的直接耦合关系，通过引入一个中介者对象来协调多个对象之间的交互行为，从而将系统中复杂的网状关系变为简单的星型结构。 中介者模式的机制基于以下两个关键点： 抽象中介者（Mediator）：为了把各同事类的耦合度降到最低，将对象间通信的控制交给一个中介...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":25,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":17,"path":"api/tags/设计模式.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"MySQL_DML","uid":"676b4ad0d6495672245716dc73cc8c9e","slug":"MySQL-DML","date":"2023-05-14T01:30:25.000Z","updated":"2023-05-14T08:04:28.656Z","comments":true,"path":"api/articles/MySQL-DML.json","keywords":null,"cover":null,"text":"DMLDML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进 行增、删、改操作。 添加数据 给指定字段添加数据 INSERT INTO 表名(字段1, 字段2, ...) VALUES(值1, 值2, ...); 案例:...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/tags/MySQL.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
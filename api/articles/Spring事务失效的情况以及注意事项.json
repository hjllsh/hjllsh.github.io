{"title":"spring事务失效的情况以及注意事项","uid":"064fd1f961f785b45ddfca5b3ce563ee","slug":"Spring事务失效的情况以及注意事项","date":"2023-05-07T12:31:38.000Z","updated":"2023-05-18T02:32:28.591Z","comments":true,"path":"api/articles/Spring事务失效的情况以及注意事项.json","keywords":null,"cover":"/img/5.7.jpg","content":"<h1 id=\"什么是spring事务？\"><a href=\"#什么是spring事务？\" class=\"headerlink\" title=\"什么是spring事务？\"></a>什么是spring事务？</h1><p>​\tSpring Framework提供了一种简单而强大的机制来管理事务，这个机制被称为Spring事务。Spring事务是在Java应用程序中管理数据库事务的一种强大的方法。在Spring事务中，所有的数据库访问是在事务管理器的上下文中进行的。</p>\n<p>​\tSpring事务的核心思想是将事务管理从具体的数据访问代码中抽象出来。Spring提供了一种集中式的方式来管理事务，这使得我们可以在不修改具体数据访问代码的情况下轻松地添加或删除事务。</p>\n<h1 id=\"spring事务的优点\"><a href=\"#spring事务的优点\" class=\"headerlink\" title=\"spring事务的优点\"></a>spring事务的优点</h1><p>Spring事务具有以下优点：</p>\n<p><strong>简单性</strong> - Spring事务使得事务管理变得非常简单，只需要添加少量的注释就可以实现。</p>\n<p><strong>可扩展性</strong> - Spring事务提供了各种事务管理器，以适应各种不同的事务需求。它还允许我们自行扩展和定制事务管理器。</p>\n<p><strong>独立性</strong> - Spring事务提供了一种与底层数据访问技术无关的事务管理方式，因此我们可以轻松地更改数据库，而不需要更改事务管理方式。</p>\n<h1 id=\"spring事务的类型\"><a href=\"#spring事务的类型\" class=\"headerlink\" title=\"spring事务的类型\"></a>spring事务的类型</h1><p>Spring事务有以下常见的类型：</p>\n<ol>\n<li><strong>声明式事务</strong> - 该类型的事务是在配置文件或注释中声明的。这使得我们可以轻松地添加和删除事务。</li>\n<li><strong>编程式事务</strong> - 该类型的事务是通过编写代码来实现的。它提供了更细粒度的控制和更高的自定义程度。但是，编写代码会使得代码复杂化。</li>\n</ol>\n<h1 id=\"spring事务失效的情况\"><a href=\"#spring事务失效的情况\" class=\"headerlink\" title=\"spring事务失效的情况\"></a>spring事务失效的情况</h1><h2 id=\"事务失效的八种场景\"><a href=\"#事务失效的八种场景\" class=\"headerlink\" title=\"事务失效的八种场景\"></a>事务失效的八种场景</h2><h4 id=\"1-抛出检查异常导致事务不能正确回滚\"><a href=\"#1-抛出检查异常导致事务不能正确回滚\" class=\"headerlink\" title=\"1.抛出检查异常导致事务不能正确回滚\"></a>1.抛出检查异常导致事务不能正确回滚</h4><p>补充什么是检查异常：</p>\n<p>Java中的异常分为两种类型：检查异常和非检查异常。</p>\n<p>检查异常需要使用try-catch语句或者throws声明来处理或抛出，否则编译器会报错。这种异常通常表示程序运行时必须解决的某些错误或不合法操作。例如：IOException、SQLException、ClassNotFoundException等。</p>\n<p>非检查异常是指RuntimeException及其子类异常，不需要在代码中进行特殊处理，程序在运行期间出现这种异常时，会自动触发JVM的异常处理机制。这种异常通常表示程序出现了逻辑或编程错误。例如：NullPointerException、ArrayIndexOutOfBoundsException、IllegalArgumentException等。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Service1</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountMapper</span> accountMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">FileNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> fromBalance <span class=\"token operator\">=</span> accountMapper<span class=\"token punctuation\">.</span><span class=\"token function\">findBalanceBy</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromBalance <span class=\"token operator\">-</span> amount <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            accountMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            accountMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>无法事务回滚：Spring默认只会回滚非检查异常</p>\n</li>\n<li><p>解法：</p>\n<p>配置rollbackFor属性 (什么错误需要回滚)：</p>\n<p> <code>@Transactional(rollbackFor = Exception.class)</code></p>\n</li>\n</ul>\n<h4 id=\"2-方法内自己try-catch异常导致事务不能正确回滚\"><a href=\"#2-方法内自己try-catch异常导致事务不能正确回滚\" class=\"headerlink\" title=\"2.方法内自己try-catch异常导致事务不能正确回滚\"></a>2.方法内自己try-catch异常导致事务不能正确回滚</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Service2</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountMapper</span> accountMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor <span class=\"token operator\">=</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> fromBalance <span class=\"token operator\">=</span> accountMapper<span class=\"token punctuation\">.</span><span class=\"token function\">findBalanceBy</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromBalance <span class=\"token operator\">-</span> amount <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                accountMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                accountMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>原因：事务通知只有捕捉到了目标方法抛出的异常，才能进行后续的回滚处理，如果目标自己处理掉异常，事务通知无法知悉</p>\n</li>\n<li><p>方法1：将catch到的异常，包装成运行时异常抛出</p>\n<ul>\n<li>在catch块里<code>throw new RuntimeException(e);</code></li>\n</ul>\n</li>\n<li><p>方法2：手动设置回滚</p>\n<ul>\n<li><p>在catch块添加</p>\n<p><code>TransactionInterceptor.currentTransactionStatus().setRollbackOnly();</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-aop切面顺序异常导致事务不能正确回滚\"><a href=\"#3-aop切面顺序异常导致事务不能正确回滚\" class=\"headerlink\" title=\"3.aop切面顺序异常导致事务不能正确回滚\"></a>3.aop切面顺序异常导致事务不能正确回滚</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Service3</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountMapper</span> accountMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor <span class=\"token operator\">=</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">FileNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> fromBalance <span class=\"token operator\">=</span> accountMapper<span class=\"token punctuation\">.</span><span class=\"token function\">findBalanceBy</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromBalance <span class=\"token operator\">-</span> amount <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            accountMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            accountMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* transfer(..))\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">LoggerUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">getTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"4-非public方法导致事务失效\"><a href=\"#4-非public方法导致事务失效\" class=\"headerlink\" title=\"4.非public方法导致事务失效\"></a>4.非public方法导致事务失效</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Service4</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountMapper</span> accountMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">FileNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> fromBalance <span class=\"token operator\">=</span> accountMapper<span class=\"token punctuation\">.</span><span class=\"token function\">findBalanceBy</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromBalance <span class=\"token operator\">-</span> amount <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            accountMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            accountMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>原因：Spring为方法创建代理，添加事务通知，前提条件都是方法为public</p>\n</li>\n<li><p>方法1：方法改为public</p>\n</li>\n<li><p>方法2：添加bean配置，不推荐使用</p>\n<ul>\n<li><pre><code class=\"java\">@Bean\npublic TransactionAttributeSource transactionAttributeSource() &#123;\n    return new AnnotationTransactionAttributeSource(false);\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>​\t拓展：AnnotationTransactionAttributeSource</p>\n<p>​\t\tAnnotationTransactionAttributeSource是Spring事务框架中的一个类，用于解析@Transactional注解并以此为基础生成TransactionAttribute对象。TransactionAttribute对象描述了一段方法执行时应该使用的事务属性，包括事务的名字、传播行为、隔离级别、超时时间、只读属性等。</p>\n<p>​\t\t在Spring的事务管理中，事务切面对象会调用AnnotationTransactionAttributeSource对象的getTransactionAttribute()方法，从而获取方法或类级别的事务属性。这种方式可以将事务属性与具体的业务代码解耦，使得业务代码更加简洁可读。</p>\n<p>​\t\tAnnotationTransactionAttributeSource对象有一个布尔类型的构造函数参数，它用于控制@Transactional注解的解析方式。如果这个参数为false，则AnnotationTransactionAttributeSource只会解析@Transactional注解，而不会考虑继承和重载关系，即只解析被注解类或方法上的@Transactional注解，而不考虑其基类和子类以及重载方法中的@Transactional注解。</p>\n<p>​\t\t默认情况下AnnotationTransactionAttributeSource对象的构造函数参数是true，即支持继承和重载的注解解析。但是，在某些特殊情况下，这种解析方式可能会导致一些问题，如事务传播、超时等不被正确解析。此时，可以通过设置构造函数参数为false来禁用这种解析机制，以确保正确地解析@Transactional注解。</p>\n<h4 id=\"5-父子容器导致的事务失效\"><a href=\"#5-父子容器导致的事务失效\" class=\"headerlink\" title=\"5.父子容器导致的事务失效\"></a>5.父子容器导致的事务失效</h4><h4 id=\"6-调用本类方法导致传播行为失效\"><a href=\"#6-调用本类方法导致传播行为失效\" class=\"headerlink\" title=\"6.调用本类方法导致传播行为失效\"></a>6.调用本类方法导致传播行为失效</h4><h4 id=\"7-Transactional没有保证原子行为\"><a href=\"#7-Transactional没有保证原子行为\" class=\"headerlink\" title=\"7.@Transactional没有保证原子行为\"></a>7.@Transactional没有保证原子行为</h4><h4 id=\"8-Transactional方法导致的synchronized失效\"><a href=\"#8-Transactional方法导致的synchronized失效\" class=\"headerlink\" title=\"8.@Transactional方法导致的synchronized失效\"></a>8.@Transactional方法导致的synchronized失效</h4>","text":"什么是spring事务？​ Spring Framework提供了一种简单而强大的机制来管理事务，这个机制被称为Spring事务。Spring事务是在Java应用程序中管理数据库事务的一种强大的方法。在Spring事务中，所有的数据库访问是在事务管理器的上下文中进行的。 ​ Sp...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":25,"path":"api/tags/Java.json"},{"name":"Spring","slug":"Spring","count":11,"path":"api/tags/Spring.json"},{"name":"面试题","slug":"面试题","count":5,"path":"api/tags/面试题.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFspring%E4%BA%8B%E5%8A%A1%EF%BC%9F\"><span class=\"toc-text\">什么是spring事务？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#spring%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">spring事务的优点</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#spring%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">spring事务的类型</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#spring%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E7%9A%84%E6%83%85%E5%86%B5\"><span class=\"toc-text\">spring事务失效的情况</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E7%9A%84%E5%85%AB%E7%A7%8D%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">事务失效的八种场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%8A%9B%E5%87%BA%E6%A3%80%E6%9F%A5%E5%BC%82%E5%B8%B8%E5%AF%BC%E8%87%B4%E4%BA%8B%E5%8A%A1%E4%B8%8D%E8%83%BD%E6%AD%A3%E7%A1%AE%E5%9B%9E%E6%BB%9A\"><span class=\"toc-text\">1.抛出检查异常导致事务不能正确回滚</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%96%B9%E6%B3%95%E5%86%85%E8%87%AA%E5%B7%B1try-catch%E5%BC%82%E5%B8%B8%E5%AF%BC%E8%87%B4%E4%BA%8B%E5%8A%A1%E4%B8%8D%E8%83%BD%E6%AD%A3%E7%A1%AE%E5%9B%9E%E6%BB%9A\"><span class=\"toc-text\">2.方法内自己try-catch异常导致事务不能正确回滚</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-aop%E5%88%87%E9%9D%A2%E9%A1%BA%E5%BA%8F%E5%BC%82%E5%B8%B8%E5%AF%BC%E8%87%B4%E4%BA%8B%E5%8A%A1%E4%B8%8D%E8%83%BD%E6%AD%A3%E7%A1%AE%E5%9B%9E%E6%BB%9A\"><span class=\"toc-text\">3.aop切面顺序异常导致事务不能正确回滚</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E9%9D%9Epublic%E6%96%B9%E6%B3%95%E5%AF%BC%E8%87%B4%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88\"><span class=\"toc-text\">4.非public方法导致事务失效</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E7%88%B6%E5%AD%90%E5%AE%B9%E5%99%A8%E5%AF%BC%E8%87%B4%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88\"><span class=\"toc-text\">5.父子容器导致的事务失效</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E8%B0%83%E7%94%A8%E6%9C%AC%E7%B1%BB%E6%96%B9%E6%B3%95%E5%AF%BC%E8%87%B4%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA%E5%A4%B1%E6%95%88\"><span class=\"toc-text\">6.调用本类方法导致传播行为失效</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-Transactional%E6%B2%A1%E6%9C%89%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">7.@Transactional没有保证原子行为</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-Transactional%E6%96%B9%E6%B3%95%E5%AF%BC%E8%87%B4%E7%9A%84synchronized%E5%A4%B1%E6%95%88\"><span class=\"toc-text\">8.@Transactional方法导致的synchronized失效</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"单例模式","uid":"5e422a9b2c69bd7294ec71b84cbbb53b","slug":"单例模式","date":"2023-05-08T13:10:28.000Z","updated":"2023-05-08T15:15:46.818Z","comments":true,"path":"api/articles/单例模式.json","keywords":null,"cover":"/img/5.8.jpg","text":"什么是单例模式？单例模式的特点是什么？单例模式属于创建型模式，⼀个单例类在任何情况下都只存在⼀个实例， 构造⽅法必须是私有的、由⾃⼰创建⼀个静态变量存储实例，对外提供⼀ 个静态公有⽅法获取实例。 优点是内存中只有⼀个实例，减少了开销，尤其是频繁创建和销毁实例的 情况下并且可以避免...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":25,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":17,"path":"api/tags/设计模式.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{}}
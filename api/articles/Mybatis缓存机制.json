{"title":"Mybatis(一)","uid":"9f1c39845db12e0e40a2bf8f9721b61a","slug":"Mybatis缓存机制","date":"2023-06-14T02:03:59.000Z","updated":"2023-06-14T13:14:16.679Z","comments":true,"path":"api/articles/Mybatis缓存机制.json","keywords":null,"cover":[],"content":"<h3 id=\"Mybatis\"><a href=\"#Mybatis\" class=\"headerlink\" title=\"Mybatis\"></a>Mybatis</h3><p>MyBatis 是一款优秀的持久层框架，一个半 ORM（对象关系映射）框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几 乎所有的 JDBC 代码和手动设置参数以及 获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>\n<ul>\n<li><p>优点 </p>\n<ul>\n<li>与传统的数据库访问技术相比，ORM有以下优点： 基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL 写在XML里，解除sql与程序代码的耦合，便于统 一管理；提供XML标签，支持编写动态 SQL语句，并可重用 </li>\n<li>与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数 据库MyBatis都支持， 能够与Spring很好的集成</li>\n</ul>\n</li>\n<li><p>缺点 </p>\n<ul>\n<li>SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求 SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ORM是什么\"><a href=\"#ORM是什么\" class=\"headerlink\" title=\"ORM是什么?\"></a>ORM是什么?</h3><p>ORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数 据与简单Java对象（POJO）的映射关系的技术。简 单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系型数据库中。</p>\n<h3 id=\"为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？\"><a href=\"#为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？\" class=\"headerlink\" title=\"为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？\"></a>为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</h3><p>全自动：Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时， 可以根据对象关系模型直接获取，所以它是全自动的。</p>\n<p>而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半 自动ORM映射工具。</p>\n<h3 id=\"传统JDBC开发存在哪些问题？MyBatis是如何解决这些问题的？\"><a href=\"#传统JDBC开发存在哪些问题？MyBatis是如何解决这些问题的？\" class=\"headerlink\" title=\"传统JDBC开发存在哪些问题？MyBatis是如何解决这些问题的？\"></a>传统JDBC开发存在哪些问题？MyBatis是如何解决这些问题的？</h3><ul>\n<li>频繁创建数据库连接对象、释放，容易造成系统资源浪费，影响系统性能。可以使用连接池 解决这个问题。但是使用jdbc需要自己实现连接池。 <strong>解决</strong>：在mybatis-config.xml中配置数据链接池，使用连接池管理数据库连接。</li>\n<li>sql语句定义、参数设置、结果集处理存在硬编码。实际项目中sql语句变化的可能性较大， 一旦发生变化，需要修改java代码，系统需要重 新编译，重新发布，不好维护。<strong>解决</strong>：将Sql语句配置在XXXXmapper.xml文件中与java代码分离，动态sql灵活。</li>\n<li>使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一 定，可能多也可能少，修改sql还要修改代码，系统不易维护。 <strong>解决</strong>： Mybatis自动将java对象映射至sql语句。</li>\n<li>结果集处理存在重复代码，处理麻烦。如果可以映射成Java对象会比较方便。<strong>解决：</strong>Mybatis自动将sql执行结果映射至java对象。</li>\n</ul>\n<h3 id=\"Hibernate-和-MyBatis-的区别\"><a href=\"#Hibernate-和-MyBatis-的区别\" class=\"headerlink\" title=\"Hibernate 和 MyBatis 的区别\"></a>Hibernate 和 MyBatis 的区别</h3><ul>\n<li><p>相同点</p>\n<ul>\n<li>都是对jdbc的封装，都是持久层的框架，都用于dao层的开发。</li>\n</ul>\n</li>\n<li><p>不同点</p>\n<ul>\n<li>映射关系 <ul>\n<li>MyBatis 是一个半自动映射的框架，配置Java对象与sql语句执行结果的对应关系，多表关联关系配置简单</li>\n<li>Hibernate 是一个全表映射的框架，配置Java对象与数据库表的对应关系，多表关联关系配置复杂</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>SQL优化和移植性 </p>\n<ul>\n<li>Hibernate 对SQL语句封装，提供了日志、缓存、级联（级联比 MyBatis 强大）等特性， 此外还提供 HQL（Hibernate Query Language） 操作数据库，数据库无关性支持好，但会多消耗性能。如果项目需要支持多种数据库，代码开发量少，但SQL语句优化困难。</li>\n<li>MyBatis 需要手动编写 SQL，支持动态 SQL、处理列表、动态生成表名、支持存储过程。 开发工作量相对大些。直接使用SQL语句操作数据库，不支持数据库无关性，但sql语句优化容易。</li>\n</ul>\n</li>\n<li><p>开发难易程度和学习成本</p>\n<ul>\n<li>Hibernate是重量级框架,学习使用门槛高,适合于需求相对稳定,中小型的项目,比如:办公自动化系统 </li>\n<li>MyBatis 是轻量级框架,学习使用门槛低,适合于需求变化频繁,大型的项目,</li>\n</ul>\n</li>\n</ul>\n<p><strong>总结:</strong> MyBatis 是一个小巧、方便、高效、简单、直接、半自动化的持久层框架， Hibernate 是一个强大、方便、高效、复杂、间接、全自动化的持久层框架。</p>\n<h3 id=\"MyBatis的解析和运行原理\"><a href=\"#MyBatis的解析和运行原理\" class=\"headerlink\" title=\"MyBatis的解析和运行原理\"></a>MyBatis的解析和运行原理</h3><p>MyBatis编程步骤:</p>\n<ol>\n<li>创建SqlSessionFactory </li>\n<li>通过SqlSessionFactory创建SqlSession</li>\n<li>通过sqlsession执行数据库操作 </li>\n<li>调用session.commit()提交事务 </li>\n<li>调用session.close()关闭会话</li>\n</ol>\n<h4 id=\"MyBatis的工作原理\"><a href=\"#MyBatis的工作原理\" class=\"headerlink\" title=\"MyBatis的工作原理\"></a>MyBatis的工作原理</h4><p><img src=\"E:\\blog\\hjllsh\\source\\assets\\mybatis\\image-20230614122415294.png\" alt=\"image-20230614122415294\"></p>\n<p>1）读取 MyBatis 配置文件：mybatis-config.xml 为 MyBatis 的全局配置文件，配置了 MyBatis 的运行环境等信息，例如数据库连接信息。</p>\n<p>2）加载映射文件：映射文件即 SQL 映射文件，该文件中配置了操作数据库的 SQL 语句， 需要在MyBatis 配置文件 mybatis-config.xml 中加载。mybatis-config.xml 文件可以加载多个映射文件，每个文件对应数据库中的一张表。</p>\n<p> 3）构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。 </p>\n<p>4）创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所 有方法。 </p>\n<p>5）Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。 </p>\n<p>6）MappedStatement 对象：在 Executor 接口的执行方法中有一个 MappedStatement 类型的参数，该参数是对映射信息的封装，用于 存储要映射的 SQL 语句的 id、参数等信 息。</p>\n<p> 7）输入参数映射：输入参数类型可以是 Map、List 等集合类型，也可以是基本数据类型和 POJO 类型。输入参数映射过程类似于 JDBC 对 preparedStatement 对象设置参数的过程。 </p>\n<p>8）输出结果映射：输出结果类型可以是 Map、List 等集合类型，也可以是基本数据类型 和 POJO 类型。输出结果映射过程类似于 JDBC 对 结果集的解析过程。</p>\n<h4 id=\"MyBatis的功能架构\"><a href=\"#MyBatis的功能架构\" class=\"headerlink\" title=\"MyBatis的功能架构\"></a>MyBatis的功能架构</h4><p>API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层 一接收到调用请求就会调用数据处理层来完成具 体的数据处理。 </p>\n<p>数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的 目的是根据调用的请求完成一次数据库操作。 </p>\n<p>基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这 些都是共用的东西，将他们抽取出来作为最基础 的组件。为上层的数据处理层提供最基础的 支撑。</p>\n<p>MyBatis的初始化，会从mybatis-config.xml配置文件，解析构造成 Configuration这个类，</p>\n<p>(1)加载配置：配置来源于两个地方，一处是配置文件，一处是Java代码的注解，将SQL的 配置信息加载成为一个个MappedStatement对象 （包括了传入参数映射配置、执行的SQL 语句、结果映射配置），存储在内存中。 </p>\n<p>(2)SQL解析：当API接口层接收到调用请求时，会接收到传入SQL的ID和传入对象（可以是 Map、JavaBean或者基本数据类型），Mybatis 会根据SQL的ID找到对应的 MappedStatement，然后根据传入参数对象对MappedStatement进行解析，解析后可以 得到最终要执行的 SQL语句和参数。</p>\n<p> (3)SQL执行：将最终得到的SQL和参数拿到数据库进行执行，得到操作数据库的结果。</p>\n<p> (4)结果映射：将操作数据库的结果按照映射的配置进行转换，可以转换成HashMap、 JavaBean或者基本数据类型，并将最终结果返回。</p>\n","feature":true,"text":"MybatisMyBatis 是一款优秀的持久层框架，一个半 ORM（对象关系映射）框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几 乎所有的 JDBC 代码和手动设置参数以及 获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","count":1,"path":"api/tags/Mybatis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Mybatis\"><span class=\"toc-text\">Mybatis</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ORM%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">ORM是什么?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4Mybatis%E6%98%AF%E5%8D%8A%E8%87%AA%E5%8A%A8ORM%E6%98%A0%E5%B0%84%E5%B7%A5%E5%85%B7%EF%BC%9F%E5%AE%83%E4%B8%8E%E5%85%A8%E8%87%AA%E5%8A%A8%E7%9A%84%E5%8C%BA%E5%88%AB%E5%9C%A8%E5%93%AA%E9%87%8C%EF%BC%9F\"><span class=\"toc-text\">为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E7%BB%9FJDBC%E5%BC%80%E5%8F%91%E5%AD%98%E5%9C%A8%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%EF%BC%9FMyBatis%E6%98%AF%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">传统JDBC开发存在哪些问题？MyBatis是如何解决这些问题的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hibernate-%E5%92%8C-MyBatis-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">Hibernate 和 MyBatis 的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MyBatis%E7%9A%84%E8%A7%A3%E6%9E%90%E5%92%8C%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">MyBatis的解析和运行原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#MyBatis%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">MyBatis的工作原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#MyBatis%E7%9A%84%E5%8A%9F%E8%83%BD%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">MyBatis的功能架构</span></a></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MySQL实战","uid":"11fe232dbef934e03d9537a3a12675e0","slug":"MySQL-实战(1)","date":"2023-06-14T07:25:58.000Z","updated":"2023-06-14T13:13:20.284Z","comments":true,"path":"api/articles/MySQL-实战(1).json","keywords":null,"cover":[],"text":"不建议使用长事务假设一个值从1被按顺序改成了2、3、4，在回滚日志里面就会有类似下面的记录 当前值是4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的read-view。如图中看到的，在视图A、B、C里面，这一个记录的值分别是1、2、4，同一条记录在系统中可以存在多个版本...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":12,"path":"api/tags/MySQL.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"MySQL日志系统","uid":"1442087dfdabdc07946399fb7094e2fa","slug":"MySQL日志系统","date":"2023-06-11T04:33:43.000Z","updated":"2023-06-14T07:25:30.255Z","comments":true,"path":"api/articles/MySQL日志系统.json","keywords":null,"cover":[],"text":"MySQL的基本架构比如，你有个最简单的表，表里只有一个ID字段，在执行下面这个查询语句时： mysql> select * from T where ID=10； MySQL内部的执行过程MySQL的基本架构示意图 大体来说，MySQL可以分为Server层和存储引擎层两部分。...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":12,"path":"api/tags/MySQL.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true}}
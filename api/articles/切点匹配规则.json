{"title":"切点匹配规则","uid":"d3cf2f31cfa6170a433ba0c99bf2326a","slug":"切点匹配规则","date":"2023-05-11T09:35:15.000Z","updated":"2023-05-11T12:02:12.278Z","comments":true,"path":"api/articles/切点匹配规则.json","keywords":null,"cover":null,"content":"<h2 id=\"切点匹配规则\"><a href=\"#切点匹配规则\" class=\"headerlink\" title=\"切点匹配规则\"></a>切点匹配规则</h2><p><strong>AspectJ</strong>使用切点指示器（Pointcut Designator）来描述需要匹配的切点，切点指示器定义了切点的名称、参数、返回类型、标注等信息。切点指示器可以根据需要使用通配符、逻辑运算符、正则表达式等方式来描述切点。</p>\n<p>AspectJ中的切点指示符主要分为以下几种：</p>\n<ol>\n<li>execution：匹配方法执行的连接点，以方法的访问修饰符、返回类型、类名、方法名和参数决定。</li>\n<li>within：匹配指定类型内的方法执行。</li>\n<li>this：匹配当前AOP代理对象类型的执行方法。</li>\n<li>target：匹配当前目标对象类型的执行方法。</li>\n<li>args：匹配当前执行的方法传入参数为指定类型的执行方法。</li>\n<li>annotation：匹配当前执行方法持有指定注解的方法执行。</li>\n<li>bean：匹配指定名称的bean中的方法执行。</li>\n<li>cflow：匹配满足条件的方法的任何调用。</li>\n<li>if：用于组合其他切点指示器。</li>\n</ol>\n<h6 id=\"使用切点指示器可以非常方便的定义Spring中的切点表达式，如：\"><a href=\"#使用切点指示器可以非常方便的定义Spring中的切点表达式，如：\" class=\"headerlink\" title=\"使用切点指示器可以非常方便的定义Spring中的切点表达式，如：\"></a>使用切点指示器可以非常方便的定义Spring中的切点表达式，如：</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Pointcut(&quot;execution(* com.example.service.*.*(..))&quot;)\npublic void servicePointcut() &#123;&#125;\n\n@Pointcut(&quot;execution(* com.example.dao.*.*(..))&quot;)\npublic void daoPointcut() &#123;&#125;\n\n@Pointcut(&quot;within(com.example.*)&quot;)\npublic void withinPointcut() &#123;&#125;\n\n@Pointcut(&quot;@annotation(com.example.annotation.Loggable)&quot;)\npublic void annotationPointcut() &#123;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的代码定义了四个切点表达式，分别对应于拦截service包、dao包、com.example包下的所有方法和所有标有@Loggable注解的方法的拦截。在实际使用时，可以将这些切点表达式和Advice组合成Advisor，通过使用AOP来实现对目标方法的拦截。</p>\n<p><strong>aspectj 切点的局限性</strong></p>\n<p>实际的 @Transactional 切点实现，无法匹配实现了接口添加了@Transactional注解的类的方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AspectJExpressionPointcut</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StaticMethodMatcherPointcut</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MergedAnnotations</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Transactional</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A16</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchMethodException</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//        AspectJExpressionPointcut无法处理加载类上的信息</span>\n<span class=\"token comment\">//        检查是否匹配成功  execution</span>\n        <span class=\"token class-name\">AspectJExpressionPointcut</span> pt1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AspectJExpressionPointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pt1<span class=\"token punctuation\">.</span><span class=\"token function\">setExpression</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* bar())\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pt1<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pt1<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n<span class=\"token comment\">//        根据方法注解进行匹配  @annotation表达式</span>\n        <span class=\"token class-name\">AspectJExpressionPointcut</span> pt2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AspectJExpressionPointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pt2<span class=\"token punctuation\">.</span><span class=\"token function\">setExpression</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(org.springframework.transaction.annotation.Transactional)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pt2<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pt2<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T3</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n       \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Transactional</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">I3</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T3</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">I3</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Spring如何解决</strong></p>\n<p><code>StaticMethodMatcherPointcut</code>是Spring框架中用于匹配静态方法的切点对象。在AOP编程中，切点用于定义在哪些方法执行时会被拦截并执行增强逻辑。<code>StaticMethodMatcherPointcut</code>基于指定的规则匹配静态方法并确定在这些方法执行时是否要进行拦截。</p>\n<p><code>StaticMethodMatcherPointcut</code>的匹配规则根据传入的<code>Class</code>和方法<code>Method</code>对象进行判断，只有当方法符合预定义的规则时，切点才会拦截方法执行，否则会被忽略。通常，可以通过实现<code>matches</code>方法来自定义匹配规则，只拦截符合条件的目标方法。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//        StaticMethodMatcherPointcut抽象类可以处理类上的信息，实现match方法</span>\n        <span class=\"token class-name\">StaticMethodMatcherPointcut</span> pt3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StaticMethodMatcherPointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>               <span class=\"token comment\">//方法                    类</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> targetClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 读取方法信息，检查方法上是否加了 Transactional 注解</span>\n                <span class=\"token class-name\">MergedAnnotations</span> annotations <span class=\"token operator\">=</span> <span class=\"token class-name\">MergedAnnotations</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>annotations<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Transactional</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n    \t\t\t<span class=\"token comment\">// 读取方法信息类信息，查看类上是否加了 Transactional 注解</span>\n                <span class=\"token comment\">//默认只查看本类删是否含有相应信息，修改成SearchStrategy.TYPE_HIERARCHY</span>\n                annotations <span class=\"token operator\">=</span> <span class=\"token class-name\">MergedAnnotations</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>targetClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MergedAnnotations<span class=\"token punctuation\">.</span>SearchStrategy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE_HIERARCHY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>annotations<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Transactional</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pt3<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pt3<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pt3<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pt3<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T3</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T3</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li><p>底层切点实现是如何匹配的: 调用了 aspectj 的匹配方法</p>\n</li>\n<li><p>比较关键的是它实现了 MethodMatcher 接口, 用来执行方法的匹配</p>\n</li>\n</ul>\n","text":"切点匹配规则AspectJ使用切点指示器（Pointcut Designator）来描述需要匹配的切点，切点指示器定义了切点的名称、参数、返回类型、标注等信息。切点指示器可以根据需要使用通配符、逻辑运算符、正则表达式等方式来描述切点。 AspectJ中的切点指示符主要分为以下几种...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":29,"path":"api/tags/Java.json"},{"name":"Spring","slug":"Spring","count":11,"path":"api/tags/Spring.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%87%E7%82%B9%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">切点匹配规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%88%87%E7%82%B9%E6%8C%87%E7%A4%BA%E5%99%A8%E5%8F%AF%E4%BB%A5%E9%9D%9E%E5%B8%B8%E6%96%B9%E4%BE%BF%E7%9A%84%E5%AE%9A%E4%B9%89Spring%E4%B8%AD%E7%9A%84%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E5%A6%82%EF%BC%9A\"><span class=\"toc-text\">使用切点指示器可以非常方便的定义Spring中的切点表达式，如：</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"从@Aspect到Advisor","uid":"a95318a81b0b3097ed11bab255c7390f","slug":"从@Aspect到Advisor","date":"2023-05-11T12:04:08.000Z","updated":"2023-06-28T02:06:04.773Z","comments":true,"path":"api/articles/从@Aspect到Advisor.json","keywords":null,"cover":null,"text":"@Aspect—&gt;&gt;AdvisorAnnotationAwareAspectJAutoProxyCreator AnnotationAwareAspectJAutoProxyCreator的作用是将高级切面转换成低级切面，使其能够被Spring框架所识别和使用。具体来...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[],"tags":[],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"JDK和CGlib在Spring中的统一","uid":"42403d33a4a316854760bf766fee144b","slug":"JDK和CGlib在Spring中的统一","date":"2023-05-11T05:01:11.000Z","updated":"2023-05-11T10:00:53.217Z","comments":true,"path":"api/articles/JDK和CGlib在Spring中的统一.json","keywords":null,"cover":null,"text":"JDK和CGlib在Spring中的统一Spring 中对切点、通知、切面的抽象如下 切点：接口 Pointcut，典型实现 AspectJExpressionPointcut 通知：典型接口为 MethodInterceptor 代表环绕通知 切面：Advisor，包含一个 A...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":29,"path":"api/tags/Java.json"},{"name":"Spring","slug":"Spring","count":11,"path":"api/tags/Spring.json"},{"name":"Proxy","slug":"Proxy","count":2,"path":"api/tags/Proxy.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
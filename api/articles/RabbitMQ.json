{"title":"RabbitMQ","uid":"eb3ef2175aab37a16c1ed443702f7a7d","slug":"RabbitMQ","date":"2023-06-08T14:02:31.000Z","updated":"2023-06-10T15:33:25.442Z","comments":true,"path":"api/articles/RabbitMQ.json","keywords":null,"cover":[],"content":"<h1 id=\"RabbitMQ一篇就够了\"><a href=\"#RabbitMQ一篇就够了\" class=\"headerlink\" title=\"RabbitMQ一篇就够了\"></a>RabbitMQ一篇就够了</h1><p>同步通讯：就像打电话，需要实时响应。</p>\n<p>异步通讯：就像发邮件，不需要马上回复。</p>\n<h3 id=\"同步通讯\"><a href=\"#同步通讯\" class=\"headerlink\" title=\"同步通讯\"></a>同步通讯</h3><p>存在下面的问题：</p>\n<p><img src=\"/../assets/mq/mq01.png\" alt=\"image-20210717162004285\"></p>\n<p>总结：</p>\n<p>同步调用的优点：</p>\n<ul>\n<li>时效性较强，可以立即得到结果</li>\n</ul>\n<p>同步调用的问题：</p>\n<ul>\n<li>耦合度高</li>\n<li>性能和吞吐能力下降</li>\n<li>有额外的资源消耗</li>\n<li>有级联失败问题</li>\n</ul>\n<h3 id=\"异步通讯\"><a href=\"#异步通讯\" class=\"headerlink\" title=\"异步通讯\"></a>异步通讯</h3><p>异步调用则可以避免上述问题：</p>\n<p>我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。</p>\n<p>在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。</p>\n<p>订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。</p>\n<p>为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。</p>\n<p><img src=\"/../assets/mq/mq02.png\" alt=\"image-20210422095356088\"></p>\n<p>Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。</p>\n<p>好处：</p>\n<ul>\n<li><p>吞吐量提升：无需等待订阅者处理完成，响应更快速</p>\n</li>\n<li><p>故障隔离：服务没有直接调用，不存在级联失败问题</p>\n</li>\n<li><p>调用间没有阻塞，不会造成无效的资源占用</p>\n</li>\n<li><p>耦合度极低，每个服务都可以灵活插拔，可替换</p>\n</li>\n<li><p>流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件</p>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>架构复杂了，业务没有明显的流程线，不好管理</li>\n<li>需要依赖于Broker的可靠、安全、性能</li>\n</ul>\n<h3 id=\"技术对比：\"><a href=\"#技术对比：\" class=\"headerlink\" title=\"技术对比：\"></a>技术对比：</h3><p>MQ，中文是消息队列（MessageQueue），字面来看就是存放消息的队列。也就是事件驱动架构中的Broker。</p>\n<p>比较常见的MQ实现：</p>\n<ul>\n<li>ActiveMQ</li>\n<li>RabbitMQ</li>\n<li>RocketMQ</li>\n<li>Kafka</li>\n</ul>\n<p>几种常见MQ的对比：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>RabbitMQ</strong></th>\n<th><strong>ActiveMQ</strong></th>\n<th><strong>RocketMQ</strong></th>\n<th><strong>Kafka</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>公司&#x2F;社区</td>\n<td>Rabbit</td>\n<td>Apache</td>\n<td>阿里</td>\n<td>Apache</td>\n</tr>\n<tr>\n<td>开发语言</td>\n<td>Erlang</td>\n<td>Java</td>\n<td>Java</td>\n<td>Scala&amp;Java</td>\n</tr>\n<tr>\n<td>协议支持</td>\n<td>AMQP，XMPP，SMTP，STOMP</td>\n<td>OpenWire,STOMP，REST,XMPP,AMQP</td>\n<td>自定义协议</td>\n<td>自定义协议</td>\n</tr>\n<tr>\n<td>可用性</td>\n<td>高</td>\n<td>一般</td>\n<td>高</td>\n<td>高</td>\n</tr>\n<tr>\n<td>单机吞吐量</td>\n<td>一般</td>\n<td>差</td>\n<td>高</td>\n<td>非常高</td>\n</tr>\n<tr>\n<td>消息延迟</td>\n<td>微秒级</td>\n<td>毫秒级</td>\n<td>毫秒级</td>\n<td>毫秒以内</td>\n</tr>\n<tr>\n<td>消息可靠性</td>\n<td>高</td>\n<td>一般</td>\n<td>高</td>\n<td>一般</td>\n</tr>\n</tbody></table>\n<p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p>\n<p>追求可靠性：RabbitMQ、RocketMQ</p>\n<p>追求吞吐能力：RocketMQ、Kafka</p>\n<p>追求消息低延迟：RabbitMQ、Kafka</p>\n<h1 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h1><p>MQ的基本结构：</p>\n<p><img src=\"/../assets/mq/mq03.png\" alt=\"image-20210717162752376\"></p>\n<p>RabbitMQ中的一些角色：</p>\n<ul>\n<li>publisher：生产者</li>\n<li>consumer：消费者</li>\n<li>exchange：交换机，负责消息路由</li>\n<li>queue：队列，存储消息</li>\n<li>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离</li>\n</ul>\n<h3 id=\"RabbitMQ消息模型\"><a href=\"#RabbitMQ消息模型\" class=\"headerlink\" title=\"RabbitMQ消息模型\"></a>RabbitMQ消息模型</h3><p>RabbitMQ官方提供了5个不同的Demo示例，对应了不同的消息模型：</p>\n<p><img src=\"/../assets/mq/mq04.png\" alt=\"image-20210717163332646\"></p>\n<h3 id=\"入门案例\"><a href=\"#入门案例\" class=\"headerlink\" title=\"入门案例\"></a>入门案例</h3><p>练习项目结构如下：</p>\n<p><img src=\"/../assets/mq/mq05.png\" alt=\"image-20210717163604330\"></p>\n<p>包括三部分：</p>\n<ul>\n<li>mq-demo：父工程，管理项目依赖</li>\n<li>publisher：消息的发送者</li>\n<li>consumer：消息的消费者</li>\n</ul>\n<p>简单队列模式的模型图：</p>\n<p> <img src=\"/../assets/mq/mq06.png\" alt=\"image-20210717163434647\"></p>\n<p>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：</p>\n<ul>\n<li>publisher：消息发布者，将消息发送到队列queue</li>\n<li>queue：消息队列，负责接受并缓存消息</li>\n<li>consumer：订阅队列，处理队列中的消息</li>\n</ul>\n<h4 id=\"publisher实现\"><a href=\"#publisher实现\" class=\"headerlink\" title=\"publisher实现\"></a>publisher实现</h4><p>步骤：</p>\n<ul>\n<li>建立连接</li>\n<li>创建Channel</li>\n<li>声明队列</li>\n<li>发送消息</li>\n<li>关闭连接和channel</li>\n</ul>\n<p>代码实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectionFactory</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeoutException</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PublisherTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 1.建立连接</span>\n        <span class=\"token class-name\">ConnectionFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.150.101\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itcast\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123321\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 1.2.建立连接</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 2.创建通道Channel</span>\n        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/**\n\t\t * 参数说明：\n\t\t * 1、第一个为队列/交换器名称\n \t\t * 2、是否持久化，默认true\n\t\t * 3、消费者断开时是否删除\n \t\t * 4、消息其他参数    实际开发需要持久化，只需要输入交换器的名称，其他用默认的\n \t\t * 5、\n \t\t*/</span>\n        <span class=\"token comment\">// 3.创建队列</span>\n        <span class=\"token class-name\">String</span> queueName <span class=\"token operator\">=</span> <span class=\"token string\">\"simple.queue\"</span><span class=\"token punctuation\">;</span>\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span>queueName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 4.发送消息</span>\n        <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello, rabbitmq!\"</span><span class=\"token punctuation\">;</span>\n        \t\t\t\t\t\t\t<span class=\"token comment\">//参数 3 设置为存储行为，2表示存储纯文本到磁盘；\t</span>\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> queueName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息成功：【\"</span> <span class=\"token operator\">+</span> message <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 5.关闭通道和连接</span>\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"consumer实现\"><a href=\"#consumer实现\" class=\"headerlink\" title=\"consumer实现\"></a>consumer实现</h4><p>步骤：</p>\n<ul>\n<li>建立连接</li>\n<li>创建Channel</li>\n<li>声明队列</li>\n<li>订阅消息</li>\n</ul>\n<p>代码实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeoutException</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerTest</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 1.建立连接</span>\n        <span class=\"token class-name\">ConnectionFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.150.101\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itcast\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123321\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 1.2.建立连接</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 2.创建通道Channel</span>\n        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 3.创建队列</span>\n        <span class=\"token class-name\">String</span> queueName <span class=\"token operator\">=</span> <span class=\"token string\">\"simple.queue\"</span><span class=\"token punctuation\">;</span>\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span>queueName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 4.订阅消息</span>\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queueName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span>\n                                       <span class=\"token class-name\">AMQP<span class=\"token punctuation\">.</span>BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 5.处理消息</span>\n                <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到消息：【\"</span> <span class=\"token operator\">+</span> message <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待接收消息。。。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>小结</strong></p>\n<p>基本消息队列的消息发送流程：</p>\n<ol>\n<li><p>建立connection</p>\n</li>\n<li><p>创建channel</p>\n</li>\n<li><p>利用channel声明队列</p>\n</li>\n<li><p>利用channel向队列发送消息</p>\n</li>\n</ol>\n<p>基本消息队列的消息接收流程：</p>\n<ol>\n<li><p>建立connection</p>\n</li>\n<li><p>创建channel</p>\n</li>\n<li><p>利用channel声明队列</p>\n</li>\n<li><p>定义consumer的消费行为handleDelivery()</p>\n</li>\n<li><p>利用channel将消费者与队列绑定</p>\n</li>\n</ol>\n<h1 id=\"SpringAMQP\"><a href=\"#SpringAMQP\" class=\"headerlink\" title=\"SpringAMQP\"></a>SpringAMQP</h1><p>SpringAMQP是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。</p>\n<p>SpringAmqp的官方地址：<a href=\"https://spring.io/projects/spring-amqp\">https://spring.io/projects/spring-amqp</a></p>\n<p><img src=\"/../assets/mq/mq07.png\" alt=\"image-20210717164024967\"></p>\n<p><img src=\"D:/SpringCloud_MYH/day04-MQ/讲义/assets/image-20210717164038678.png\" alt=\"image-20210717164038678\"></p>\n<p>SpringAMQP提供了三个功能：</p>\n<ul>\n<li>自动声明队列、交换机及其绑定关系</li>\n<li>基于注解的监听器模式，异步接收消息</li>\n<li>封装了RabbitTemplate工具，用于发送消息</li>\n</ul>\n<h3 id=\"Basic-Queue-简单队列模型\"><a href=\"#Basic-Queue-简单队列模型\" class=\"headerlink\" title=\"Basic Queue 简单队列模型\"></a>Basic Queue 简单队列模型</h3><p>在父工程mq-demo中引入依赖</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!--AMQP依赖，包含RabbitMQ--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"消息发送\"><a href=\"#消息发送\" class=\"headerlink\" title=\"消息发送\"></a>消息发送</h4><p>首先配置MQ地址，在publisher服务的application.yml中添加配置：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.150.101 <span class=\"token comment\"># 主机名</span>\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span> <span class=\"token comment\"># 端口</span>\n    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> / <span class=\"token comment\"># 虚拟主机</span>\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> itcast <span class=\"token comment\"># 用户名</span>\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123321</span> <span class=\"token comment\"># 密码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runner<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RunWith</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>amqp<span class=\"token punctuation\">.</span>rabbit<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RabbitTemplate</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>junit4<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringRunner</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringAmqpTest</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RabbitTemplate</span> rabbitTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSimpleQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 队列名称</span>\n        <span class=\"token class-name\">String</span> queueName <span class=\"token operator\">=</span> <span class=\"token string\">\"simple.queue\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 消息</span>\n        <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello, spring amqp!\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 发送消息</span>\n        rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>queueName<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"消息接收\"><a href=\"#消息接收\" class=\"headerlink\" title=\"消息接收\"></a>消息接收</h4><p>首先配置MQ地址，在consumer服务的application.yml中添加配置：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.150.101 <span class=\"token comment\"># 主机名</span>\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span> <span class=\"token comment\"># 端口</span>\n    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> / <span class=\"token comment\"># 虚拟主机</span>\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> itcast <span class=\"token comment\"># 用户名</span>\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123321</span> <span class=\"token comment\"># 密码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后在consumer服务中新建一个类SpringRabbitListener，代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>amqp<span class=\"token punctuation\">.</span>rabbit<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RabbitListener</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringRabbitListener</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"simple.queue\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenSimpleQueueMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring 消费者接收到消息：【\"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息</p>\n<h4 id=\"WorkQueue\"><a href=\"#WorkQueue\" class=\"headerlink\" title=\"WorkQueue\"></a>WorkQueue</h4><p>Work queues，也被称为（Task queues），任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p>\n<p><img src=\"/../assets/mq/mq08.png\" alt=\"image-20210717164238910\"></p>\n<p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用work 模型，多个消费者共同处理消息处理，速度就能大大提高了。</p>\n<h5 id=\"消息发送-1\"><a href=\"#消息发送-1\" class=\"headerlink\" title=\"消息发送\"></a>消息发送</h5><p>循环发送，模拟大量消息堆积现象。</p>\n<p>在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * workQueue\n     * 向队列中不停发送消息，模拟消息堆积。\n     */</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testWorkQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 队列名称</span>\n    <span class=\"token class-name\">String</span> queueName <span class=\"token operator\">=</span> <span class=\"token string\">\"simple.queue\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 消息</span>\n    <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello, message_\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 发送消息</span>\n        rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>queueName<span class=\"token punctuation\">,</span> message <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"消息接收-1\"><a href=\"#消息接收-1\" class=\"headerlink\" title=\"消息接收\"></a>消息接收</h5><p>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"simple.queue\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenWorkQueue1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者1接收到消息：【\"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"simple.queue\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenWorkQueue2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者2........接收到消息：【\"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意到这个消费者sleep模拟任务耗时。</p>\n<p>启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。可以看到消费者1很快完成了自己的25条消息。消费者2却在缓慢的处理自己的25条消息。也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。</p>\n<h5 id=\"能者多劳\"><a href=\"#能者多劳\" class=\"headerlink\" title=\"能者多劳\"></a>能者多劳</h5><p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">listener</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">simple</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">prefetch</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 每次只能获取一条消息，处理完成才能获取下一个消息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Work模型的使用：</p>\n<ul>\n<li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li>\n<li>通过设置prefetch来控制消费者预取的消息数量</li>\n</ul>\n<p>我们也知道每次发送消息都要指定交换机，为啥这里没有声明交换机，也没有使用routing_key，消息也走通了？</p>\n<p>这是因为RabbitMQ还有一个默认交换机（default exchange）：</p>\n<p>实际上是一个由消息代理预先声明好的没有名字（名字为空字符串）的直连交换机（direct exchange）。它有一个特殊的属性使得它对于简单应用特别有用处：那就是每个新建队列（queue）都会自动绑定到默认交换机上，绑定的路由键（routing key）名称与队列名称相同。</p>\n<p>举个栗子：当你声明了一个名为”hello”的队列，AMQP代理会自动将其绑定到默认交换机上，绑定（binding）的路由键名称也是为”hello”。因此，当携带着名为”hello”的路由键的消息被发送到默认交换机的时候，此消息会被默认交换机路由至名为”hello”的队列中。</p>\n<p>换句话说，默认交换机看起来貌似能够直接将消息投递给队列，尽管技术上并没有做相关的操作。所以我们发送消息时routing_key直接为队列名称了。这里就是使用了默认的直达交换机。</p>\n<h3 id=\"发布-x2F-订阅\"><a href=\"#发布-x2F-订阅\" class=\"headerlink\" title=\"发布&#x2F;订阅\"></a>发布&#x2F;订阅</h3><p>发布订阅的模型如图：</p>\n<p><img src=\"/../assets/mq/mq09.png\" alt=\"image-20210717165309625\"></p>\n<p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p>\n<ul>\n<li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li>\n<li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul>\n<li>Fanout：广播，将消息交给所有绑定到交换机的队列</li>\n<li>Direct：定向，把消息交给符合指定routing key 的队列</li>\n<li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li>\n</ul>\n</li>\n<li>Consumer：消费者和以前一样，订阅队列，没有变化</li>\n<li>Queue：消息队列和以前一样，接收消息、缓存消息。</li>\n</ul>\n<p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p>\n<h4 id=\"Fanout\"><a href=\"#Fanout\" class=\"headerlink\" title=\"Fanout\"></a>Fanout</h4><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。</p>\n<p><img src=\"/../assets/mq/mq10.png\" alt=\"image-20210717165438225\"></p>\n<p>在广播模式下，消息发送流程是这样的：</p>\n<ul>\n<li>1）  可以有多个队列</li>\n<li>2）  每个队列都要绑定到Exchange（交换机）</li>\n<li>3）  生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li>\n<li>4）  交换机把消息发送给绑定过的所有队列</li>\n<li>5）  订阅队列的消费者都能拿到消息</li>\n</ul>\n<p>设计思路：</p>\n<ul>\n<li>创建一个交换机 itcast.fanout，类型是Fanout</li>\n<li>创建两个队列fanout.queue1和fanout.queue2，绑定到交换机itcast.fanout</li>\n</ul>\n<p><img src=\"/../assets/mq/mq11.png\" alt=\"image-20210717165509466\"></p>\n<h5 id=\"声明队列和交换机\"><a href=\"#声明队列和交换机\" class=\"headerlink\" title=\"声明队列和交换机\"></a>声明队列和交换机</h5><p>Spring提供了一个接口Exchange，来表示所有不同类型的交换机：</p>\n<p><img src=\"/../assets/mq/mq12.png\" alt=\"image-20210717165552676\"></p>\n<p>在consumer中创建一个类，声明队列和交换机：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>amqp<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Binding</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>amqp<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BindingBuilder</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>amqp<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FanoutExchange</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>amqp<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Queue</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FanoutConfig</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * 声明交换机\n     * @return Fanout类型交换机\n     */</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FanoutExchange</span> <span class=\"token function\">fanoutExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FanoutExchange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itcast.fanout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 第1个队列\n     */</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">fanoutQueue1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fanout.queue1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 绑定队列和交换机\n     */</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">bindingQueue1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Queue</span> fanoutQueue1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FanoutExchange</span> fanoutExchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>fanoutQueue1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span>fanoutExchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 第2个队列\n     */</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">fanoutQueue2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fanout.queue2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 绑定队列和交换机\n     */</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">bindingQueue2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Queue</span> fanoutQueue2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FanoutExchange</span> fanoutExchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>fanoutQueue2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span>fanoutExchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"消息发送-2\"><a href=\"#消息发送-2\" class=\"headerlink\" title=\"消息发送\"></a>消息发送</h5><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFanoutExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 队列名称</span>\n    <span class=\"token class-name\">String</span> exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"itcast.fanout\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 消息</span>\n    <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello, everyone!\"</span><span class=\"token punctuation\">;</span>\n    rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"消息接收-2\"><a href=\"#消息接收-2\" class=\"headerlink\" title=\"消息接收\"></a>消息接收</h5><p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"fanout.queue1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenFanoutQueue1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者1接收到Fanout消息：【\"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"fanout.queue2\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenFanoutQueue2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者2接收到Fanout消息：【\"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>交换机的作用是什么？</p>\n<ul>\n<li>接收publisher发送的消息</li>\n<li>将消息按照规则路由到与之绑定的队列</li>\n<li>不能缓存消息，路由失败，消息丢失</li>\n<li>FanoutExchange的会将消息路由到每个绑定的队列</li>\n</ul>\n<p>声明队列、交换机、绑定关系的Bean是什么？</p>\n<ul>\n<li>Queue</li>\n<li>FanoutExchange</li>\n<li>Binding</li>\n</ul>\n<h3 id=\"Direct\"><a href=\"#Direct\" class=\"headerlink\" title=\"Direct\"></a>Direct</h3><p>在Fanout模式中，一条消息，会被<strong>所有</strong>订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p>\n<p><img src=\"/../assets/mq/mq13.png\" alt=\"image-20210717170041447\"></p>\n<p> 在Direct模型下：</p>\n<ul>\n<li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li>\n<li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li>\n<li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li>\n</ul>\n<p><strong>案例需求如下</strong>：</p>\n<ol>\n<li><p>利用@RabbitListener声明Exchange、Queue、RoutingKey</p>\n</li>\n<li><p>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</p>\n</li>\n<li><p>在publisher中编写测试方法，向itcast. direct发送消息</p>\n</li>\n</ol>\n<p><img src=\"/../assets/mq/mq14.png\" alt=\"image-20210717170223317\"></p>\n<h4 id=\"基于注解声明队列和交换机\"><a href=\"#基于注解声明队列和交换机\" class=\"headerlink\" title=\"基于注解声明队列和交换机\"></a>基于注解声明队列和交换机</h4><p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。</p>\n<p>在consumer的SpringRabbitListener中添加两个消费者，同时基于注解来声明队列和交换机：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>bindings <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@QueueBinding</span><span class=\"token punctuation\">(</span>\n    value <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Queue</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"direct.queue1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    exchange <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Exchange</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"itcast.direct\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> <span class=\"token class-name\">ExchangeTypes</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DIRECT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    key <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenDirectQueue1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者接收到direct.queue1的消息：【\"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>bindings <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@QueueBinding</span><span class=\"token punctuation\">(</span>\n    value <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Queue</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"direct.queue2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    exchange <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Exchange</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"itcast.direct\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> <span class=\"token class-name\">ExchangeTypes</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DIRECT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    key <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenDirectQueue2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者接收到direct.queue2的消息：【\"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"消息发送-3\"><a href=\"#消息发送-3\" class=\"headerlink\" title=\"消息发送\"></a>消息发送</h5><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSendDirectExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 交换机名称</span>\n    <span class=\"token class-name\">String</span> exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"itcast.direct\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 消息</span>\n    <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 发送消息</span>\n    rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>小结</p>\n<p>描述下Direct交换机与Fanout交换机的差异？</p>\n<ul>\n<li>Fanout交换机将消息路由给每一个与之绑定的队列</li>\n<li>Direct交换机根据RoutingKey判断路由给哪个队列</li>\n<li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li>\n</ul>\n<p>基于@RabbitListener注解声明队列和交换机有哪些常见注解？</p>\n<ul>\n<li>@Queue</li>\n<li>@Exchange</li>\n</ul>\n<h3 id=\"Topic\"><a href=\"#Topic\" class=\"headerlink\" title=\"Topic\"></a>Topic</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用<strong>通配符</strong>！</p>\n<p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p>\n<p> 通配符规则：</p>\n<p><code>#</code>：匹配一个或多个词</p>\n<p><code>*</code>：匹配不多不少恰好1个词</p>\n<p>举例：</p>\n<p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p>\n<p><code>item.*</code>：只能匹配<code>item.spu</code></p>\n<p>​     </p>\n<p>图示：</p>\n<p> <img src=\"/../assets/mq/mq15.png\" alt=\"image-20210717170705380\"></p>\n<p>解释：</p>\n<ul>\n<li>Queue1：绑定的是<code>china.#</code> ，因此凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到。包括china.news和china.weather</li>\n<li>Queue2：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括china.news和japan.news</li>\n</ul>\n<p>案例需求：</p>\n<p>实现思路如下：</p>\n<ol>\n<li><p>并利用@RabbitListener声明Exchange、Queue、RoutingKey</p>\n</li>\n<li><p>在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2</p>\n</li>\n<li><p>在publisher中编写测试方法，向itcast. topic发送消息</p>\n</li>\n</ol>\n<p><img src=\"/../assets/mq/mq16.png\" alt=\"image-20210717170829229\"></p>\n<h4 id=\"消息发送-4\"><a href=\"#消息发送-4\" class=\"headerlink\" title=\"消息发送\"></a>消息发送</h4><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * topicExchange\n     */</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSendTopicExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 交换机名称</span>\n    <span class=\"token class-name\">String</span> exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"itcast.topic\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 消息</span>\n    <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"喜报！孙悟空大战哥斯拉，胜!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 发送消息</span>\n    rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"china.news\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"消息接收-3\"><a href=\"#消息接收-3\" class=\"headerlink\" title=\"消息接收\"></a>消息接收</h4><p>在consumer服务的SpringRabbitListener中添加方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>bindings <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@QueueBinding</span><span class=\"token punctuation\">(</span>\n    value <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Queue</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"topic.queue1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    exchange <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Exchange</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"itcast.topic\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> <span class=\"token class-name\">ExchangeTypes</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TOPIC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    key <span class=\"token operator\">=</span> <span class=\"token string\">\"china.#\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenTopicQueue1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者接收到topic.queue1的消息：【\"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>bindings <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@QueueBinding</span><span class=\"token punctuation\">(</span>\n    value <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Queue</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"topic.queue2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    exchange <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Exchange</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"itcast.topic\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> <span class=\"token class-name\">ExchangeTypes</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TOPIC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    key <span class=\"token operator\">=</span> <span class=\"token string\">\"#.news\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenTopicQueue2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者接收到topic.queue2的消息：【\"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>小结</p>\n<p>描述下Direct交换机与Topic交换机的差异？</p>\n<ul>\n<li>Topic交换机接收的消息RoutingKey必须是多个单词，以 <code>**.**</code> 分割</li>\n<li>Topic交换机与队列绑定时的bindingKey可以指定通配符</li>\n<li><code>#</code>：代表0个或多个词</li>\n<li><code>*</code>：代表1个词</li>\n</ul>\n<h3 id=\"消息转换器\"><a href=\"#消息转换器\" class=\"headerlink\" title=\"消息转换器\"></a>消息转换器</h3><p>之前说过，Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p>\n<p><img src=\"/../assets/mq/mq17.png\" alt=\"image-20200525170410401\"></p>\n<p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。JDK序列化存在下列问题：</p>\n<ul>\n<li>数据体积过大</li>\n<li>有安全漏洞</li>\n<li>可读性差</li>\n</ul>\n<h4 id=\"配置JSON转换器\"><a href=\"#配置JSON转换器\" class=\"headerlink\" title=\"配置JSON转换器\"></a>配置JSON转换器</h4><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p>\n<p>在publisher和consumer两个服务中都引入依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.dataformat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-dataformat-xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.9.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置消息转换器。</p>\n<p>在启动类中添加一个Bean即可：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MessageConverter</span> <span class=\"token function\">jsonMessageConverter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jackson2JsonMessageConverter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>@RabbitListener注解提供的灵活性。您可以根据实际需要选择合适的消息转换器和入参类型。</p>\n<p>@RabbitListener注解支持多种消息转换器（MessageConverter），可以将接收到的消息转换为不同类型的对象。监听方法的入参为String类型，表示使用了SimpleMessageConverter将接收到的消息转换为String类型。在监听方法入参包括Message和Channel两个类型，表示接收到的消息未经转换，仍然是Message类型，同时还可以获取到Channel对象以进行手动ACK操作。</p>\n<h2 id=\"RabbitMQ-原理\"><a href=\"#RabbitMQ-原理\" class=\"headerlink\" title=\"RabbitMQ-原理\"></a>RabbitMQ-原理</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>提到RabbitMQ，就不得不提AMQP协议。AMQP协议是具有现代特征的二进制协议。是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p>\n<p>先了解一下AMQP协议中间的几个重要概念：</p>\n<ul>\n<li>Server：接收客户端的连接，实现AMQP实体服务。</li>\n<li>Connection：连接，应用程序与Server的网络连接，TCP连接。</li>\n<li>Channel：信道，消息读写等操作在信道中进行。客户端可以建立多个信道，每个信道代表一个会话任务。</li>\n<li>Message：消息，应用程序和服务器之间传送的数据，消息可以非常简单，也可以很复杂。由Properties和Body组成。Properties为外包装，可以对消息进行修饰，比如消息的优先级、延迟等高级特性；Body就是消息体内容。</li>\n<li>Virtual Host：虚拟主机，用于逻辑隔离。一个虚拟主机里面可以有若干个Exchange和Queue，同一个虚拟主机里面不能有相同名称的Exchange或Queue。</li>\n<li>Exchange：交换器，接收消息，按照路由规则将消息路由到一个或者多个队列。如果路由不到，或者返回给生产者，或者直接丢弃。RabbitMQ常用的交换器常用类型有direct、topic、fanout、headers四种，后面详细介绍。</li>\n<li>Binding：绑定，交换器和消息队列之间的虚拟连接，绑定中可以包含一个或者多个RoutingKey。</li>\n<li>RoutingKey：路由键，生产者将消息发送给交换器的时候，会发送一个RoutingKey，用来指定路由规则，这样交换器就知道把消息发送到哪个队列。路由键通常为一个“ . ”分割的字符串，例如“com.rabbitmq”。</li>\n<li>Queue：消息队列，用来保存消息，供消费者消费。</li>\n</ul>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p>AMQP 协议模型由三部分组成：生产者、消费者和服务端，执行流程如下：</p>\n<ol>\n<li>生产者是连接到 Server，建立一个连接，开启一个信道。</li>\n<li>生产者声明交换器和队列，设置相关属性，并通过路由键将交换器和队列进行绑定。</li>\n<li>消费者也需要进行建立连接，开启信道等操作，便于接收消息。</li>\n<li>生产者发送消息，发送到服务端中的虚拟主机。</li>\n<li>虚拟主机中的交换器根据路由键选择路由规则，发送到不同的消息队列中。</li>\n<li>订阅了消息队列的消费者就可以获取到消息，进行消费。</li>\n</ol>\n<p><img src=\"/../assets/mq/mq18.png\" alt=\"图片\"></p>\n<h3 id=\"消费原理\"><a href=\"#消费原理\" class=\"headerlink\" title=\"消费原理\"></a>消费原理</h3><p>我们先看几个基本概念：</p>\n<ul>\n<li>broker：每个<strong>节点</strong>运行的服务程序，功能为维护该节点的队列的增删以及转发队列操作请求。</li>\n<li>master queue：每个队列都分为一个主队列和若干个<strong>镜像队列</strong>。</li>\n<li>mirror queue：镜像队列，作为master queue的备份。在master queue所在节点挂掉之后，系统把mirror queue提升为master queue，负责处理客户端队列操作请求。注意，mirror queue只做镜像，设计目的不是为了承担客户端读写压力。</li>\n</ul>\n<p>集群中有两个节点，每个节点上有一个broker，每个broker负责本机上队列的维护，并且borker之间可以互相通信。集群中有两个队列A和B，每个队列都分为master queue和mirror queue（备份）。那么队列上的生产消费怎么实现的呢？</p>\n<p><img src=\"/../assets/mq/mq19.png\" alt=\"图片\"></p>\n<p>对于消费队列，如下图有两个consumer消费队列A，这两个consumer连在了集群的不同机器上。RabbitMQ集群中的任何一个节点都拥有集群上所有队列的元信息，所以连接到集群中的任何一个节点都可以，主要区别在于有的consumer连在master queue所在节点，有的连在非master queue节点上。</p>\n<p>因为mirror queue要和master queue保持一致，故需要同步机制，正因为一致性的限制，导致所有的读写操作都必须都操作在master queue上（想想，为啥读也要从master queue中读？和数据库读写分离是不一样的），然后由master节点同步操作到mirror queue所在的节点。即使consumer连接到了非master queue节点，该consumer的操作也会被路由到master queue所在的节点上，这样才能进行消费。</p>\n<p><img src=\"/../assets/mq/mq20.png\" alt=\"图片\"></p>\n<p>对于生成队列，原理和消费一样，如果连接到非 master queue 节点，则路由过去。</p>\n<p><img src=\"/../assets/mq/mq21.png\" alt=\"图片\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>所以，到这里小伙伴们就可以看到 RabbitMQ的不足：由于master queue单节点，导致性能瓶颈，吞吐量受限。虽然为了提高性能，内部使用了Erlang这个语言实现，但是终究摆脱不了架构设计上的致命缺陷。</p></blockquote>\n<h3 id=\"高级特性\"><a href=\"#高级特性\" class=\"headerlink\" title=\"高级特性\"></a>高级特性</h3><h4 id=\"过期时间\"><a href=\"#过期时间\" class=\"headerlink\" title=\"过期时间\"></a>过期时间</h4><p>Time To Live，也就是生存时间，是一条消息在队列中的最大存活时间，单位是毫秒，下面看看RabbitMQ过期时间特性：</p>\n<ul>\n<li>RabbitMQ可以对消息和队列设置TTL。</li>\n<li>RabbitMQ支持设置消息的过期时间，在消息发送的时候可以进行指定，每条消息的过期时间可以不同。</li>\n<li>RabbitMQ支持设置队列的过期时间，从消息入队列开始计算，直到超过了队列的超时时间配置，那么消息会变成死信，自动清除。</li>\n<li>如果两种方式一起使用，则过期时间以两者中较小的那个数值为准。</li>\n<li>当然也可以不设置TTL，不设置表示消息不会过期；如果设置为0，则表示除非此时可以直接将消息投递到消费者，否则该消息将被立即丢弃。</li>\n</ul>\n<h4 id=\"消息确认\"><a href=\"#消息确认\" class=\"headerlink\" title=\"消息确认\"></a>消息确认</h4><p>为了保证消息从队列可靠地到达消费者，RabbitMQ提供了消息确认机制。</p>\n<h5 id=\"生产者发送完后，能够获取来自消息代理的确定\"><a href=\"#生产者发送完后，能够获取来自消息代理的确定\" class=\"headerlink\" title=\"生产者发送完后，能够获取来自消息代理的确定\"></a>生产者发送完后，能够获取来自消息代理的确定</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfirmCallbackDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RabbitTemplate<span class=\"token punctuation\">.</span>ConfirmCallback</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * 通过实现 ConfirmCallback 接口，消息发送到 Broker 后触发回调，确认消息是否到达 Broker 服务器，\t\t 也就是只确认是否正确到达 Exchange 中\n     * 1.如果消息没有到exchange,则 ack=false\n     * 2.如果消息到达exchange,则 ack=true\n     * @param correlationData\n     * @param ack\n     * @param cause\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">CorrelationData</span> correlationData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> ack<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">String</span> cause<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[confirm]: id=\"</span> <span class=\"token operator\">+</span> correlationData<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 成功接收</span>\n            <span class=\"token comment\">//todo 成功处理逻辑</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 失败原因</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[confirm]: cause=\"</span> <span class=\"token operator\">+</span> cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//todo 失败处理逻辑</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"路由无法将消息投递到任何一个列队上，默认情况下会被丢弃，特定场景中，生产者需要被感知\"><a href=\"#路由无法将消息投递到任何一个列队上，默认情况下会被丢弃，特定场景中，生产者需要被感知\" class=\"headerlink\" title=\"路由无法将消息投递到任何一个列队上，默认情况下会被丢弃，特定场景中，生产者需要被感知\"></a>路由无法将消息投递到任何一个列队上，默认情况下会被丢弃，特定场景中，生产者需要被感知</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReturnCallbackDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RabbitTemplate<span class=\"token punctuation\">.</span>ReturnCallback</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * 当消息从交换机到队列失败时，该方法被调用。（若成功，则不调用）\n     * 需要注意的是：\n     *\t\t该方法调用后，ConfirmCallBack中的confirm方法也会被调用，且ack = true\n     * @param message\n     * @param replyCode\n     * @param replyText\n     * @param exchange\n     * @param routingKey\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">returnedMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> replyCode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> replyText<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> exchange<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> routingKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息主体 message : \"</span><span class=\"token operator\">+</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息主体 message : \"</span><span class=\"token operator\">+</span>replyCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"描述：\"</span><span class=\"token operator\">+</span>replyText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息使用的交换器 exchange : \"</span><span class=\"token operator\">+</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息使用的路由键 routing : \"</span><span class=\"token operator\">+</span>routingKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"消费者确定机制保证消息被消费\"><a href=\"#消费者确定机制保证消息被消费\" class=\"headerlink\" title=\"消费者确定机制保证消息被消费\"></a>消费者确定机制保证消息被消费</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageHandler</span> <span class=\"token punctuation\">&#123;</span>\n    \t\t\t\t\t\t\t\t<span class=\"token comment\">//为保证可靠性，不使用自动确认。</span>\n    <span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"directqueue\"</span><span class=\"token punctuation\">,</span> autoAck <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Channel</span> channel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicAck</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeliveryTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicNack</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeliveryTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>消费者订阅队列的时候，可以指定autoAck参数，当autoAck为true的时候，RabbitMQ采用自动确认模式，RabbitMQ自动把发送出去的消息设置为确认，然后从内存或者硬盘中删除，而不管消费者是否真正消费到了这些消息。当autoAck为false的时候，RabbitMQ会等待消费者回复的确认信号，收到确认信号之后才从内存或者磁盘中删除消息。</p>\n<p>消息确认机制是RabbitMQ消息可靠性投递的基础，只要设置autoAck参数为false，消费者就有足够的时间处理消息，不用担心处理消息的过程中消费者进程挂掉后消息丢失的问题。</p>\n<h4 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h4><p>消息的可靠性是RabbitMQ的一大特色，那么RabbitMQ是如何保证消息可靠性的呢？答案就是消息持久化。持久化可以防止在异常情况下丢失数据。RabbitMQ的持久化分为三个部分：交换器持久化、队列持久化和消息的持久化。</p>\n<p>交换器持久化可以通过在声明队列时将durable参数设置为true。如果交换器不设置持久化，那么在RabbitMQ服务重启之后，相关的交换器元数据会丢失，不过消息不会丢失，只是不能将消息发送到这个交换器了。</p>\n<p>队列的持久化能保证其本身的元数据不会因异常情况而丢失，但是不能保证内部所存储的消息不会丢失。要确保消息不会丢失，需要将其设置为持久化。队列的持久化可以通过在声明队列时将durable参数设置为true。</p>\n<p>设置了队列和消息的持久化，当RabbitMQ服务重启之后，消息依然存在。如果只设置队列持久化或者消息持久化，重启之后消息都会消失。</p>\n<p>当然，也可以将所有的消息都设置为持久化，但是这样做会影响RabbitMQ的性能，因为磁盘的写入速度比内存的写入要慢得多。</p>\n<p>对于可靠性不是那么高的消息可以不采用持久化处理以提高整体的吞吐量。鱼和熊掌不可兼得，关键在于选择和取舍。在实际中，需要根据实际情况在可靠性和吞吐量之间做一个权衡。</p>\n<h4 id=\"死信队列\"><a href=\"#死信队列\" class=\"headerlink\" title=\"死信队列\"></a>死信队列</h4><p>当消息在一个队列中变成死信之后，他能被重新发送到另一个交换器中，这个交换器成为死信交换器，与该交换器绑定的队列称为死信队列。</p>\n<p>消息变成死信有下面几种情况：</p>\n<ul>\n<li>消息被拒绝，无法被出来</li>\n<li>消息过期</li>\n<li>队列达到最大长度</li>\n</ul>\n<p>DLX（死信交换器）也是一个正常的交换器，和一般的交换器没有区别，他能在任何的队列上面被指定，实际上就是设置某个队列的属性。当这个队列中有死信的时候，RabbitMQ会自动将这个消息重新发送到设置的交换器上，进而被路由到另一个队列，我们可以监听这个队列中消息做相应的处理。</p>\n<p>死信队列有什么用？当发生异常的时候，消息不能够被消费者正常消费，被加入到了死信队列中。后续的程序可以根据死信队列中的内容分析当时发生的异常，进而改善和优化系统。</p>\n<h4 id=\"延迟队列\"><a href=\"#延迟队列\" class=\"headerlink\" title=\"延迟队列\"></a>延迟队列</h4><p>一般的队列，消息一旦进入队列就会被消费者立即消费。延迟队列就是进入该队列的消息会被消费者延迟消费，延迟队列中存储的对象是的延迟消息，“延迟消息”是指当消息被发送以后，等待特定的时间后，消费者才能拿到这个消息进行消费。</p>\n<p>延迟队列用于需要延迟工作的场景。最常见的使用场景：淘宝或者天猫我们都使用过，用户在下单之后通常有30分钟的时间进行支付，如果这30分钟之内没有支付成功，那么订单就会自动取消。</p>\n<p>除了延迟消费，延迟队列的典型应用场景还有延迟重试。比如消费者从队列里面消费消息失败了，可以延迟一段时间以后进行重试。</p>\n<h3 id=\"特性分析\"><a href=\"#特性分析\" class=\"headerlink\" title=\"特性分析\"></a>特性分析</h3><p>这里才是内容的重点，不仅需要知道Rabbit的特性，还需要知道支持这些特性的原因：</p>\n<ul>\n<li><strong>消息路由（支持）</strong>：RabbitMQ可以通过不同的交换器支持不同种类的消息路由；</li>\n<li><strong>消息有序（不支持）</strong>：当消费消息时，如果消费失败，消息会被放回队列，然后重新消费，这样会导致消息无序；</li>\n<li><strong>消息时序（非常好）</strong>：通过延时队列，可以指定消息的延时时间，过期时间TTL等；</li>\n<li><strong>容错处理（非常好）</strong>：通过交付重试和死信交换器（DLX）来处理消息处理故障；</li>\n<li><strong>伸缩（一般）</strong>：伸缩其实没有非常智能，因为即使伸缩了，master queue还是只有一个，负载还是只有这一个master queue去抗，所以我理解RabbitMQ的伸缩很弱（个人理解）。</li>\n<li><strong>持久化（不太好）</strong>：没有消费的消息，可以支持持久化，这个是为了保证机器宕机时消息可以恢复，但是消费过的消息，就会被马上删除，因为RabbitMQ设计时，就不是为了去存储历史数据的。</li>\n<li><strong>消息回溯（不支持）</strong>：因为消息不支持永久保存，所以自然就不支持回溯。</li>\n<li><strong>高吞吐（中等）</strong>：因为所有的请求的执行，最后都是在master queue，它的这个设计，导致单机性能达不到十万级的标准。</li>\n</ul>\n<h1 id=\"MQ面试篇\"><a href=\"#MQ面试篇\" class=\"headerlink\" title=\"MQ面试篇\"></a>MQ面试篇</h1><h3 id=\"1-为什么选择了RabbitMQ而不是其它的MQ？\"><a href=\"#1-为什么选择了RabbitMQ而不是其它的MQ？\" class=\"headerlink\" title=\"1.为什么选择了RabbitMQ而不是其它的MQ？\"></a>1.为什么选择了RabbitMQ而不是其它的MQ？</h3><p>如图：</p>\n<p><img src=\"/../assets/mq/mq22.png\" alt=\"image-20210925220034702\"></p>\n<p><strong>话术：</strong></p>\n<p>RabbitMQ基于面向并发的语言Erlang开发，吞吐量不如Kafka，而且消息可靠性较好，并且<strong>消息延迟极低</strong>，集群搭建比较方便。支持多种协议，并且有各种语言的客户端，比较灵活。Spring对RabbitMQ的支持也比较好，使用起来比较方便，比较符合我们公司的需求。</p>\n<h3 id=\"2-RabbitMQ如何确保消息的不丢失？\"><a href=\"#2-RabbitMQ如何确保消息的不丢失？\" class=\"headerlink\" title=\"2.RabbitMQ如何确保消息的不丢失？\"></a>2.RabbitMQ如何确保消息的不丢失？</h3><p><strong>话术：</strong></p>\n<p>RabbitMQ针对消息传递过程中可能发生问题的各个地方，给出了针对性的解决方案：</p>\n<ul>\n<li>生产者发送消息时可能因为网络问题导致消息没有到达交换机：<ul>\n<li>RabbitMQ提供了publisher confirm机制<ul>\n<li>生产者发送消息后，可以编写ConfirmCallback函数</li>\n<li>消息成功到达交换机后，RabbitMQ会调用ConfirmCallback通知消息的发送者，返回ACK</li>\n<li>消息如果未到达交换机，RabbitMQ也会调用ConfirmCallback通知消息的发送者，返回NACK</li>\n<li>消息超时未发送成功也会抛出异常</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>消息到达交换机后，如果未能到达队列，也会导致消息丢失：<ul>\n<li>RabbitMQ提供了publisher return机制<ul>\n<li>生产者可以定义ReturnCallback函数</li>\n<li>消息到达交换机，未到达队列，RabbitMQ会调用ReturnCallback通知发送者，告知失败原因</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>消息到达队列后，MQ宕机也可能导致丢失消息：<ul>\n<li>RabbitMQ提供了持久化功能，集群的主从备份功能<ul>\n<li>消息持久化，RabbitMQ会将交换机、队列、消息持久化到磁盘，宕机重启可以恢复消息</li>\n<li>镜像集群，仲裁队列，都可以提供主从备份功能，主节点宕机，从节点会自动切换为主，数据依然在</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>消息投递给消费者后，如果消费者处理不当，也可能导致消息丢失<ul>\n<li>SpringAMQP基于RabbitMQ提供了消费者确认机制、消费者重试机制，消费者失败处理策略：<ul>\n<li>消费者的确认机制：<ul>\n<li>消费者处理消息成功，未出现异常时，Spring返回ACK给RabbitMQ，消息才被移除</li>\n<li>消费者处理消息失败，抛出异常，宕机，Spring返回NACK或者不返回结果，消息不被异常</li>\n</ul>\n</li>\n<li>消费者重试机制：<ul>\n<li>默认情况下，消费者处理失败时，消息会再次回到MQ队列，然后投递给其它消费者。Spring提供的消费者重试机制，则是在处理失败后不返回NACK，而是直接在消费者本地重试。多次重试都失败后，则按照消费者失败处理策略来处理消息。避免了消息频繁入队带来的额外压力。</li>\n</ul>\n</li>\n<li>消费者失败策略：<ul>\n<li>当消费者多次本地重试失败时，消息默认会丢弃。</li>\n<li>Spring提供了Republish策略，在多次重试都失败，耗尽重试次数后，将消息重新投递给指定的异常交换机，并且会携带上异常栈信息，帮助定位问题。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-RabbitMQ如何避免消息堆积？\"><a href=\"#3-RabbitMQ如何避免消息堆积？\" class=\"headerlink\" title=\"3.RabbitMQ如何避免消息堆积？\"></a>3.RabbitMQ如何避免消息堆积？</h2><p><strong>话术：</strong></p>\n<p>消息堆积问题产生的原因往往是因为消息发送的速度超过了消费者消息处理的速度。因此解决方案无外乎以下三点：</p>\n<ul>\n<li>提高消费者处理速度</li>\n<li>增加更多消费者</li>\n<li>增加队列消息存储上限</li>\n</ul>\n<p>1）提高消费者处理速度</p>\n<p>消费者处理速度是由业务代码决定的，所以我们能做的事情包括：</p>\n<ul>\n<li>尽可能优化业务代码，提高业务性能</li>\n<li>接收到消息后，开启线程池，并发处理多个消息</li>\n</ul>\n<p>优点：成本低，改改代码即可</p>\n<p>缺点：开启线程池会带来额外的性能开销，对于高频、低时延的任务不合适。推荐任务执行周期较长的业务。</p>\n<p>2）增加更多消费者</p>\n<p>一个队列绑定多个消费者，共同争抢任务，自然可以提供消息处理的速度。</p>\n<p>优点：能用钱解决的问题都不是问题。实现简单粗暴</p>\n<p>缺点：问题是没有钱。成本太高</p>\n<p>3）增加队列消息存储上限</p>\n<p>在RabbitMQ的1.8版本后，加入了新的队列模式：Lazy Queue</p>\n<p>这种队列不会将消息保存在内存中，而是在收到消息后直接写入磁盘中，理论上没有存储上限。可以解决消息堆积问题。</p>\n<p>优点：磁盘存储更安全；存储无上限；避免内存存储带来的Page Out问题，性能更稳定；</p>\n<p>缺点：磁盘存储受到IO性能的限制，消息时效性不如内存模式，但影响不大。</p>\n<h3 id=\"4-RabbitMQ如何保证消息的有序性？\"><a href=\"#4-RabbitMQ如何保证消息的有序性？\" class=\"headerlink\" title=\"4.RabbitMQ如何保证消息的有序性？\"></a>4.RabbitMQ如何保证消息的有序性？</h3><p><strong>话术：</strong></p>\n<p>其实RabbitMQ是队列存储，天然具备先进先出的特点，只要消息的发送是有序的，那么理论上接收也是有序的。不过当一个队列绑定了多个消费者时，可能出现消息轮询投递给消费者的情况，而消费者的处理顺序就无法保证了。</p>\n<p>因此，要保证消息的有序性，需要做的下面几点：</p>\n<ul>\n<li>保证消息发送的有序性</li>\n<li>保证一组有序的消息都发送到同一个队列</li>\n<li>保证一个队列只包含一个消费者</li>\n</ul>\n<h3 id=\"5-如何防止MQ消息被重复消费？\"><a href=\"#5-如何防止MQ消息被重复消费？\" class=\"headerlink\" title=\"5.如何防止MQ消息被重复消费？\"></a>5.如何防止MQ消息被重复消费？</h3><p><strong>话术：</strong></p>\n<p>消息重复消费的原因多种多样，不可避免。所以只能从消费者端入手，只要能保证消息处理的幂等性就可以确保消息不被重复消费。</p>\n<p>而幂等性的保证又有很多方案：</p>\n<ul>\n<li>给每一条消息都添加一个唯一id，在本地记录消息表及消息状态，处理消息时基于数据库表的id唯一性做判断</li>\n<li>同样是记录消息表，利用消息状态字段实现基于乐观锁的判断，保证幂等</li>\n<li>基于业务本身的幂等性。比如根据id的删除、查询业务天生幂等；新增、修改等业务可以考虑基于数据库id唯一性、或者乐观锁机制确保幂等。本质与消息表方案类似。</li>\n</ul>\n<h3 id=\"6-如何保证RabbitMQ的高可用？\"><a href=\"#6-如何保证RabbitMQ的高可用？\" class=\"headerlink\" title=\"6.如何保证RabbitMQ的高可用？\"></a>6.如何保证RabbitMQ的高可用？</h3><p><strong>话术：</strong></p>\n<p>要实现RabbitMQ的高可用无外乎下面两点：</p>\n<ul>\n<li>做好交换机、队列、消息的持久化</li>\n<li>搭建RabbitMQ的镜像集群，做好主从备份。当然也可以使用仲裁队列代替镜像集群。</li>\n</ul>\n<h3 id=\"7-使用MQ可以解决那些问题？\"><a href=\"#7-使用MQ可以解决那些问题？\" class=\"headerlink\" title=\"7.使用MQ可以解决那些问题？\"></a>7.使用MQ可以解决那些问题？</h3><p><strong>话术：</strong></p>\n<p>RabbitMQ能解决的问题很多，例如：</p>\n<ul>\n<li>解耦合：将几个业务关联的微服务调用修改为基于MQ的异步通知，可以解除微服务之间的业务耦合。同时还提高了业务性能。</li>\n<li>流量削峰：将突发的业务请求放入MQ中，作为缓冲区。后端的业务根据自己的处理能力从MQ中获取消息，逐个处理任务。流量曲线变的平滑很多</li>\n<li>延迟队列：基于RabbitMQ的死信队列或者DelayExchange插件，可以实现消息发送后，延迟接收的效果。</li>\n</ul>\n<h3 id=\"消息确认实战\"><a href=\"#消息确认实战\" class=\"headerlink\" title=\"消息确认实战\"></a>消息确认实战</h3><p>通过消息确认机制我们可以确保我们的消息可靠送达到我们的用户手中，即使消息丢失掉，我们也可以通过进行重复分发确保用户可靠收到消息</p>\n<p>RabbitMQ为我们提供了两种方式：</p>\n<ul>\n<li>通过AMQP事务机制实现，这也是AMQP协议层面提供的解决方案；</li>\n<li>通过将channel设置成confirm模式来实现；</li>\n</ul>\n<h4 id=\"AMQP事务\"><a href=\"#AMQP事务\" class=\"headerlink\" title=\"AMQP事务\"></a>AMQP事务</h4><h5 id=\"使用java原生事务\"><a href=\"#使用java原生事务\" class=\"headerlink\" title=\"使用java原生事务\"></a>使用java原生事务</h5><p>RabbitMQ中与事务有关的主要有三个方法：</p>\n<ul>\n<li>txSelect()</li>\n<li>txCommit()</li>\n<li>txRollback()</li>\n</ul>\n<p>txSelect主要用于将当前channel设置成transaction模式，txCommit用于提交事务，txRollback用于回滚事务。</p>\n<p>生产者代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TransactionSender1</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">QUEUE_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"transition\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">/**\n\t\t * 创建连接连接到MabbitMQ\n\t\t */</span>\n\t\t<span class=\"token class-name\">ConnectionFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 设置MabbitMQ所在主机ip或者主机名</span>\n\t\tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"guest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"guest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 创建一个连接</span>\n\t\t<span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 创建一个频道</span>\n\t\t<span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 指定一个队列</span>\n\t\tchannel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token constant\">QUEUE_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 发送的消息</span>\n\t\t<span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a transaction message！\"</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 开启事务</span>\n\t\t\tchannel<span class=\"token punctuation\">.</span><span class=\"token function\">txSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 往队列中发出一条消息，使用rabbitmq默认交换机</span>\n\t\t\tchannel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">QUEUE_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 提交事务</span>\n\t\t\tchannel<span class=\"token punctuation\">.</span><span class=\"token function\">txCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 事务回滚</span>\n\t\t\tchannel<span class=\"token punctuation\">.</span><span class=\"token function\">txRollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" TransactionSender1 Sent '\"</span> <span class=\"token operator\">+</span> message <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 关闭频道和连接</span>\n\t\tchannel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconnection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用wireshark来监听网络：</p>\n<p><img src=\"/../assets/mq/mq23.png\" alt=\"wireshark\"></p>\n<p>我们可以清晰的看见消息的分发过程，与我们前面分析的一致。主要执行了四个步骤：</p>\n<ol>\n<li>Client发送Tx.Select</li>\n<li>Broker发送Tx.Select-Ok(在它之后，发送消息)</li>\n<li>Client发送Tx.Commit</li>\n<li>Broker发送Tx.Commit-Ok</li>\n</ol>\n<p>通过抛出异常来模拟发送消息错误，进行事务回滚。更改发送信息代码为：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 开启事务</span>\n\t\t\tchannel<span class=\"token punctuation\">.</span><span class=\"token function\">txSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 往队列中发出一条消息，使用rabbitmq默认交换机</span>\n\t\t\tchannel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">QUEUE_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 除以0，模拟异常，使用rabbitmq默认交换机</span>\n\t\t\t<span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 提交事务</span>\n\t\t\tchannel<span class=\"token punctuation\">.</span><span class=\"token function\">txCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 事务回滚</span>\n\t\t\tchannel<span class=\"token punctuation\">.</span><span class=\"token function\">txRollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>测试结果如下：</p>\n<p><img src=\"/../assets/mq/mq24.png\" alt=\"rollback\"></p>\n<p>可以看见事务进行了回滚，同时我们在接收端也没有收到消息。</p>\n<p>我们可以知道事务确实能够解决消息的发送者和Broker之间消息的确认，只有当消息成功被服务端Broker接收，并且接受时，事务才能提交成功，不然我们便可以在捕获异常进行事务回滚操作同时进行消息重发。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>消费者代码无需考虑，确认机制分为生产者确认和消费者确认两种方式。生产者确认可以确保Broker已经成功接收到该消息，消费者确认可以确保该消息被成功地消费。</p></blockquote>\n<h4 id=\"2、结合Spring-Boot来使用事务\"><a href=\"#2、结合Spring-Boot来使用事务\" class=\"headerlink\" title=\"2、结合Spring Boot来使用事务\"></a>2、结合Spring Boot来使用事务</h4><p>一般在Spring Boot使用RabbitMQ，主要是通过封装的RabbitTemplate模板来实现消息的发送，这里主要也是分为两种情况，使用RabbitTemplate同步发送，或者异步发送。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>发布确认和事务。(两者不可同时使用)在channel为事务时，不可引入确认模式；同样channel为确认模式下，不可使用事务。</p></blockquote>\n<p>所以在使用事务时，在application.properties中，需要将确认模式更改为false。</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token key attr-name\">spring.rabbitmq.publisher-confirms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>通过设置RabbitTemplate的channelTransacted为true，来设置事务环境，使得可以使用RabbitMQ事务。如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">template<span class=\"token punctuation\">.</span><span class=\"token function\">setChannelTransacted</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在创键RabbitTemplate时，设置事务环境</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableBeanFactory</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SCOPE_PROTOTYPE</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">RabbitTemplate</span> <span class=\"token function\">rabbitTemplateNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">RabbitTemplate</span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RabbitTemplate</span><span class=\"token punctuation\">(</span><span class=\"token function\">connectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setChannelTransacted</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>生产者代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TransactionSender2</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">AmqpTemplate</span> rabbitTemplate<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor <span class=\"token operator\">=</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">SimpleDateFormat</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> sendMsg <span class=\"token operator\">=</span> msg <span class=\"token operator\">+</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" This is a transaction message！ \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/**\n\t\t * 这里可以执行数据库操作\n\t\t * \n\t\t **/</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TransactionSender2 : \"</span> <span class=\"token operator\">+</span> sendMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transition\"</span><span class=\"token punctuation\">,</span> sendMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>@Transactional(rollbackFor &#x3D; Exception.class)，来现实事务方法。一旦方法中抛出异常，比如执行数据库操作时，就会被捕获到，同时事务将进行回滚，并且向外发送的消息将不会发送出去。而当发送消息出现异常时，也会响应执行事务回滚。</p>\n<p>通过wireshark测试：<img src=\"/../assets/mq/mq25.png\" alt=\"事务\"></p>\n<h3 id=\"confirm模式\"><a href=\"#confirm模式\" class=\"headerlink\" title=\"confirm模式\"></a>confirm模式</h3><h4 id=\"生产者-Producer-的Confirm模式\"><a href=\"#生产者-Producer-的Confirm模式\" class=\"headerlink\" title=\"生产者(Producer)的Confirm模式\"></a>生产者(Producer)的Confirm模式</h4><p>通过生产者的确认模式我们是要保证消息准确达到Broker端，而与AMQP事务不同的是Confirm是针对一条消息的，而事务是可以针对多条消息的。<img src=\"/../assets/mq/mq26.png\" alt=\"Producer-Confirm\"></p>\n<p>为了使用Confirm模式，client会发送confirm.select方法帧。通过是否设置了no-wait属性，来决定Broker端是否会以confirm.select-ok来进行应答。一旦在channel上使用confirm.select方法，channel就将处于Confirm模式。处于 transactional模式的channel不能再被设置成Confirm模式，反之亦然。</p>\n<p>在生产者将信道设置成Confirm模式，一旦信道进入Confirm模式，所有在该信道上面发布的消息都会被指派一个唯一的ID(以confirm.select为基础从1开始计数)，一旦消息被投递到所有匹配的队列之后，Broker就会发送一个确认给生产者（包含消息的唯一ID）,这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会将消息写入磁盘之后发出，Broker回传给生产者的确认消息中deliver-tag域包含了确认消息的序列号，此外Broker也可以设置basic.ack的multiple域，表示到这个序列号之前的所有消息都已经得到了处理。</p>\n<p>Confirm模式最大的好处在于它是异步的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果RabbitMQ因为自身内部错误导致消息丢失，就会发送一条basic.nack来代替basic.ack的消息，在这个情形下，basic.nack中各域值的含义与basic.ack中相应各域含义是相同的，同时requeue域的值应该被忽略。通过nack一条或多条消息， Broker表明自身无法对相应消息完成处理，并拒绝为这些消息的处理负责。在这种情况下，client可以选择将消息re-publish。</p>\n<p>在channel 被设置成Confirm模式之后，所有被publish的后续消息都将被Confirm（即 ack）或者被nack一次。但是没有对消息被Confirm的快慢做任何保证，并且同一条消息不会既被Confirm又被nack。</p>\n<h3 id=\"编程模式\"><a href=\"#编程模式\" class=\"headerlink\" title=\"编程模式\"></a>编程模式</h3><p>消息持久化的优化没有太好方法，用更好的物理存储（SAS, SSD, RAID卡）总会带来改善。生产者confirm这一环节的优化则主要在于客户端程序的优化之上。归纳起来，客户端实现生产者confirm有三种编程方式：</p>\n<p><strong>普通Confirm模式</strong>：每发送一条消息后，调用waitForConfirms()方法，等待服务器端Confirm。实际上是一种串行Confirm了，每publish一条消息之后就等待服务端Confirm，如果服务端返回false或者超时时间内未返回，客户端进行消息重传；<br><strong>批量Confirm模式</strong>：批量Confirm模式，每发送一批消息之后，调用waitForConfirms()方法，等待服务端Confirm，这种批量确认的模式极大的提高了Confirm效率，但是如果一旦出现Confirm返回false或者超时的情况，客户端需要将这一批次的消息全部重发，这会带来明显的重复消息，如果这种情况频繁发生的话，效率也会不升反降；<br><strong>异步Confirm模式</strong>：提供一个回调方法，服务端Confirm了一条或者多条消息后Client端会回调这个方法。</p>\n<h4 id=\"1、普通Confirm模式\"><a href=\"#1、普通Confirm模式\" class=\"headerlink\" title=\"1、普通Confirm模式\"></a>1、普通Confirm模式</h4><p>生产者代码：java原生方式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectionFactory</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageProperties</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringUtils</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>amqp<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AmqpTemplate</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeoutException</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 这是java原生类支持RabbitMQ，直接运行该类\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfirmSender1</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">QUEUE_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"confirm\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/**\n         * 创建连接连接到RabbitMQ\n         */</span>\n        <span class=\"token class-name\">ConnectionFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 设置RabbitMQ所在主机ip或者主机名</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"guest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"guest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 创建一个连接</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 创建一个频道</span>\n        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 指定一个队列</span>\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token constant\">QUEUE_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 发送的消息</span>\n        <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a confirm message！\"</span><span class=\"token punctuation\">;</span>\n\t开启confirm模式：生产者通过调用channel的confirmSelect方法将channel设置为<span class=\"token class-name\">Confirm</span>模式\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">confirmSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//发送持久化消息</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//第一个参数是exchangeName(默认情况下代理服务器端是存在一个\"\"名字的exchange的,</span>\n            <span class=\"token comment\">//因此如果不创建exchange的话我们可以直接将该参数设置成\"\",如果创建了exchange的话</span>\n            <span class=\"token comment\">//我们需要将该参数设置成创建的exchange的名字),第二个参数是路由键</span>\n            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">QUEUE_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageProperties</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PERSISTENT_BASIC</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\" Confirm模式， 第\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"条消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">.</span><span class=\"token function\">waitForConfirms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 进行消息重发</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行waitForConfirms耗费时间: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ms\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 关闭频道和连接</span>\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"批量Confirm模式\"><a href=\"#批量Confirm模式\" class=\"headerlink\" title=\"批量Confirm模式\"></a>批量Confirm模式</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">channel<span class=\"token punctuation\">.</span><span class=\"token function\">confirmSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n     channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">QUEUE_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageProperties</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PERSISTENT_BASIC</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\" Confirm模式， 第\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"条消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">.</span><span class=\"token function\">waitForConfirms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 进行消息重发</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在WireShark查看信息如下：</p>\n<p><img src=\"/../assets/mq/mq27.png\" alt=\"批量Confirm\"></p>\n<p>可以发现这里处理的就是在批量发送信息完毕后，再进行ACK确认。同时我们发现这里只有三个Basic.Ack，这是因为Broker对信息进行了批量处理。<img src=\"/../assets/mq/mq28.png\" alt=\"批量处理\"></p>\n<p>我们可以发现multiple的值为true，表示确认所有将比第一个参数指定的 delivery-tag 小的消息都得到确认。</p>\n<p>如果我们要对每条消息进行监听处理，可以通过在channel中添加监听器来实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">channel<span class=\"token punctuation\">.</span><span class=\"token function\">addConfirmListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ConfirmListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleNack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> deliveryTag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> multiple<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nack: deliveryTag = \"</span> <span class=\"token operator\">+</span> deliveryTag <span class=\"token operator\">+</span> <span class=\"token string\">\" multiple: \"</span> <span class=\"token operator\">+</span> multiple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleAck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> deliveryTag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> multiple<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ack: deliveryTag = \"</span> <span class=\"token operator\">+</span> deliveryTag <span class=\"token operator\">+</span> <span class=\"token string\">\" multiple: \"</span> <span class=\"token operator\">+</span> multiple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当收到Broker发送过来的ack消息时就会调用handleAck方法，收到nack时就会调用handleNack方法。</p>\n<p>不同multiple值，ack的结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">ack<span class=\"token operator\">:</span> deliveryTag <span class=\"token operator\">=</span> <span class=\"token number\">4</span> multiple<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\nack<span class=\"token operator\">:</span> deliveryTag <span class=\"token operator\">=</span> <span class=\"token number\">5</span> multiple<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n发送成功\n执行waitForConfirms耗费时间<span class=\"token operator\">:</span> <span class=\"token number\">50</span>ms<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"消费者-Consumer-的Confirm模式\"><a href=\"#消费者-Consumer-的Confirm模式\" class=\"headerlink\" title=\"消费者(Consumer)的Confirm模式\"></a>消费者(Consumer)的Confirm模式</h3><h4 id=\"手动确认和自动确认\"><a href=\"#手动确认和自动确认\" class=\"headerlink\" title=\"手动确认和自动确认\"></a>手动确认和自动确认</h4><p>为了保证消息从队列可靠地到达消费者，RabbitMQ提供消息确认机制(message acknowledgment)。消费者在声明队列时，可以指定noAck参数，当noAck&#x3D;false时，RabbitMQ会等待消费者显式发回ack信号后才从内存(和磁盘，如果是持久化消息的话)中移去消息。否则，RabbitMQ会在队列中消息被消费后立即删除它。</p>\n<p>采用消息确认机制后，只要令noAck&#x3D;false，消费者就有足够的时间处理消息(任务)，不用担心处理消息过程中消费者进程挂掉后消息丢失的问题，因为RabbitMQ会一直持有消息直到消费者显式调用basicAck为止。</p>\n<p>在Consumer中Confirm模式中分为手动确认和自动确认。</p>\n<p>手动确认主要并使用以下方法：</p>\n<p>basic.ack: 用于肯定确认，multiple参数用于多个消息确认。<br>basic.recover：是路由不成功的消息可以使用recovery重新发送到队列中。<br>basic.reject：是接收端告诉服务器这个消息我拒绝接收,不处理,可以设置是否放回到队列中还是丢掉，而且只能一次拒绝一个消息,官网中有明确说明不能批量拒绝消息，为解决批量拒绝消息才有了basicNack。<br>basic.nack：可以一次拒绝N条消息，客户端可以设置basicNack方法的multiple参数为true，服务器会拒绝指定了delivery_tag的所有未确认的消息</p>\n<p>在自动确认模式下，消息在发送后立即被认为是发送成功。 这种模式可以提高吞吐量（只要消费者能够跟上），不过会降低投递和消费者处理的安全性。 这种模式通常被称为“发后即忘”。 与手动确认模式不同，如果消费者的TCP连接或信道在成功投递之前关闭，该消息则会丢失。</p>\n","text":"RabbitMQ一篇就够了同步通讯：就像打电话，需要实时响应。 异步通讯：就像发邮件，不需要马上回复。 同步通讯存在下面的问题： 总结： 同步调用的优点： 时效性较强，可以立即得到结果 同步调用的问题： 耦合度高 性能和吞吐能力下降 有额外的资源消耗 有级联失败问题 异步通讯异步...","link":"","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[],"tags":[{"name":"RabbitMQ","slug":"RabbitMQ","count":1,"path":"api/tags/RabbitMQ.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#RabbitMQ%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86\"><span class=\"toc-text\">RabbitMQ一篇就够了</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E9%80%9A%E8%AE%AF\"><span class=\"toc-text\">同步通讯</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E9%80%9A%E8%AE%AF\"><span class=\"toc-text\">异步通讯</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E5%AF%B9%E6%AF%94%EF%BC%9A\"><span class=\"toc-text\">技术对比：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">快速入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RabbitMQ%E6%B6%88%E6%81%AF%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">RabbitMQ消息模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">入门案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#publisher%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">publisher实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#consumer%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">consumer实现</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SpringAMQP\"><span class=\"toc-text\">SpringAMQP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Basic-Queue-%E7%AE%80%E5%8D%95%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">Basic Queue 简单队列模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81\"><span class=\"toc-text\">消息发送</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6\"><span class=\"toc-text\">消息接收</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#WorkQueue\"><span class=\"toc-text\">WorkQueue</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81-1\"><span class=\"toc-text\">消息发送</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6-1\"><span class=\"toc-text\">消息接收</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%83%BD%E8%80%85%E5%A4%9A%E5%8A%B3\"><span class=\"toc-text\">能者多劳</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%91%E5%B8%83-x2F-%E8%AE%A2%E9%98%85\"><span class=\"toc-text\">发布&#x2F;订阅</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Fanout\"><span class=\"toc-text\">Fanout</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA\"><span class=\"toc-text\">声明队列和交换机</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81-2\"><span class=\"toc-text\">消息发送</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6-2\"><span class=\"toc-text\">消息接收</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Direct\"><span class=\"toc-text\">Direct</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA\"><span class=\"toc-text\">基于注解声明队列和交换机</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81-3\"><span class=\"toc-text\">消息发送</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Topic\"><span class=\"toc-text\">Topic</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81-4\"><span class=\"toc-text\">消息发送</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6-3\"><span class=\"toc-text\">消息接收</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8\"><span class=\"toc-text\">消息转换器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEJSON%E8%BD%AC%E6%8D%A2%E5%99%A8\"><span class=\"toc-text\">配置JSON转换器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RabbitMQ-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">RabbitMQ-原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">工作原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B6%88%E8%B4%B9%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">消费原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">高级特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">过期时间</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4\"><span class=\"toc-text\">消息确认</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E9%80%81%E5%AE%8C%E5%90%8E%EF%BC%8C%E8%83%BD%E5%A4%9F%E8%8E%B7%E5%8F%96%E6%9D%A5%E8%87%AA%E6%B6%88%E6%81%AF%E4%BB%A3%E7%90%86%E7%9A%84%E7%A1%AE%E5%AE%9A\"><span class=\"toc-text\">生产者发送完后，能够获取来自消息代理的确定</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E6%97%A0%E6%B3%95%E5%B0%86%E6%B6%88%E6%81%AF%E6%8A%95%E9%80%92%E5%88%B0%E4%BB%BB%E4%BD%95%E4%B8%80%E4%B8%AA%E5%88%97%E9%98%9F%E4%B8%8A%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E8%A2%AB%E4%B8%A2%E5%BC%83%EF%BC%8C%E7%89%B9%E5%AE%9A%E5%9C%BA%E6%99%AF%E4%B8%AD%EF%BC%8C%E7%94%9F%E4%BA%A7%E8%80%85%E9%9C%80%E8%A6%81%E8%A2%AB%E6%84%9F%E7%9F%A5\"><span class=\"toc-text\">路由无法将消息投递到任何一个列队上，默认情况下会被丢弃，特定场景中，生产者需要被感知</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B6%88%E8%B4%B9%E8%80%85%E7%A1%AE%E5%AE%9A%E6%9C%BA%E5%88%B6%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E8%A2%AB%E6%B6%88%E8%B4%B9\"><span class=\"toc-text\">消费者确定机制保证消息被消费</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%81%E4%B9%85%E5%8C%96\"><span class=\"toc-text\">持久化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97\"><span class=\"toc-text\">死信队列</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97\"><span class=\"toc-text\">延迟队列</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%80%A7%E5%88%86%E6%9E%90\"><span class=\"toc-text\">特性分析</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MQ%E9%9D%A2%E8%AF%95%E7%AF%87\"><span class=\"toc-text\">MQ面试篇</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E4%BA%86RabbitMQ%E8%80%8C%E4%B8%8D%E6%98%AF%E5%85%B6%E5%AE%83%E7%9A%84MQ%EF%BC%9F\"><span class=\"toc-text\">1.为什么选择了RabbitMQ而不是其它的MQ？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-RabbitMQ%E5%A6%82%E4%BD%95%E7%A1%AE%E4%BF%9D%E6%B6%88%E6%81%AF%E7%9A%84%E4%B8%8D%E4%B8%A2%E5%A4%B1%EF%BC%9F\"><span class=\"toc-text\">2.RabbitMQ如何确保消息的不丢失？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-RabbitMQ%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%B6%88%E6%81%AF%E5%A0%86%E7%A7%AF%EF%BC%9F\"><span class=\"toc-text\">3.RabbitMQ如何避免消息堆积？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-RabbitMQ%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E7%9A%84%E6%9C%89%E5%BA%8F%E6%80%A7%EF%BC%9F\"><span class=\"toc-text\">4.RabbitMQ如何保证消息的有序性？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2MQ%E6%B6%88%E6%81%AF%E8%A2%AB%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%EF%BC%9F\"><span class=\"toc-text\">5.如何防止MQ消息被重复消费？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81RabbitMQ%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">6.如何保证RabbitMQ的高可用？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E4%BD%BF%E7%94%A8MQ%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3%E9%82%A3%E4%BA%9B%E9%97%AE%E9%A2%98%EF%BC%9F\"><span class=\"toc-text\">7.使用MQ可以解决那些问题？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">消息确认实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#AMQP%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">AMQP事务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8java%E5%8E%9F%E7%94%9F%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">使用java原生事务</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%BB%93%E5%90%88Spring-Boot%E6%9D%A5%E4%BD%BF%E7%94%A8%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">2、结合Spring Boot来使用事务</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#confirm%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">confirm模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%9F%E4%BA%A7%E8%80%85-Producer-%E7%9A%84Confirm%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">生产者(Producer)的Confirm模式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">编程模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%99%AE%E9%80%9AConfirm%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">1、普通Confirm模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%B9%E9%87%8FConfirm%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">批量Confirm模式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B6%88%E8%B4%B9%E8%80%85-Consumer-%E7%9A%84Confirm%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">消费者(Consumer)的Confirm模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E7%A1%AE%E8%AE%A4%E5%92%8C%E8%87%AA%E5%8A%A8%E7%A1%AE%E8%AE%A4\"><span class=\"toc-text\">手动确认和自动确认</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"微服务-基础","uid":"cbf42b2f3cbb0eee5de5bbaaf2ed03ea","slug":"微服务-基础","date":"2023-06-09T08:53:51.000Z","updated":"2023-06-10T15:55:32.177Z","comments":true,"path":"api/articles/微服务-基础.json","keywords":null,"cover":[],"text":"Nacos配置管理Nacos除了可以做注册中心，同样可以做配置管理来使用。 统一配置管理当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。 Nacos一方面可以将配置集中管理，另...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[],"tags":[],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"微服务_入门","uid":"fe3fb8c55b48b7e212cb33aae1728c63","slug":"微服务-入门","date":"2023-06-08T09:44:27.000Z","updated":"2023-06-10T15:48:11.230Z","comments":true,"path":"api/articles/微服务-入门.json","keywords":null,"cover":[],"text":"认识微服务单体架构单体架构：将业务的所有功能集中在一个项目中开发，打成一个包部署。 单体架构的优缺点如下： 优点： 架构简单 部署成本低 缺点： 耦合度高（维护困难、升级困难） 分布式架构分布式架构：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。 分布...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"微服务","slug":"微服务","count":1,"path":"api/tags/微服务.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
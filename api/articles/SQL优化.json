{"title":"SQL优化","uid":"f515c75be93536d047fb1ea7dd55160d","slug":"SQL优化","date":"2023-05-23T13:48:45.000Z","updated":"2023-05-23T15:55:25.049Z","comments":true,"path":"api/articles/SQL优化.json","keywords":null,"cover":null,"content":"<h3 id=\"SQL优化\"><a href=\"#SQL优化\" class=\"headerlink\" title=\"SQL优化\"></a>SQL优化</h3><h4 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a><strong>插入数据</strong></h4><p><strong>insert</strong></p>\n<p>如果我们需要一次性往数据库表中插入多条记录，可以从以下三个方面进行优化。</p>\n<p> 优化方案一\t\t批量插入数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Insert into tb_test values(1,&#39;Tom&#39;),(2,&#39;Cat&#39;),(3,&#39;Jerry&#39;); <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 优化方案二\t\t手动控制事务</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">start transaction;\ninsert into tb_test values(1,&#39;Tom&#39;),(2,&#39;Cat&#39;),(3,&#39;Jerry&#39;);\ninsert into tb_test values(4,&#39;Tom&#39;),(5,&#39;Cat&#39;),(6,&#39;Jerry&#39;);\ninsert into tb_test values(7,&#39;Tom&#39;),(8,&#39;Cat&#39;),(9,&#39;Jerry&#39;);\ncommit;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>优化方案三\t\t主键顺序插入，性能要高于乱序插入。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">主键乱序插入 : 8 1 9 21 88 2 4 15 89 5 7 3\n主键顺序插入 : 1 2 3 4 5 7 8 9 15 21 88 89<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>大批量插入数据</strong></p>\n<p>如果一次性需要插入大批量数据(比如: 几百万的记录)，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令进行插入。操作如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 客户端连接服务端时，加上参数 -–local-infile\nmysql –-local-infile -u root -p\n\n-- 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关\nset global local_infile &#x3D; 1;\n\n-- 执行load指令将准备好的数据，加载到表结构中\nload data local infile &#39;&#x2F;root&#x2F;sql1.log&#39; into table tb_user fields\nterminated by &#39;,&#39; lines terminated by &#39;\\n&#39; ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>示例演示:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CREATE TABLE &#96;tb_user&#96; (\n&#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,\n&#96;username&#96; VARCHAR(50) NOT NULL,\n&#96;password&#96; VARCHAR(50) NOT NULL,\n&#96;name&#96; VARCHAR(20) NOT NULL,\n&#96;birthday&#96; DATE DEFAULT NULL,\n&#96;sex&#96; CHAR(1) DEFAULT NULL,\nPRIMARY KEY (&#96;id&#96;),\nUNIQUE KEY &#96;unique_user_username&#96; (&#96;username&#96;)\n) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8 ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>设置参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 客户端连接服务端时，加上参数 -–local-infile\nmysql –-local-infile -u root -p\n\n-- 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关\nset global local_infile &#x3D; 1;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> load加载数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">load data local infile &#39;&#x2F;root&#x2F;load_user_100w_sort.sql&#39; into table tb_user fields terminated by &#39;,&#39; lines terminated by &#39;\\n&#39; ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在load时，主键顺序插入性能高于乱序插入</p>\n<h4 id=\"主键优化\"><a href=\"#主键优化\" class=\"headerlink\" title=\"主键优化\"></a><strong>主键优化</strong></h4><p>主键顺序插入的性能是要高于乱序插入的具体原因</p>\n<p>数据组织方式</p>\n<p>在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表(index organized table IOT)。行数据，都是存储在聚集索引的叶子节点上的。而我们之前也讲解过InnoDB的逻辑结构图：</p>\n","feature":true,"text":"SQL优化插入数据insert 如果我们需要一次性往数据库表中插入多条记录，可以从以下三个方面进行优化。 优化方案一 批量插入数据 Insert into tb_test values(1,&#39;Tom&#39;),(2,&#39;Cat&#39;),(3,&#39;Jerr...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":10,"path":"api/tags/MySQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SQL%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">SQL优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">插入数据</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E9%94%AE%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">主键优化</span></a></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Docker","uid":"a48e6dda0c21e40880cba7e763278b04","slug":"Docker","date":"2023-05-24T11:24:04.000Z","updated":"2023-05-24T12:33:11.159Z","comments":true,"path":"api/articles/Docker.json","keywords":null,"cover":[],"text":"Docker的用途Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？ Docker允许开发中将应用、依赖、函数库、配置一起打包，形成可移植镜像 Docker应用运行在容器中，使用沙箱机制，相互隔离 Docker如何解决开发、测试、生产环境有差异的问题？ Dock...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Spring MVC","uid":"84c6604e94d88eec227a0b74aad54f6e","slug":"Spring-MVC","date":"2023-05-20T12:40:51.000Z","updated":"2023-05-20T12:44:54.770Z","comments":true,"path":"api/articles/Spring-MVC.json","keywords":null,"cover":null,"text":"Spring MVCWebMvcConfigurerWebMvcConfigurer是一个Spring MVC的配置接口，它提供了一些方法来进行各种配置。WebConfig类实现了这个接口，因此可以利用这些方法来配置应用程序。例如：addInterceptors()：用于添加拦截...","link":"","photos":[],"count_time":{"symbolsCount":370,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Spring","slug":"Spring","count":10,"path":"api/tags/Spring.json"},{"name":"Spring MVC","slug":"Spring-MVC","count":1,"path":"api/tags/Spring-MVC.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true}}
{"title":"微服务-基础","uid":"cbf42b2f3cbb0eee5de5bbaaf2ed03ea","slug":"微服务-基础","date":"2023-06-09T08:53:51.000Z","updated":"2023-06-10T15:55:32.177Z","comments":true,"path":"api/articles/微服务-基础.json","keywords":null,"cover":[],"content":"<h1 id=\"Nacos配置管理\"><a href=\"#Nacos配置管理\" class=\"headerlink\" title=\"Nacos配置管理\"></a>Nacos配置管理</h1><p>Nacos除了可以做注册中心，同样可以做配置管理来使用。</p>\n<h2 id=\"统一配置管理\"><a href=\"#统一配置管理\" class=\"headerlink\" title=\"统一配置管理\"></a>统一配置管理</h2><p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714164426792.png\" alt=\"image-20210714164426792\"></p>\n<p>Nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</p>\n<h3 id=\"在nacos中添加配置文件\"><a href=\"#在nacos中添加配置文件\" class=\"headerlink\" title=\"在nacos中添加配置文件\"></a>在nacos中添加配置文件</h3><p>如何在nacos中管理配置呢？</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714164742924.png\" alt=\"image-20210714164742924\"></p>\n<p>然后在弹出的表单中，填写配置信息：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714164856664.png\" alt=\"image-20210714164856664\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：项目的核心配置，需要热更新的配置才有放到nacos管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。</p></blockquote>\n<h3 id=\"从微服务拉取配置\"><a href=\"#从微服务拉取配置\" class=\"headerlink\" title=\"从微服务拉取配置\"></a>从微服务拉取配置</h3><p>微服务要拉取nacos中管理的配置，并且与本地的application.yml配置合并，才能完成项目启动。</p>\n<p>但如果尚未读取application.yml，又如何得知nacos地址呢？</p>\n<p>因此spring引入了一种新的配置文件：bootstrap.yaml文件，会在application.yml<strong>之前</strong>被读取，流程如下：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/L0iFYNF.png\" alt=\"img\"></p>\n<p>1）引入nacos-config依赖</p>\n<p>首先，在user-service服务中，引入nacos-config的客户端依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!--nacos配置管理依赖--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-config<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2）添加bootstrap.yaml</p>\n<p>然后，在user-service中添加一个bootstrap.yaml文件，内容如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> userservice <span class=\"token comment\"># 服务名称</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">active</span><span class=\"token punctuation\">:</span> dev <span class=\"token comment\">#开发环境，这里是dev </span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span> <span class=\"token comment\"># Nacos地址</span>\n      <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">file-extension</span><span class=\"token punctuation\">:</span> yaml <span class=\"token comment\"># 文件后缀名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里会根据spring.cloud.nacos.server-addr获取nacos地址，再根据</p>\n<p><code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code>作为文件id，来读取配置。</p>\n<p>本例中，就是去读取<code>userservice-dev.yaml</code>：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714170845901.png\" alt=\"image-20210714170845901\"></p>\n<p>3）读取nacos配置</p>\n<p>在user-service中的UserController中添加业务逻辑，读取pattern.dateformat配置：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714170337448.png\" alt=\"image-20210714170337448\"></p>\n<p>代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>pojo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserService</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocalDateTime</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DateTimeFormatter</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;pattern.dateformat&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> dateformat<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"now\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span>dateformat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// ...略</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>在页面访问，可以看到效果：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714170449612.png\" alt=\"image-20210714170449612\"></p>\n<h3 id=\"配置热更新\"><a href=\"#配置热更新\" class=\"headerlink\" title=\"配置热更新\"></a>配置热更新</h3><p>我们最终的目的，是修改nacos中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>。</p>\n<p>要实现配置热更新，可以使用两种方式：</p>\n<h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h3><p>在@Value注入的变量所在类上添加注解@RefreshScope：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714171036335.png\" alt=\"image-20210714171036335\"></p>\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p>使用@ConfigurationProperties注解代替@Value注解。</p>\n<p>在user-service服务中，添加一个类，读取patterrn.dateformat属性：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConfigurationProperties</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"pattern\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PatternProperties</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> dateformat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在UserController中使用这个类代替@Value：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714171316124.png\" alt=\"image-20210714171316124\"></p>\n<p>完整代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PatternProperties</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>pojo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserService</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocalDateTime</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DateTimeFormatter</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PatternProperties</span> patternProperties<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"now\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span>patternProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getDateformat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 略</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"配置共享\"><a href=\"#配置共享\" class=\"headerlink\" title=\"配置共享\"></a>配置共享</h3><p>其实微服务启动时，会去nacos读取多个配置文件，例如：</p>\n<ul>\n<li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p>\n</li>\n<li><p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p>\n</li>\n</ul>\n<p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。</p>\n<p>下面我们通过案例来测试配置共享</p>\n<h4 id=\"添加一个环境共享配置\"><a href=\"#添加一个环境共享配置\" class=\"headerlink\" title=\"添加一个环境共享配置\"></a>添加一个环境共享配置</h4><p>我们在nacos中添加一个userservice.yaml文件：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714173233650.png\" alt=\"image-20210714173233650\"></p>\n<h4 id=\"在user-service中读取共享配置\"><a href=\"#在user-service中读取共享配置\" class=\"headerlink\" title=\"在user-service中读取共享配置\"></a>在user-service中读取共享配置</h4><p>在user-service服务中，修改PatternProperties类，读取新添加的属性：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714173324231.png\" alt=\"image-20210714173324231\"></p>\n<p>在user-service服务中，修改UserController，添加一个方法：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714173721309.png\" alt=\"image-20210714173721309\"></p>\n<h4 id=\"运行两个UserApplication，使用不同的profile\"><a href=\"#运行两个UserApplication，使用不同的profile\" class=\"headerlink\" title=\"运行两个UserApplication，使用不同的profile\"></a>运行两个UserApplication，使用不同的profile</h4><p>修改UserApplication2这个启动项，改变其profile值：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714173538538.png\" alt=\"image-20210714173538538\"></p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714173519963.png\" alt=\"image-20210714173519963\"></p>\n<p>这样，UserApplication(8081)使用的profile是dev，UserApplication2(8082)使用的profile是test。</p>\n<p>启动UserApplication和UserApplication2</p>\n<p>访问<a href=\"http://localhost:8081/user/prop%EF%BC%8C%E7%BB%93%E6%9E%9C%EF%BC%9A\">http://localhost:8081/user/prop，结果：</a></p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714174313344.png\" alt=\"image-20210714174313344\"></p>\n<p>访问<a href=\"http://localhost:8082/user/prop%EF%BC%8C%E7%BB%93%E6%9E%9C%EF%BC%9A\">http://localhost:8082/user/prop，结果：</a></p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714174424818.png\" alt=\"image-20210714174424818\"></p>\n<p>可以看出来，不管是dev，还是test环境，都读取到了envSharedValue这个属性的值。</p>\n<h4 id=\"配置共享的优先级\"><a href=\"#配置共享的优先级\" class=\"headerlink\" title=\"配置共享的优先级\"></a>配置共享的优先级</h4><p>当nacos、服务本地同时出现相同属性时，优先级有高低之分：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714174623557.png\" alt=\"image-20210714174623557\"></p>\n<h2 id=\"搭建Nacos集群\"><a href=\"#搭建Nacos集群\" class=\"headerlink\" title=\"搭建Nacos集群\"></a>搭建Nacos集群</h2><p>&#x2F;&#x2F;略</p>\n<h1 id=\"Feign远程调用\"><a href=\"#Feign远程调用\" class=\"headerlink\" title=\"Feign远程调用\"></a>Feign远程调用</h1><p>先来看以前利用RestTemplate发起远程调用的代码：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714174814204.png\" alt=\"image-20210714174814204\"></p>\n<p>存在下面的问题：</p>\n<p>•代码可读性差，编程体验不统一</p>\n<p>•参数复杂URL难以维护</p>\n<h3 id=\"Feign替代RestTemplate\"><a href=\"#Feign替代RestTemplate\" class=\"headerlink\" title=\"Feign替代RestTemplate\"></a>Feign替代RestTemplate</h3><p>Fegin的使用步骤如下：</p>\n<h4 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h4><p>我们在order-service服务的pom文件中引入feign的依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-openfeign<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"添加注解\"><a href=\"#添加注解\" class=\"headerlink\" title=\"添加注解\"></a>添加注解</h4><p>在order-service的启动类添加注解开启Feign的功能：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714175102524.png\" alt=\"image-20210714175102524\"></p>\n<h4 id=\"编写Feign的客户端\"><a href=\"#编写Feign的客户端\" class=\"headerlink\" title=\"编写Feign的客户端\"></a>编写Feign的客户端</h4><p>在order-service中新建一个接口，内容如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>order<span class=\"token punctuation\">.</span>pojo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>openfeign<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FeignClient</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userservice\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserClient</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">User</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p>\n<ul>\n<li>服务名称：userservice</li>\n<li>请求方式：GET</li>\n<li>请求路径：&#x2F;user&#x2F;{id}</li>\n<li>请求参数：Long id</li>\n<li>返回值类型：User</li>\n</ul>\n<p>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了。</p>\n<p>测试</p>\n<p>修改order-service中的OrderService类中的queryOrderById方法，使用Feign客户端代替RestTemplate：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714175415087.png\" alt=\"image-20210714175415087\"></p>\n<p>小结</p>\n<p>使用Feign的步骤：</p>\n<p>① 引入依赖</p>\n<p>② 添加@EnableFeignClients注解</p>\n<p>③ 编写FeignClient接口</p>\n<p>④ 使用FeignClient中定义的方法代替RestTemplate</p>\n<h4 id=\"自定义配置\"><a href=\"#自定义配置\" class=\"headerlink\" title=\"自定义配置\"></a>自定义配置</h4><p>Feign可以支持很多的自定义配置，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>feign.Logger.Level</strong></td>\n<td>修改日志级别</td>\n<td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td>\n</tr>\n<tr>\n<td>feign.codec.Decoder</td>\n<td>响应结果的解析器</td>\n<td>http远程调用的结果做解析，例如解析json字符串为java对象</td>\n</tr>\n<tr>\n<td>feign.codec.Encoder</td>\n<td>请求参数编码</td>\n<td>将请求参数编码，便于通过http请求发送</td>\n</tr>\n<tr>\n<td>feign.Contract</td>\n<td>支持的注解格式</td>\n<td>默认是SpringMVC的注解</td>\n</tr>\n<tr>\n<td>feign. Retryer</td>\n<td>失败重试机制</td>\n<td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td>\n</tr>\n</tbody></table>\n<p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p>\n<h5 id=\"配置文件方式\"><a href=\"#配置文件方式\" class=\"headerlink\" title=\"配置文件方式\"></a>配置文件方式</h5><p>基于配置文件修改feign的日志级别可以针对单个服务：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">feign</span><span class=\"token punctuation\">:</span>  \n  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span> \n      <span class=\"token key atrule\">userservice</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 针对某个微服务的配置</span>\n        <span class=\"token key atrule\">loggerLevel</span><span class=\"token punctuation\">:</span> FULL <span class=\"token comment\">#  日志级别 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也可以针对所有服务：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">feign</span><span class=\"token punctuation\">:</span>  \n  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span> \n      <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span>\n        <span class=\"token key atrule\">loggerLevel</span><span class=\"token punctuation\">:</span> FULL <span class=\"token comment\">#  日志级别 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>而日志的级别分为四种：</p>\n<ul>\n<li>NONE：不记录任何日志信息，这是默认值。</li>\n<li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li>\n<li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li>\n<li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li>\n</ul>\n<h5 id=\"Java代码方式\"><a href=\"#Java代码方式\" class=\"headerlink\" title=\"Java代码方式\"></a>Java代码方式</h5><p>也可以基于Java代码来修改日志级别，先声明一个类，然后声明一个Logger.Level的对象：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultFeignConfiguration</span>  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Logger<span class=\"token punctuation\">.</span>Level</span> <span class=\"token function\">feignLogLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Logger<span class=\"token punctuation\">.</span>Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BASIC</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 日志级别为BASIC</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients这个注解中：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableFeignClients</span><span class=\"token punctuation\">(</span>defaultConfiguration <span class=\"token operator\">=</span> <span class=\"token class-name\">DefaultFeignConfiguration</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient这个注解中：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"userservice\"</span><span class=\"token punctuation\">,</span> configuration <span class=\"token operator\">=</span> <span class=\"token class-name\">DefaultFeignConfiguration</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"Feign使用优化\"><a href=\"#Feign使用优化\" class=\"headerlink\" title=\"Feign使用优化\"></a>Feign使用优化</h4><p>Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：</p>\n<p>•URLConnection：默认实现，不支持连接池</p>\n<p>•Apache HttpClient ：支持连接池</p>\n<p>•OKHttp：支持连接池</p>\n<p>因此提高Feign的性能主要手段就是使用<strong>连接池</strong>代替默认的URLConnection。</p>\n<p>这里我们用Apache的HttpClient来演示。</p>\n<p>1）引入依赖</p>\n<p>在order-service的pom文件中引入Apache的HttpClient依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!--httpClient的依赖 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.github.openfeign<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>feign-httpclient<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2）配置连接池</p>\n<p>在order-service的application.yml中添加配置：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">feign</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># default全局的配置</span>\n        <span class=\"token key atrule\">loggerLevel</span><span class=\"token punctuation\">:</span> BASIC <span class=\"token comment\"># 日志级别，BASIC就是基本的请求和响应信息</span>\n  <span class=\"token key atrule\">httpclient</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 开启feign对HttpClient的支持</span>\n    <span class=\"token key atrule\">max-connections</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> <span class=\"token comment\"># 最大的连接数</span>\n    <span class=\"token key atrule\">max-connections-per-route</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span> <span class=\"token comment\"># 每个路径的最大连接数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来，在FeignClientFactoryBean中的loadBalance方法中打断点：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714185925910.png\" alt=\"image-20210714185925910\"></p>\n<p>Debug方式启动order-service服务，可以看到这里的client，底层就是Apache HttpClient：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714190041542.png\" alt=\"image-20210714190041542\"></p>\n<p>总结，Feign的优化：</p>\n<p>1.日志级别尽量用basic</p>\n<p>2.使用HttpClient或OKHttp代替URLConnection</p>\n<p>①  引入feign-httpClient依赖</p>\n<p>②  配置文件开启httpClient功能，设置连接池参数</p>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><p>观察可以发现，Feign的客户端与服务提供者的controller代码非常相似：</p>\n<p>feign客户端：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714190542730.png\" alt=\"image-20210714190542730\"></p>\n<p>UserController：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714190528450.png\" alt=\"image-20210714190528450\"></p>\n<p>有没有一种办法简化这种重复的代码编写呢？</p>\n<h5 id=\"继承方式\"><a href=\"#继承方式\" class=\"headerlink\" title=\"继承方式\"></a>继承方式</h5><p>一样的代码可以通过继承来共享：</p>\n<p>1）定义一个API接口，利用定义方法，并基于SpringMVC注解做声明。</p>\n<p>2）Feign客户端和Controller都集成改接口</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714190640857.png\" alt=\"image-20210714190640857\"></p>\n<p>优点：</p>\n<ul>\n<li>简单</li>\n<li>实现了代码共享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li><p>服务提供方、服务消费方紧耦合</p>\n</li>\n<li><p>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解</p>\n</li>\n</ul>\n<h5 id=\"实现基于抽取的最佳实践\"><a href=\"#实现基于抽取的最佳实践\" class=\"headerlink\" title=\"实现基于抽取的最佳实践\"></a>实现基于抽取的最佳实践</h5><p>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用。</p>\n<p>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用。</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714214041796.png\" alt=\"image-20210714214041796\"></p>\n<p>项目结构：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714204656214.png\" alt=\"image-20210714204656214\"></p>\n<p>在feign-api中然后引入feign的starter依赖</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-openfeign<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714205221970.png\" alt=\"image-20210714205221970\"></p>\n<h5 id=\"在order-service中使用feign-api\"><a href=\"#在order-service中使用feign-api\" class=\"headerlink\" title=\"在order-service中使用feign-api\"></a>在order-service中使用feign-api</h5><p>首先，删除order-service中的UserClient、User、DefaultFeignConfiguration等类或接口。</p>\n<p>在order-service的pom文件中中引入feign-api的依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>cn.itcast.demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>feign-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包</p>\n<p>重启后，发现服务报错了：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714205623048.png\" alt=\"image-20210714205623048\"></p>\n<p>这是因为UserClient现在在cn.itcast.feign.clients包下，</p>\n<p>而order-service的@EnableFeignClients注解是在cn.itcast.order包下，不在同一个包，无法扫描到UserClient。</p>\n<h5 id=\"解决扫描包问题\"><a href=\"#解决扫描包问题\" class=\"headerlink\" title=\"解决扫描包问题\"></a>解决扫描包问题</h5><p>方式一：</p>\n<p>指定Feign应该扫描的包：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableFeignClients</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token string\">\"cn.itcast.feign.clients\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>方式二：</p>\n<p>指定需要加载的Client接口：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableFeignClients</span><span class=\"token punctuation\">(</span>clients <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">UserClient</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h1 id=\"Gateway服务网关\"><a href=\"#Gateway服务网关\" class=\"headerlink\" title=\"Gateway服务网关\"></a>Gateway服务网关</h1><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p>\n<p>网关的<strong>核心功能特性</strong>：</p>\n<ul>\n<li>请求路由</li>\n<li>权限控制</li>\n<li>限流</li>\n</ul>\n<p>架构图：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714210131152.png\" alt=\"image-20210714210131152\"></p>\n<p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p>\n<p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p>\n<p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p>\n<p>在SpringCloud中网关的实现包括两种：</p>\n<ul>\n<li>gateway</li>\n<li>zuul</li>\n</ul>\n<p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux ，属于响应式编程的实现，具备更好的性能。</p>\n<h3 id=\"gateway快速入门\"><a href=\"#gateway快速入门\" class=\"headerlink\" title=\"gateway快速入门\"></a>gateway快速入门</h3><p>网关的基本路由功能。</p>\n<p>基本步骤如下：</p>\n<ol>\n<li>创建SpringBoot工程gateway，引入网关依赖</li>\n<li>编写启动类</li>\n<li>编写基础配置和路由规则</li>\n<li>启动网关服务进行测试</li>\n</ol>\n<h4 id=\"创建gateway服务，引入依赖\"><a href=\"#创建gateway服务，引入依赖\" class=\"headerlink\" title=\"创建gateway服务，引入依赖\"></a>创建gateway服务，引入依赖</h4><p>引入依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!--网关--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-gateway<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--nacos服务发现依赖--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"编写启动类\"><a href=\"#编写启动类\" class=\"headerlink\" title=\"编写启动类\"></a>编写启动类</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>gateway</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GatewayApplication</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GatewayApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"编写基础配置和路由规则\"><a href=\"#编写基础配置和路由规则\" class=\"headerlink\" title=\"编写基础配置和路由规则\"></a>编写基础配置和路由规则</h4><p>创建application.yml文件，内容如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10010</span> <span class=\"token comment\"># 网关端口</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gateway <span class=\"token comment\"># 服务名称</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span> <span class=\"token comment\"># nacos地址</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 网关路由配置</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">-</span>service <span class=\"token comment\"># 路由id（路由名称），自定义只要唯一即可</span>\n          <span class=\"token comment\"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span>\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//userservice <span class=\"token comment\"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 路由断言，也就是判断请求是否符合路由规则的条件</span>\n            <span class=\"token punctuation\">-</span> Path=/user/<span class=\"token important\">**</span> <span class=\"token comment\"># 这个是按照路径匹配，只要以/user/开头就符合要求</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址。</p>\n<p>本例中，我们将 <code>/user/**</code>开头的请求，代理到<code>lb://userservice</code>，lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。</p>\n<h4 id=\"网关路由的流程图\"><a href=\"#网关路由的流程图\" class=\"headerlink\" title=\"网关路由的流程图\"></a>网关路由的流程图</h4><p>整个访问的流程如下：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714211742956.png\" alt=\"image-20210714211742956\"></p>\n<p>总结：</p>\n<p>网关搭建步骤：</p>\n<ol>\n<li><p>创建项目，引入nacos服务发现和gateway依赖</p>\n</li>\n<li><p>配置application.yml，包括服务基本信息、nacos地址、路由</p>\n</li>\n</ol>\n<p>路由配置包括：</p>\n<ol>\n<li><p>路由id：路由的唯一标示</p>\n</li>\n<li><p>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</p>\n</li>\n<li><p>路由断言（predicates）：判断路由的规则，</p>\n</li>\n<li><p>路由过滤器（filters）：对请求或响应做处理</p>\n</li>\n</ol>\n<p>接下来，就重点来学习路由断言和路由过滤器的详细知识</p>\n<h4 id=\"断言工厂\"><a href=\"#断言工厂\" class=\"headerlink\" title=\"断言工厂\"></a>断言工厂</h4><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p>\n<p>例如Path&#x3D;&#x2F;user&#x2F;**是按照路径匹配，这个规则是由</p>\n<p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p>\n<p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p>\n<table>\n<thead>\n<tr>\n<th><strong>名称</strong></th>\n<th><strong>说明</strong></th>\n<th><strong>示例</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>After</td>\n<td>是某个时间点后的请求</td>\n<td>-  After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td>\n</tr>\n<tr>\n<td>Before</td>\n<td>是某个时间点之前的请求</td>\n<td>-  Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td>\n</tr>\n<tr>\n<td>Between</td>\n<td>是某两个时间点之前的请求</td>\n<td>-  Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver],  2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td>\n</tr>\n<tr>\n<td>Cookie</td>\n<td>请求必须包含某些cookie</td>\n<td>- Cookie&#x3D;chocolate, ch.p</td>\n</tr>\n<tr>\n<td>Header</td>\n<td>请求必须包含某些header</td>\n<td>- Header&#x3D;X-Request-Id, \\d+</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>请求必须是访问某个host（域名）</td>\n<td>-  Host&#x3D;<strong>.somehost.org,</strong>.anotherhost.org</td>\n</tr>\n<tr>\n<td>Method</td>\n<td>请求方式必须是指定方式</td>\n<td>- Method&#x3D;GET,POST</td>\n</tr>\n<tr>\n<td>Path</td>\n<td>请求路径必须符合指定规则</td>\n<td>- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td>\n</tr>\n<tr>\n<td>Query</td>\n<td>请求参数必须包含指定参数</td>\n<td>- Query&#x3D;name, Jack或者-  Query&#x3D;name</td>\n</tr>\n<tr>\n<td>RemoteAddr</td>\n<td>请求者的ip必须是指定范围</td>\n<td>- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td>\n</tr>\n<tr>\n<td>Weight</td>\n<td>权重处理</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"过滤器工厂\"><a href=\"#过滤器工厂\" class=\"headerlink\" title=\"过滤器工厂\"></a>过滤器工厂</h3><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714212312871.png\" alt=\"image-20210714212312871\"></p>\n<h4 id=\"路由过滤器的种类\"><a href=\"#路由过滤器的种类\" class=\"headerlink\" title=\"路由过滤器的种类\"></a>路由过滤器的种类</h4><p>Spring提供了31种不同的路由过滤器工厂。例如：</p>\n<table>\n<thead>\n<tr>\n<th><strong>名称</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AddRequestHeader</td>\n<td>给当前请求添加一个请求头</td>\n</tr>\n<tr>\n<td>RemoveRequestHeader</td>\n<td>移除请求中的一个请求头</td>\n</tr>\n<tr>\n<td>AddResponseHeader</td>\n<td>给响应结果中添加一个响应头</td>\n</tr>\n<tr>\n<td>RemoveResponseHeader</td>\n<td>从响应结果中移除有一个响应头</td>\n</tr>\n<tr>\n<td><strong>RequestRateLimiter</strong></td>\n<td>限制请求的流量</td>\n</tr>\n</tbody></table>\n<h4 id=\"请求头过滤器\"><a href=\"#请求头过滤器\" class=\"headerlink\" title=\"请求头过滤器\"></a>请求头过滤器</h4><p>下面我们以AddRequestHeader 为例来讲解。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>需求</strong>：给所有进入userservice的请求添加一个请求头：Truth&#x3D;itcast is freaking awesome!</p></blockquote>\n<p>只需要修改gateway服务的application.yml文件，添加路由过滤即可：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">-</span>service \n        <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//userservice \n        <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span> \n        <span class=\"token punctuation\">-</span> Path=/user/<span class=\"token important\">**</span> \n        <span class=\"token key atrule\">filters</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 过滤器</span>\n        <span class=\"token punctuation\">-</span> AddRequestHeader=Truth<span class=\"token punctuation\">,</span> Itcast is freaking awesome<span class=\"token tag\">!</span> <span class=\"token comment\"># 添加请求头</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。</p>\n<h4 id=\"默认过滤器\"><a href=\"#默认过滤器\" class=\"headerlink\" title=\"默认过滤器\"></a>默认过滤器</h4><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">-</span>service \n        <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//userservice \n        <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span> \n        <span class=\"token punctuation\">-</span> Path=/user/<span class=\"token important\">**</span>\n      <span class=\"token key atrule\">default-filters</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 默认过滤项</span>\n      <span class=\"token punctuation\">-</span> AddRequestHeader=Truth<span class=\"token punctuation\">,</span> Itcast is freaking awesome<span class=\"token tag\">!</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>小结</p>\n<p>过滤器的作用是什么？</p>\n<p>① 对路由的请求或响应做加工处理，比如添加请求头</p>\n<p>② 配置在路由下的过滤器只对当前路由的请求生效</p>\n<p>defaultFilters的作用是什么？</p>\n<p>① 对所有路由都生效的过滤器</p>\n<h3 id=\"全局过滤器\"><a href=\"#全局过滤器\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h3><h4 id=\"全局过滤器作用\"><a href=\"#全局过滤器作用\" class=\"headerlink\" title=\"全局过滤器作用\"></a>全局过滤器作用</h4><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p>\n<p>定义方式是<strong>实现GlobalFilter接口</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">GlobalFilter</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     *  处理当前请求，有必要的话通过&#123;@link GatewayFilterChain&#125;将请求交给下一个过滤器处理\n     *\n     * @param exchange 请求上下文，里面可以获取Request、Response等信息\n     * @param chain 用来把请求委托给下一个过滤器 \n     * @return &#123;@code Mono&lt;Void>&#125; 返回标示当前过滤器业务结束\n     */</span>\n    <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GatewayFilterChain</span> chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在filter中编写自定义逻辑，可以实现下列功能：</p>\n<ul>\n<li>登录状态判断</li>\n<li>权限校验</li>\n<li>请求限流等</li>\n</ul>\n<h4 id=\"自定义全局过滤器\"><a href=\"#自定义全局过滤器\" class=\"headerlink\" title=\"自定义全局过滤器\"></a>自定义全局过滤器</h4><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p>\n<ul>\n<li><p>参数中是否有authorization，</p>\n</li>\n<li><p>authorization参数值是否为admin</p>\n</li>\n</ul>\n<p>如果同时满足则放行，否则拦截</p>\n<p>实现：</p>\n<p>在gateway中定义一个过滤器：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>gateway<span class=\"token punctuation\">.</span>filters</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>gateway<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GatewayFilterChain</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>gateway<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GlobalFilter</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Order</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpStatus</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerWebExchange</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">reactor<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>publisher<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mono</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Order</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorizeFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GlobalFilter</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GatewayFilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 1.获取请求参数</span>\n        <span class=\"token class-name\">MultiValueMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params <span class=\"token operator\">=</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueryParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2.获取authorization参数</span>\n        <span class=\"token class-name\">String</span> auth <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"authorization\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 3.校验</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 放行</span>\n            <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 4.拦截</span>\n        <span class=\"token comment\">// 4.1.禁止访问，设置状态码</span>\n        exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FORBIDDEN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 4.2.结束处理</span>\n        <span class=\"token keyword\">return</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"过滤器执行顺序\"><a href=\"#过滤器执行顺序\" class=\"headerlink\" title=\"过滤器执行顺序\"></a>过滤器执行顺序</h4><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p>\n<p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714214228409.png\" alt=\"image-20210714214228409\"></p>\n<p>排序的规则是什么呢？</p>\n<ul>\n<li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li>\n<li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li>\n<li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li>\n<li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li>\n</ul>\n<p>详细内容，可以查看源码：</p>\n<p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p>\n<p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p>\n<h3 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h3><p>跨域：域名不一致就是跨域，主要包括：</p>\n<ul>\n<li><p>域名不同： <a href=\"http://www.taobao.com/\">www.taobao.com</a> 和 <a href=\"http://www.taobao.org/\">www.taobao.org</a> 和 <a href=\"http://www.jd.com/\">www.jd.com</a> 和 miaosha.jd.com</p>\n</li>\n<li><p>域名相同，端口不同：localhost:8080和localhost8081</p>\n</li>\n</ul>\n<p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p>\n<p>解决方案：CORS，这个以前应该学习过，这里不再赘述了。不知道的小伙伴可以查看<a href=\"https://www.ruanyifeng.com/blog/2016/04/cors.html\">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>\n<p>模拟跨域问题</p>\n<p>可以在浏览器控制台看到下面的错误：</p>\n<p><img src=\"/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210714215832675.png\" alt=\"image-20210714215832675\"></p>\n<p>从localhost:8090访问localhost:10010，端口不同，显然是跨域的请求。</p>\n<h4 id=\"解决跨域问题\"><a href=\"#解决跨域问题\" class=\"headerlink\" title=\"解决跨域问题\"></a>解决跨域问题</h4><p>在gateway服务的application.yml文件中，添加下面的配置：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 。。。</span>\n      <span class=\"token key atrule\">globalcors</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 全局的跨域处理</span>\n        <span class=\"token key atrule\">add-to-simple-url-handler-mapping</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 解决options请求被拦截问题</span>\n        <span class=\"token key atrule\">corsConfigurations</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">'[/**]'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">allowedOrigins</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 允许哪些网站的跨域请求 </span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"http://localhost:8090\"</span>\n            <span class=\"token key atrule\">allowedMethods</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 允许的跨域ajax的请求方式</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"GET\"</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"POST\"</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"DELETE\"</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"PUT\"</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"OPTIONS\"</span>\n            <span class=\"token key atrule\">allowedHeaders</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span> <span class=\"token comment\"># 允许在请求中携带的头信息</span>\n            <span class=\"token key atrule\">allowCredentials</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 是否允许携带cookie</span>\n            <span class=\"token key atrule\">maxAge</span><span class=\"token punctuation\">:</span> <span class=\"token number\">360000</span> <span class=\"token comment\"># 这次跨域检测的有效期</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n","text":"Nacos配置管理Nacos除了可以做注册中心，同样可以做配置管理来使用。 统一配置管理当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。 Nacos一方面可以将配置集中管理，另...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">Nacos配置管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">统一配置管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8nacos%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">在nacos中添加配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8B%89%E5%8F%96%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">从微服务拉取配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E7%83%AD%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">配置热更新</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F%E4%B8%80\"><span class=\"toc-text\">方式一</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F%E4%BA%8C\"><span class=\"toc-text\">方式二</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB\"><span class=\"toc-text\">配置共享</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E7%8E%AF%E5%A2%83%E5%85%B1%E4%BA%AB%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">添加一个环境共享配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8user-service%E4%B8%AD%E8%AF%BB%E5%8F%96%E5%85%B1%E4%BA%AB%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">在user-service中读取共享配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E4%B8%A4%E4%B8%AAUserApplication%EF%BC%8C%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84profile\"><span class=\"toc-text\">运行两个UserApplication，使用不同的profile</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">配置共享的优先级</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%90%AD%E5%BB%BANacos%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">搭建Nacos集群</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Feign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">Feign远程调用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Feign%E6%9B%BF%E4%BB%A3RestTemplate\"><span class=\"toc-text\">Feign替代RestTemplate</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">引入依赖</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">添加注解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99Feign%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF\"><span class=\"toc-text\">编写Feign的客户端</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">自定义配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">配置文件方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Java%E4%BB%A3%E7%A0%81%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">Java代码方式</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Feign%E4%BD%BF%E7%94%A8%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">Feign使用优化</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">最佳实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">继承方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8E%E6%8A%BD%E5%8F%96%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">实现基于抽取的最佳实践</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%9C%A8order-service%E4%B8%AD%E4%BD%BF%E7%94%A8feign-api\"><span class=\"toc-text\">在order-service中使用feign-api</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%89%AB%E6%8F%8F%E5%8C%85%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">解决扫描包问题</span></a></li></ol></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Gateway%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3\"><span class=\"toc-text\">Gateway服务网关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gateway%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">gateway快速入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAgateway%E6%9C%8D%E5%8A%A1%EF%BC%8C%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">创建gateway服务，引入依赖</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E5%90%AF%E5%8A%A8%E7%B1%BB\"><span class=\"toc-text\">编写启动类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99\"><span class=\"toc-text\">编写基础配置和路由规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BD%91%E5%85%B3%E8%B7%AF%E7%94%B1%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE\"><span class=\"toc-text\">网关路由的流程图</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%AD%E8%A8%80%E5%B7%A5%E5%8E%82\"><span class=\"toc-text\">断言工厂</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4%E5%99%A8%E5%B7%A5%E5%8E%82\"><span class=\"toc-text\">过滤器工厂</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E7%A7%8D%E7%B1%BB\"><span class=\"toc-text\">路由过滤器的种类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E5%A4%B4%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">请求头过滤器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">默认过滤器</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">全局过滤器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">全局过滤器作用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">自定义全局过滤器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4%E5%99%A8%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">过滤器执行顺序</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">跨域问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">解决跨域问题</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"进程与线程","uid":"89180d8ad200729090513c1ce4f6ad31","slug":"进程与线程","date":"2023-06-09T12:37:40.000Z","updated":"2023-06-10T15:56:22.316Z","comments":true,"path":"api/articles/进程与线程.json","keywords":null,"cover":null,"text":"进程与线程进程程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。 进程就...","link":"","photos":[],"count_time":{"symbolsCount":571,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"RabbitMQ","uid":"eb3ef2175aab37a16c1ed443702f7a7d","slug":"RabbitMQ-基础","date":"2023-06-08T14:02:31.000Z","updated":"2023-06-10T15:33:25.442Z","comments":true,"path":"api/articles/RabbitMQ-基础.json","keywords":null,"cover":[],"text":"RabbitMQ一篇就够了同步通讯：就像打电话，需要实时响应。 异步通讯：就像发邮件，不需要马上回复。 同步通讯存在下面的问题： 总结： 同步调用的优点： 时效性较强，可以立即得到结果 同步调用的问题： 耦合度高 性能和吞吐能力下降 有额外的资源消耗 有级联失败问题 异步通讯异步...","link":"","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[],"tags":[{"name":"RabbitMQ","slug":"RabbitMQ","count":1,"path":"api/tags/RabbitMQ.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
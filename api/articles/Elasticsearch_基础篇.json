{"title":"Elasticsearch_基础篇","uid":"9a2b3773acf33bcdefc6399e19f6d844","slug":"Elasticsearch_基础篇","date":"2023-06-24T08:27:29.000Z","updated":"2023-06-24T15:41:15.088Z","comments":true,"path":"api/articles/Elasticsearch_基础篇.json","keywords":null,"cover":[],"content":"<h2 id=\"倒排索引\"><a href=\"#倒排索引\" class=\"headerlink\" title=\"倒排索引\"></a>倒排索引</h2><p>倒排索引的概念是基于MySQL这样的正向索引而言的。</p>\n<h3 id=\"正向索引\"><a href=\"#正向索引\" class=\"headerlink\" title=\"正向索引\"></a>正向索引</h3><p>那么什么是正向索引呢？例如给下表（tb_goods）中的id创建索引：</p>\n<p><img src=\"/../assets/ES/image-20210720195531539.png\" alt=\"image-20210720195531539\"></p>\n<p>如果是根据id查询，那么直接走索引，查询速度非常快。</p>\n<p>如果是基于title做模糊查询，只能逐行扫描数据，也就是全表扫描，随着数据量增加，其查询效率也会越来越低</p>\n<h3 id=\"倒排索引-1\"><a href=\"#倒排索引-1\" class=\"headerlink\" title=\"倒排索引\"></a>倒排索引</h3><p>倒排索引中有两个非常重要的概念：</p>\n<ul>\n<li>文档（<code>Document</code>）：用来搜索的数据，其中的每一条数据就是一个文档。</li>\n<li>词条（<code>Term</code>）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条</li>\n</ul>\n<p>创建倒排索引是对正向索引的一种特殊处理，流程如下：</p>\n<ul>\n<li>将每一个文档的数据利用算法分词，得到一个个词条</li>\n<li>创建表，每行数据包括词条、词条所在文档id、位置等信息</li>\n<li>因为词条唯一性，可以给词条创建索引，例如hash表结构索引</li>\n</ul>\n<p>如图：</p>\n<p><img src=\"/../assets/ES/image-20210720200457207.png\" alt=\"image-20210720200457207\"></p>\n<p>倒排索引的<strong>搜索流程</strong>如下（以搜索”华为手机”为例）：</p>\n<p>1）用户输入条件<code>&quot;华为手机&quot;</code>进行搜索</p>\n<p>2）对用户输入内容<strong>分词</strong>，得到词条：<code>华为</code>、<code>手机</code></p>\n<p>3）拿着词条在倒排索引中查找，可以得到包含词条的文档id：1、2、3</p>\n<p>4）拿着文档id到正向索引中查找具体文档。</p>\n<p>如图：</p>\n<p><img src=\"/../assets/ES/image-20210720201115192.png\" alt=\"image-20210720201115192\"></p>\n<h3 id=\"正向和倒排\"><a href=\"#正向和倒排\" class=\"headerlink\" title=\"正向和倒排\"></a>正向和倒排</h3><p>那么为什么一个叫做正向索引，一个叫做倒排索引呢？</p>\n<ul>\n<li><p><strong>正向索引</strong>是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是<strong>根据文档找词条的过程</strong>。</p>\n</li>\n<li><p>而<strong>倒排索引</strong>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是<strong>根据词条找文档的过程</strong>。</p>\n</li>\n</ul>\n<p><strong>正向索引</strong>：</p>\n<ul>\n<li>优点：<ul>\n<li>可以给多个字段创建索引</li>\n<li>根据索引字段搜索、排序速度非常快</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描。</li>\n</ul>\n</li>\n</ul>\n<p><strong>倒排索引</strong>：</p>\n<ul>\n<li>优点：<ul>\n<li>根据词条搜索、模糊搜索时，速度非常快</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>只能给词条创建索引，而不是字段</li>\n<li>无法根据字段做排序</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文档和字段\"><a href=\"#文档和字段\" class=\"headerlink\" title=\"文档和字段\"></a>文档和字段</h3><p>elasticsearch是面向<strong>文档（Document）</strong>存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为json格式后存储在elasticsearch中：</p>\n<p><img src=\"/../assets/ES/image-20210720202707797.png\" alt=\"image-20210720202707797\"></p>\n<p>而Json文档中往往包含很多的<strong>字段（Field）</strong>，类似于数据库中的列。</p>\n<h3 id=\"索引和映射\"><a href=\"#索引和映射\" class=\"headerlink\" title=\"索引和映射\"></a>索引和映射</h3><p><strong>索引（Index）</strong>，就是相同类型的文档的集合。</p>\n<p>例如：</p>\n<ul>\n<li>所有用户文档，就可以组织在一起，称为用户的索引；</li>\n<li>所有商品的文档，可以组织在一起，称为商品的索引；</li>\n<li>所有订单的文档，可以组织在一起，称为订单的索引；</li>\n</ul>\n<p><img src=\"/../assets/ES/image-20210720203022172.png\" alt=\"image-20210720203022172\"></p>\n<p>因此，我们可以把索引当做是数据库中的表。</p>\n<p>数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。因此，索引库中就有<strong>映射（mapping）</strong>，是索引中文档的字段约束信息，类似表的结构约束。</p>\n<h3 id=\"mysql与elasticsearch\"><a href=\"#mysql与elasticsearch\" class=\"headerlink\" title=\"mysql与elasticsearch\"></a>mysql与elasticsearch</h3><p>我们统一的把mysql与elasticsearch的概念做一下对比：</p>\n<table>\n<thead>\n<tr>\n<th><strong>MySQL</strong></th>\n<th><strong>Elasticsearch</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Table</td>\n<td>Index</td>\n<td>索引(index)，就是文档的集合，类似数据库的表(table)</td>\n</tr>\n<tr>\n<td>Row</td>\n<td>Document</td>\n<td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td>\n</tr>\n<tr>\n<td>Column</td>\n<td>Field</td>\n<td>字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td>\n</tr>\n<tr>\n<td>Schema</td>\n<td>Mapping</td>\n<td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td>\n</tr>\n<tr>\n<td>SQL</td>\n<td>DSL</td>\n<td>DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td>\n</tr>\n</tbody></table>\n<p>两者各自有自己的擅长支出：</p>\n<ul>\n<li><p>Mysql：擅长事务类型操作，可以确保数据的安全和一致性</p>\n</li>\n<li><p>Elasticsearch：擅长海量数据的搜索、分析、计算</p>\n</li>\n</ul>\n<p>在企业中，往往是两者结合使用：</p>\n<ul>\n<li>对安全性要求较高的写操作，使用mysql实现</li>\n<li>对查询性能要求较高的搜索需求，使用elasticsearch实现</li>\n<li>两者再基于某种方式，实现数据的同步，保证一致性</li>\n</ul>\n<p><img src=\"/../assets/ES/image-20210720203534945.png\" alt=\"image-20210720203534945\"></p>\n<h1 id=\"索引库操作\"><a href=\"#索引库操作\" class=\"headerlink\" title=\"索引库操作\"></a>索引库操作</h1><h3 id=\"mapping映射属性\"><a href=\"#mapping映射属性\" class=\"headerlink\" title=\"mapping映射属性\"></a>mapping映射属性</h3><p>mapping是对索引库中文档的约束，常见的mapping属性包括：</p>\n<ul>\n<li>type：字段数据类型，常见的简单类型有：<ul>\n<li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）</li>\n<li>数值：long、integer、short、byte、double、float、</li>\n<li>布尔：boolean</li>\n<li>日期：date</li>\n<li>对象：object</li>\n</ul>\n</li>\n<li>index：是否创建索引，默认为true</li>\n<li>analyzer：使用哪种分词器</li>\n<li>properties：该字段的子字段</li>\n</ul>\n<p>例如下面的json文档：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"weight\"</span><span class=\"token operator\">:</span> <span class=\"token number\">52.1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"isMarried\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"info\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"黑马程序员Java讲师\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zy@itcast.cn\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"score\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">99.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98.9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"firstName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"云\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"lastName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"赵\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对应的每个字段映射（mapping）：</p>\n<ul>\n<li>age：类型为 integer；参与搜索，因此需要index为true；无需分词器</li>\n<li>weight：类型为float；参与搜索，因此需要index为true；无需分词器</li>\n<li>isMarried：类型为boolean；参与搜索，因此需要index为true；无需分词器</li>\n<li>info：类型为字符串，需要分词，因此是text；参与搜索，因此需要index为true；分词器可以用ik_smart</li>\n<li>email：类型为字符串，但是不需要分词，因此是keyword；不参与搜索，因此需要index为false；无需分词器</li>\n<li>score：虽然是数组，但是我们只看元素的类型，类型为float；参与搜索，因此需要index为true；无需分词器</li>\n<li>name：类型为object，需要定义多个子属性<ul>\n<li>name.firstName；类型为字符串，但是不需要分词，因此是keyword；参与搜索，因此需要index为true；无需分词器</li>\n<li>name.lastName；类型为字符串，但是不需要分词，因此是keyword；参与搜索，因此需要index为true；无需分词器</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"索引库的CRUD\"><a href=\"#索引库的CRUD\" class=\"headerlink\" title=\"索引库的CRUD\"></a>索引库的CRUD</h2><p>用Kibana编写DSL的方式</p>\n<h3 id=\"创建索引库和映射\"><a href=\"#创建索引库和映射\" class=\"headerlink\" title=\"创建索引库和映射\"></a>创建索引库和映射</h3><h4 id=\"基本语法：\"><a href=\"#基本语法：\" class=\"headerlink\" title=\"基本语法：\"></a>基本语法：</h4><ul>\n<li>请求方式：PUT</li>\n<li>请求路径：&#x2F;索引库名，可以自定义</li>\n<li>请求参数：mapping映射</li>\n</ul>\n<p>格式：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">PUT /索引库名称\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"mappings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"字段名\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"analyzer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ik_smart\"</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"字段名2\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"keyword\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"false\"</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"字段名3\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token property\">\"子字段\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"keyword\"</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// ...略</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">PUT /heima\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"mappings\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"properties\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">\"info\"</span>:<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"text\"</span>,\n        <span class=\"token string\">\"analyzer\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ik_smart\"</span>\n      <span class=\"token punctuation\">&#125;</span>,\n      <span class=\"token string\">\"email\"</span>:<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"keyword\"</span>,\n        <span class=\"token string\">\"index\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"false\"</span>\n      <span class=\"token punctuation\">&#125;</span>,\n      <span class=\"token string\">\"name\"</span>:<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"properties\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token string\">\"firstName\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"keyword\"</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>,\n      // <span class=\"token punctuation\">..</span>. 略\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"查询索引库\"><a href=\"#查询索引库\" class=\"headerlink\" title=\"查询索引库\"></a>查询索引库</h3><p><strong>基本语法</strong>：</p>\n<ul>\n<li><p>请求方式：GET</p>\n</li>\n<li><p>请求路径：&#x2F;索引库名</p>\n</li>\n<li><p>请求参数：无</p>\n</li>\n</ul>\n<p><strong>格式</strong>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">GET &#x2F;索引库名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例</strong>：</p>\n<p><img src=\"/../assets/ES/image-20210720211019329.png\" alt=\"image-20210720211019329\"></p>\n<h3 id=\"修改索引库\"><a href=\"#修改索引库\" class=\"headerlink\" title=\"修改索引库\"></a>修改索引库</h3><p>倒排索引结构虽然不复杂，但是一旦数据结构改变（比如改变了分词器），就需要重新创建倒排索引。因此索引库<strong>一旦创建，无法修改mapping</strong>。</p>\n<p>虽然无法修改mapping中<strong>已有</strong>的字段，但是却允许添加新的字段到mapping中，因为不会对倒排索引产生影响。</p>\n<p><strong>语法说明</strong>：</p>\n<p>添加字段：<code>PUT /索引库名/_mapping</code></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">PUT /索引库名/_mapping\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"新字段名\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"integer\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>示例</strong>：</p>\n<p><img src=\"/../assets/ES/image-20210720212357390.png\" alt=\"image-20210720212357390\"></p>\n<h3 id=\"删除索引库\"><a href=\"#删除索引库\" class=\"headerlink\" title=\"删除索引库\"></a>删除索引库</h3><p><strong>语法：</strong></p>\n<ul>\n<li><p>请求方式：DELETE</p>\n</li>\n<li><p>请求路径：&#x2F;索引库名</p>\n</li>\n<li><p>请求参数：无</p>\n</li>\n</ul>\n<p><strong>格式：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">DELETE &#x2F;索引库名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在kibana中测试：</p>\n<p><img src=\"/../assets/ES/image-20210720212123420.png\" alt=\"image-20210720212123420\"></p>\n<h1 id=\"文档操作\"><a href=\"#文档操作\" class=\"headerlink\" title=\"文档操作\"></a>文档操作</h1><h3 id=\"新增文档\"><a href=\"#新增文档\" class=\"headerlink\" title=\"新增文档\"></a>新增文档</h3><p><strong>语法：</strong></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">POST /索引库名/_doc/文档id\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"字段1\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"值1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"字段2\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"值2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"字段3\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"子属性1\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"值3\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"子属性2\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"值4\"</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">POST /heima/_doc/<span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"info\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"黑马程序员Java讲师\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zy@itcast.cn\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"firstName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"云\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"lastName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"赵\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"查询文档\"><a href=\"#查询文档\" class=\"headerlink\" title=\"查询文档\"></a>查询文档</h2><p><strong>语法：</strong></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">GET /<span class=\"token punctuation\">&#123;</span>索引库名称<span class=\"token punctuation\">&#125;</span>/_doc/<span class=\"token punctuation\">&#123;</span>id<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>通过kibana查看数据：</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>heima<span class=\"token operator\">/</span>_doc<span class=\"token operator\">/</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>查看结果：</strong></p>\n<p><img src=\"/../assets/ES/image-20210720213345003.png\" alt=\"image-20210720213345003\"></p>\n<h2 id=\"删除文档\"><a href=\"#删除文档\" class=\"headerlink\" title=\"删除文档\"></a>删除文档</h2><p>删除使用DELETE请求，同样，需要根据id进行删除：</p>\n<p><strong>语法：</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token constant\">DELETE</span> <span class=\"token operator\">/</span><span class=\"token punctuation\">&#123;</span>索引库名<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span>_doc<span class=\"token operator\">/</span>id值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"># 根据id删除数据\nDELETE /heima/_doc/<span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"修改文档\"><a href=\"#修改文档\" class=\"headerlink\" title=\"修改文档\"></a>修改文档</h2><p>修改有两种方式：</p>\n<ul>\n<li>全量修改：直接覆盖原来的文档</li>\n<li>增量修改：修改文档中的部分字段</li>\n</ul>\n<h3 id=\"全量修改\"><a href=\"#全量修改\" class=\"headerlink\" title=\"全量修改\"></a>全量修改</h3><p>全量修改是覆盖原来的文档，其本质是：</p>\n<ul>\n<li>根据指定的id删除文档</li>\n<li>新增一个相同id的文档</li>\n</ul>\n<p><strong>注意</strong>：如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了。</p>\n<p><strong>语法：</strong></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">PUT /<span class=\"token punctuation\">&#123;</span>索引库名<span class=\"token punctuation\">&#125;</span>/_doc/文档id\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"字段1\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"值1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"字段2\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"值2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ... 略</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">PUT /heima/_doc/<span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"info\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"黑马程序员高级Java讲师\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zy@itcast.cn\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"firstName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"云\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"lastName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"赵\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"增量修改\"><a href=\"#增量修改\" class=\"headerlink\" title=\"增量修改\"></a>增量修改</h3><p>增量修改是只修改指定id匹配的文档中的部分字段。</p>\n<p><strong>语法：</strong></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">POST /<span class=\"token punctuation\">&#123;</span>索引库名<span class=\"token punctuation\">&#125;</span>/_update/文档id\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"doc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token property\">\"字段名\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"新的值\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">POST /heima/_update/<span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"doc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ZhaoYun@itcast.cn\"</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"RestAPI\"><a href=\"#RestAPI\" class=\"headerlink\" title=\"RestAPI\"></a>RestAPI</h1><p>ES官方提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是组装DSL语句，通过http请求发送给ES。官方文档地址：<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/index.html\">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p>\n<p>其中的Java Rest Client又包括两种：</p>\n<ul>\n<li>Java Low Level Rest Client</li>\n<li>Java High Level Rest Client</li>\n</ul>\n<h2 id=\"导入Demo工程\"><a href=\"#导入Demo工程\" class=\"headerlink\" title=\"导入Demo工程\"></a>导入Demo工程</h2><h3 id=\"导入数据\"><a href=\"#导入数据\" class=\"headerlink\" title=\"导入数据\"></a>导入数据</h3><p>数据结构如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tb_hotel<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'酒店id'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'酒店名称；例：7天酒店'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>address<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'酒店地址；例：航头路'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>price<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'酒店价格；例：329'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>score<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'酒店评分；例：45，就是4.5分'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>brand<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'酒店品牌；例：如家'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>city<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'所在城市；例：上海'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>star_name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'酒店星级，从低到高分别是：1星到5星，1钻到5钻'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>business<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'商圈；例：虹桥'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>latitude<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'纬度；例：31.2497'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>longitude<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'经度；例：120.3925'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>pic<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'酒店图片；例:/img/1.jpg'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"mapping映射分析\"><a href=\"#mapping映射分析\" class=\"headerlink\" title=\"mapping映射分析\"></a>mapping映射分析</h3><p>创建索引库，最关键的是mapping映射，而mapping映射要考虑的信息包括：</p>\n<p>来看下酒店数据的索引库结构:</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">PUT /hotel\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"mappings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"keyword\"</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"analyzer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ik_max_word\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"copy_to\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"address\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"keyword\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"integer\"</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"score\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"integer\"</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"brand\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"keyword\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"copy_to\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"city\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"keyword\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"copy_to\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"starName\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"keyword\"</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"business\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"keyword\"</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"location\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"geo_point\"</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"pic\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"keyword\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"all\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"analyzer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ik_max_word\"</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>几个特殊字段说明：</p>\n<ul>\n<li>location：地理坐标，里面包含精度、纬度</li>\n<li>all：一个组合字段，其目的是将多字段的值 利用copy_to合并，提供给用户搜索</li>\n</ul>\n<p>地理坐标说明：</p>\n<p><img src=\"/../assets/ES/image-20210720222110126.png\" alt=\"image-20210720222110126\"></p>\n<p>copy_to说明：</p>\n<p><img src=\"/../assets/ES/image-20210720222221516.png\" alt=\"image-20210720222221516\"></p>\n<h3 id=\"初始化RestClient\"><a href=\"#初始化RestClient\" class=\"headerlink\" title=\"初始化RestClient\"></a>初始化RestClient</h3><p>在elasticsearch提供的API中，与elasticsearch一切交互都封装在一个名为RestHighLevelClient的类中，必须先完成这个对象的初始化，建立与elasticsearch的连接。</p>\n<p>分为三步：</p>\n<p>1）引入es的RestHighLevelClient依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.elasticsearch.client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>elasticsearch-rest-high-level-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2）因为SpringBoot默认的ES版本是7.6.2，所以我们需要覆盖默认的ES版本：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>elasticsearch.version</span><span class=\"token punctuation\">></span></span>7.12.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>elasticsearch.version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>3）初始化RestHighLevelClient：</p>\n<p>初始化的代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">RestHighLevelClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestHighLevelClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RestClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">HttpHost</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://192.168.150.101:9200\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>创建一个测试类HotelIndexTest，然后将初始化的代码编写在@BeforeEach方法中：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>hotel</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpHost</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestHighLevelClient</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AfterEach</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeforeEach</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HotelIndexTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestHighLevelClient</span> client<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@BeforeEach</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestHighLevelClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RestClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>\n                <span class=\"token class-name\">HttpHost</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://192.168.150.101:9200\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@AfterEach</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"创建索引库\"><a href=\"#创建索引库\" class=\"headerlink\" title=\"创建索引库\"></a>创建索引库</h3><p>创建索引库的API如下：</p>\n<p><img src=\"/../assets/ES/image-20210720223049408.png\" alt=\"image-20210720223049408\"></p>\n<p>代码分为三步：</p>\n<ul>\n<li>创建Request对象。因为是创建索引库的操作，因此Request是CreateIndexRequest。</li>\n<li>添加请求参数，其实就是DSL的JSON参数部分。因为json字符串很长，这里是定义了静态字符串常量MAPPING_TEMPLATE，让代码看起来更加优雅。</li>\n<li>发送请求，client.indices()方法的返回值是IndicesClient类型，封装了所有与索引库操作有关的方法。</li>\n</ul>\n<h3 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h3><p>在hotel-demo的cn.itcast.hotel.constants包下，创建一个类，定义mapping映射的JSON字符串常量：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>hotel<span class=\"token punctuation\">.</span>constants</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HotelConstants</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">MAPPING_TEMPLATE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"  \\\"mappings\\\": &#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"    \\\"properties\\\": &#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      \\\"id\\\": &#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"type\\\": \\\"keyword\\\"\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      &#125;,\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      \\\"name\\\":&#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"type\\\": \\\"text\\\",\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"analyzer\\\": \\\"ik_max_word\\\",\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"copy_to\\\": \\\"all\\\"\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      &#125;,\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      \\\"address\\\":&#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"type\\\": \\\"keyword\\\",\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"index\\\": false\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      &#125;,\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      \\\"price\\\":&#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"type\\\": \\\"integer\\\"\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      &#125;,\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      \\\"score\\\":&#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"type\\\": \\\"integer\\\"\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      &#125;,\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      \\\"brand\\\":&#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"type\\\": \\\"keyword\\\",\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"copy_to\\\": \\\"all\\\"\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      &#125;,\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      \\\"city\\\":&#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"type\\\": \\\"keyword\\\",\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"copy_to\\\": \\\"all\\\"\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      &#125;,\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      \\\"starName\\\":&#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"type\\\": \\\"keyword\\\"\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      &#125;,\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      \\\"business\\\":&#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"type\\\": \\\"keyword\\\"\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      &#125;,\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      \\\"location\\\":&#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"type\\\": \\\"geo_point\\\"\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      &#125;,\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      \\\"pic\\\":&#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"type\\\": \\\"keyword\\\",\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"index\\\": false\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      &#125;,\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      \\\"all\\\":&#123;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"type\\\": \\\"text\\\",\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"        \\\"analyzer\\\": \\\"ik_max_word\\\"\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"      &#125;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"    &#125;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"  &#125;\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>在hotel-demo中的HotelIndexTest测试类中，编写单元测试，实现创建索引：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">createHotelIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.创建Request对象</span>\n    <span class=\"token class-name\">CreateIndexRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CreateIndexRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.准备请求的参数：DSL语句</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MAPPING_TEMPLATE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">XContentType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.发送请求</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"删除索引库-1\"><a href=\"#删除索引库-1\" class=\"headerlink\" title=\"删除索引库\"></a>删除索引库</h2><p>删除索引库的DSL语句非常简单：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">DELETE /hotel<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>三步走：</p>\n<ul>\n<li>1）创建Request对象。这次是DeleteIndexRequest对象</li>\n<li>2）准备参数。这里是无参</li>\n<li>3）发送请求。改用delete方法</li>\n</ul>\n<p>在hotel-demo中的HotelIndexTest测试类中，编写单元测试，实现删除索引：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testDeleteHotelIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.创建Request对象</span>\n    <span class=\"token class-name\">DeleteIndexRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteIndexRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.发送请求</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"判断索引库是否存在\"><a href=\"#判断索引库是否存在\" class=\"headerlink\" title=\"判断索引库是否存在\"></a>判断索引库是否存在</h2><p>判断索引库是否存在，本质就是查询，对应的DSL是：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">GET /hotel<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>因此与删除的Java代码流程是类似的。依然是三步走：</p>\n<ul>\n<li>1）创建Request对象。这次是GetIndexRequest对象</li>\n<li>2）准备参数。这里是无参</li>\n<li>3）发送请求。改用<code>exists</code>方法</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testExistsHotelIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.创建Request对象</span>\n    <span class=\"token class-name\">GetIndexRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetIndexRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.发送请求</span>\n    <span class=\"token keyword\">boolean</span> exists <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.输出</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>exists <span class=\"token operator\">?</span> <span class=\"token string\">\"索引库已经存在！\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"索引库不存在！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"RestClient操作文档\"><a href=\"#RestClient操作文档\" class=\"headerlink\" title=\"RestClient操作文档\"></a>RestClient操作文档</h1><ul>\n<li>初始化RestHighLevelClient</li>\n<li>利用IHotelService去查询数据库，所以注入这个接口</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>hotel</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>hotel<span class=\"token punctuation\">.</span>pojo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Hotel</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>hotel<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IHotelService</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AfterEach</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeforeEach</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HotelDocumentTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">IHotelService</span> hotelService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestHighLevelClient</span> client<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@BeforeEach</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestHighLevelClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RestClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>\n                <span class=\"token class-name\">HttpHost</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://192.168.150.101:9200\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@AfterEach</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"新增文档-1\"><a href=\"#新增文档-1\" class=\"headerlink\" title=\"新增文档\"></a>新增文档</h2><p>我们要将数据库的酒店数据查询出来，写入elasticsearch中。</p>\n<h3 id=\"索引库实体类\"><a href=\"#索引库实体类\" class=\"headerlink\" title=\"索引库实体类\"></a>索引库实体类</h3><p>数据库查询后的结果是一个Hotel类型的对象。结构如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tb_hotel\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hotel</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> brand<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> city<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> starName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> business<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> longitude<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> latitude<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pic<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>与我们的索引库结构存在差异：</p>\n<ul>\n<li>longitude和latitude需要合并为location</li>\n</ul>\n<p>因此，我们需要定义一个新的类型，与索引库结构吻合：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>hotel<span class=\"token punctuation\">.</span>pojo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoArgsConstructor</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HotelDoc</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> brand<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> city<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> starName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> business<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> location<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pic<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HotelDoc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Hotel</span> hotel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> hotel<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> hotel<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> hotel<span class=\"token punctuation\">.</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> hotel<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> hotel<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> hotel<span class=\"token punctuation\">.</span><span class=\"token function\">getBrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>city <span class=\"token operator\">=</span> hotel<span class=\"token punctuation\">.</span><span class=\"token function\">getCity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>starName <span class=\"token operator\">=</span> hotel<span class=\"token punctuation\">.</span><span class=\"token function\">getStarName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>business <span class=\"token operator\">=</span> hotel<span class=\"token punctuation\">.</span><span class=\"token function\">getBusiness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> hotel<span class=\"token punctuation\">.</span><span class=\"token function\">getLatitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> hotel<span class=\"token punctuation\">.</span><span class=\"token function\">getLongitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pic <span class=\"token operator\">=</span> hotel<span class=\"token punctuation\">.</span><span class=\"token function\">getPic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"语法说明\"><a href=\"#语法说明\" class=\"headerlink\" title=\"语法说明\"></a>语法说明</h3><p>新增文档的DSL语句如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">POST /<span class=\"token punctuation\">&#123;</span>索引库名<span class=\"token punctuation\">&#125;</span>/_doc/<span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对应的java代码如图：</p>\n<p><img src=\"/../assets/ES/image-20210720230027240.png\" alt=\"image-20210720230027240\"></p>\n<p>可以看到与创建索引库类似，同样是三步走：</p>\n<ul>\n<li>1）创建Request对象</li>\n<li>2）准备请求参数，也就是DSL中的JSON文档</li>\n<li>3）发送请求</li>\n</ul>\n<p>变化的地方在于，这里直接使用client.xxx()的API，不再需要client.indices()了。</p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>代码整体步骤如下：</p>\n<ul>\n<li>根据id查询酒店数据Hotel</li>\n<li>将Hotel封装为HotelDoc</li>\n<li>将HotelDoc序列化为JSON</li>\n<li>创建IndexRequest，指定索引库名和id</li>\n<li>准备请求参数，也就是JSON文档</li>\n<li>发送请求</li>\n</ul>\n<p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testAddDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.根据id查询酒店数据</span>\n    <span class=\"token class-name\">Hotel</span> hotel <span class=\"token operator\">=</span> hotelService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token number\">61083L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.转换为文档类型</span>\n    <span class=\"token class-name\">HotelDoc</span> hotelDoc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HotelDoc</span><span class=\"token punctuation\">(</span>hotel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.将HotelDoc转json</span>\n    <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>hotelDoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 1.准备Request对象</span>\n    <span class=\"token class-name\">IndexRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>hotelDoc<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.准备Json文档</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> <span class=\"token class-name\">XContentType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.发送请求</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"查询文档-1\"><a href=\"#查询文档-1\" class=\"headerlink\" title=\"查询文档\"></a>查询文档</h2><h3 id=\"语法说明-1\"><a href=\"#语法说明-1\" class=\"headerlink\" title=\"语法说明\"></a>语法说明</h3><p>查询的DSL语句如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">GET /hotel/_doc/<span class=\"token punctuation\">&#123;</span>id<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>准备Request对象</li>\n<li>发送请求</li>\n</ul>\n<p>不过查询的目的是得到结果，解析为HotelDoc，因此难点是结果的解析。完整代码如下：</p>\n<p><img src=\"/../assets/ES/image-20210720230811674.png\" alt=\"image-20210720230811674\"></p>\n<p>可以看到，结果是一个JSON，其中文档放在一个<code>_source</code>属性中，因此解析就是拿到<code>_source</code>，反序列化为Java对象即可。</p>\n<p>与之前类似，也是三步走：</p>\n<ul>\n<li>1）准备Request对象。这次是查询，所以是GetRequest</li>\n<li>2）发送请求，得到结果。因为是查询，这里调用client.get()方法</li>\n<li>3）解析结果，就是对JSON做反序列化</li>\n</ul>\n<h3 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testGetDocumentById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.准备Request</span>\n    <span class=\"token class-name\">GetRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotel\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"61082\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.发送请求，得到响应</span>\n    <span class=\"token class-name\">GetResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.解析响应结果</span>\n    <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">HotelDoc</span> hotelDoc <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HotelDoc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hotelDoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"删除文档-1\"><a href=\"#删除文档-1\" class=\"headerlink\" title=\"删除文档\"></a>删除文档</h2><p>删除的DSL为是这样的：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">DELETE /hotel/_doc/<span class=\"token punctuation\">&#123;</span>id<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>与查询相比，仅仅是请求方式从DELETE变成GET，可以想象Java代码应该依然是三步走：</p>\n<ul>\n<li>1）准备Request对象，因为是删除，这次是DeleteRequest对象。要指定索引库名和id</li>\n<li>2）准备参数，无参</li>\n<li>3）发送请求。因为是删除，所以是client.delete()方法</li>\n</ul>\n<p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testDeleteDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.准备Request</span>\n    <span class=\"token class-name\">DeleteRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotel\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"61083\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.发送请求</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"修改文档-1\"><a href=\"#修改文档-1\" class=\"headerlink\" title=\"修改文档\"></a>修改文档</h2><h3 id=\"语法说明-2\"><a href=\"#语法说明-2\" class=\"headerlink\" title=\"语法说明\"></a>语法说明</h3><p>修改我们讲过两种方式：</p>\n<ul>\n<li>全量修改：本质是先根据id删除，再新增</li>\n<li>增量修改：修改文档中的指定字段值</li>\n</ul>\n<p>在RestClient的API中，全量修改与新增的API完全一致，判断依据是ID：</p>\n<ul>\n<li>如果新增时，ID已经存在，则修改</li>\n<li>如果新增时，ID不存在，则新增</li>\n</ul>\n<p>这里不再赘述，我们主要关注增量修改。</p>\n<p>代码示例如图：</p>\n<p><img src=\"/../assets/ES/image-20210720231040875.png\" alt=\"image-20210720231040875\"></p>\n<p>与之前类似，也是三步走：</p>\n<ul>\n<li>1）准备Request对象。这次是修改，所以是UpdateRequest</li>\n<li>2）准备参数。也就是JSON文档，里面包含要修改的字段</li>\n<li>3）更新文档。这里调用client.update()方法</li>\n</ul>\n<h3 id=\"完整代码-2\"><a href=\"#完整代码-2\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testUpdateDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.准备Request</span>\n    <span class=\"token class-name\">UpdateRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotel\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"61083\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.准备请求参数</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"price\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"952\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"starName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"四钻\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.发送请求</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"批量导入文档\"><a href=\"#批量导入文档\" class=\"headerlink\" title=\"批量导入文档\"></a>批量导入文档</h2><p>案例需求：利用BulkRequest批量将数据库数据导入到索引库中。</p>\n<p>步骤如下：</p>\n<ul>\n<li><p>利用mybatis-plus查询酒店数据</p>\n</li>\n<li><p>将查询到的酒店数据（Hotel）转换为文档类型数据（HotelDoc）</p>\n</li>\n<li><p>利用JavaRestClient中的BulkRequest批处理，实现批量新增文档</p>\n</li>\n</ul>\n<h3 id=\"语法说明-3\"><a href=\"#语法说明-3\" class=\"headerlink\" title=\"语法说明\"></a>语法说明</h3><p>批量处理BulkRequest，其本质就是将多个普通的CRUD请求组合在一起发送。</p>\n<p>其中提供了一个add方法，用来添加其他请求：</p>\n<p><img src=\"/../assets/ES/image-20210720232105943.png\" alt=\"image-20210720232105943\"></p>\n<p>可以看到，能添加的请求包括：</p>\n<ul>\n<li>IndexRequest，也就是新增</li>\n<li>UpdateRequest，也就是修改</li>\n<li>DeleteRequest，也就是删除</li>\n</ul>\n<p>因此Bulk中添加了多个IndexRequest，就是批量新增功能了。示例：</p>\n<p><img src=\"/../assets/ES/image-20210720232431383.png\" alt=\"image-20210720232431383\"></p>\n<p>其实还是三步走：</p>\n<ul>\n<li>1）创建Request对象。这里是BulkRequest</li>\n<li>2）准备参数。批处理的参数，就是其它Request对象，这里就是多个IndexRequest</li>\n<li>3）发起请求。这里是批处理，调用的方法为client.bulk()方法</li>\n</ul>\n<p>我们在导入酒店数据时，将上述代码改造成for循环处理即可。</p>\n<h3 id=\"完整代码-3\"><a href=\"#完整代码-3\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testBulkRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 批量查询酒店数据</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hotel</span><span class=\"token punctuation\">></span></span> hotels <span class=\"token operator\">=</span> hotelService<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 1.创建Request</span>\n    <span class=\"token class-name\">BulkRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BulkRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.准备参数，添加多个新增的Request</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Hotel</span> hotel <span class=\"token operator\">:</span> hotels<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 2.1.转换为文档类型HotelDoc</span>\n        <span class=\"token class-name\">HotelDoc</span> hotelDoc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HotelDoc</span><span class=\"token punctuation\">(</span>hotel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2.2.创建新增文档的Request对象</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hotel\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>hotelDoc<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>hotelDoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">XContentType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 3.发送请求</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">bulk</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n","feature":true,"text":"倒排索引倒排索引的概念是基于MySQL这样的正向索引而言的。 正向索引那么什么是正向索引呢？例如给下表（tb_goods）中的id创建索引： 如果是根据id查询，那么直接走索引，查询速度非常快。 如果是基于title做模糊查询，只能逐行扫描数据，也就是全表扫描，随着数据量增加，其...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","count":2,"path":"api/tags/Elasticsearch.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">倒排索引</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%90%91%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">正向索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95-1\"><span class=\"toc-text\">倒排索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%90%91%E5%92%8C%E5%80%92%E6%8E%92\"><span class=\"toc-text\">正向和倒排</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E6%A1%A3%E5%92%8C%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">文档和字段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E5%92%8C%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">索引和映射</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mysql%E4%B8%8Eelasticsearch\"><span class=\"toc-text\">mysql与elasticsearch</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E5%BA%93%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">索引库操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mapping%E6%98%A0%E5%B0%84%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">mapping映射属性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E5%BA%93%E7%9A%84CRUD\"><span class=\"toc-text\">索引库的CRUD</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E5%BA%93%E5%92%8C%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">创建索引库和映射</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%EF%BC%9A\"><span class=\"toc-text\">基本语法：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%9A\"><span class=\"toc-text\">示例：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E7%B4%A2%E5%BC%95%E5%BA%93\"><span class=\"toc-text\">查询索引库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E7%B4%A2%E5%BC%95%E5%BA%93\"><span class=\"toc-text\">修改索引库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95%E5%BA%93\"><span class=\"toc-text\">删除索引库</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E6%A1%A3%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">文档操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%A2%9E%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">新增文档</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">查询文档</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">删除文档</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">修改文档</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E9%87%8F%E4%BF%AE%E6%94%B9\"><span class=\"toc-text\">全量修改</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E9%87%8F%E4%BF%AE%E6%94%B9\"><span class=\"toc-text\">增量修改</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#RestAPI\"><span class=\"toc-text\">RestAPI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5Demo%E5%B7%A5%E7%A8%8B\"><span class=\"toc-text\">导入Demo工程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">导入数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mapping%E6%98%A0%E5%B0%84%E5%88%86%E6%9E%90\"><span class=\"toc-text\">mapping映射分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96RestClient\"><span class=\"toc-text\">初始化RestClient</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E5%BA%93\"><span class=\"toc-text\">创建索引库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">完整示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95%E5%BA%93-1\"><span class=\"toc-text\">删除索引库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E7%B4%A2%E5%BC%95%E5%BA%93%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8\"><span class=\"toc-text\">判断索引库是否存在</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#RestClient%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">RestClient操作文档</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%A2%9E%E6%96%87%E6%A1%A3-1\"><span class=\"toc-text\">新增文档</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E5%BA%93%E5%AE%9E%E4%BD%93%E7%B1%BB\"><span class=\"toc-text\">索引库实体类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">语法说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3-1\"><span class=\"toc-text\">查询文档</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E-1\"><span class=\"toc-text\">语法说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">完整代码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%96%87%E6%A1%A3-1\"><span class=\"toc-text\">删除文档</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E6%96%87%E6%A1%A3-1\"><span class=\"toc-text\">修改文档</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E-2\"><span class=\"toc-text\">语法说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-2\"><span class=\"toc-text\">完整代码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">批量导入文档</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E-3\"><span class=\"toc-text\">语法说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-3\"><span class=\"toc-text\">完整代码</span></a></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Elasticsearch_DSL","uid":"a3047e4f83f81595969b248afaf5a9f0","slug":"Elasticsearch_DSL","date":"2023-06-25T12:22:32.000Z","updated":"2023-06-26T08:30:34.939Z","comments":true,"path":"api/articles/Elasticsearch_DSL.json","keywords":null,"cover":[],"text":"DSL查询文档elasticsearch的查询依然是基于JSON风格的DSL来实现的。 DSL查询分类Elasticsearch提供了基于JSON的DSL（Domain Specific Language）来定义查询。常见的查询类型包括： 查询所有：查询出所有数据，一般测试用。例...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","count":2,"path":"api/tags/Elasticsearch.json"},{"name":"实战","slug":"实战","count":1,"path":"api/tags/实战.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"RocketMQ","uid":"5ada78e6ba193fc543a90e69af063c59","slug":"RocketMQ","date":"2023-06-21T11:48:08.000Z","updated":"2023-06-21T11:48:08.975Z","comments":true,"path":"api/articles/RocketMQ.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"feature":true}}
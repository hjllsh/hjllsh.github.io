{"title":"MySQL_约束_多表查询","uid":"f293b2fcfae54b8509d50db2914ed7a0","slug":"MySQL-约束-多表联查","date":"2023-05-16T13:40:42.000Z","updated":"2023-06-29T12:51:54.063Z","comments":true,"path":"api/articles/MySQL-约束-多表联查.json","keywords":null,"cover":[],"content":"<h2 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h2><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p>\n<p>目的：保证数据库中数据的正确、有效性和完整性。</p>\n<table>\n<thead>\n<tr>\n<th>约束</th>\n<th>描述</th>\n<th>关键词</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>非空约束</td>\n<td>限制该字段的数据不能为null</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>唯一约束</td>\n<td>保证该字段的所有数据都是唯一、不重复的</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>主键约束</td>\n<td>主键是一行数据的唯一标识，要求非空且唯一</td>\n<td>PRIMARY KEY</td>\n</tr>\n<tr>\n<td>默认约束</td>\n<td>保存数据时，如果未指定该字段的值，则采用默认值</td>\n<td>DEFAULT</td>\n</tr>\n<tr>\n<td>检查约束(8.0.16版本之后)</td>\n<td>保证字段值满足某一个条件</td>\n<td>CHECK</td>\n</tr>\n<tr>\n<td>外键约束</td>\n<td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td>\n<td>FOREIGN KEY</td>\n</tr>\n</tbody></table>\n<p>约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> tb_user<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'ID唯一标识'</span><span class=\"token punctuation\">,</span>\nname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">unique</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token keyword\">int</span> <span class=\"token keyword\">check</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">between</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> <span class=\"token number\">120</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'年龄'</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">status</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">1</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'状态'</span><span class=\"token punctuation\">,</span>\ngender <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'性别'</span>\n<span class=\"token punctuation\">)</span><span class=\"token keyword\">comment</span> <span class=\"token string\">'学生表'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>外键约束</strong></p>\n<p>外键：用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> dept<span class=\"token punctuation\">(</span>\n\tid <span class=\"token keyword\">int</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'ID'</span><span class=\"token punctuation\">,</span>\n    name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'部门名称'</span><span class=\"token punctuation\">,</span>    \n<span class=\"token punctuation\">)</span><span class=\"token keyword\">comment</span> <span class=\"token string\">'部门表'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>emp<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'编号'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>workno<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gender<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'性别'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>age<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">tinyint</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'年龄'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idcard<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'身份证号'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>workaddress<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'工作地址'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>entrydate<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">date</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'入职时间'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'1'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'部门id'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4 <span class=\"token keyword\">COLLATE</span><span class=\"token operator\">=</span>utf8mb4_0900_ai_ci <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'员工表'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为emp表的dept_id字段添加外键约束,关联dept表的主键id。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> emp <span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> fk_emp_dept <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> dept<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>命令中的 “alter table emp” 表示将要修改的表是 emp，“add constraint” 表示添加一个约束，“fk_emp_dept_id” 是这个约束的名称，“foreign key (dept_id)” 表示这是一个外键约束，关联的列是 emp 表中的 dept_id 列，“references dept(id)” 表示外键引用了 dept 表的 id 列。这个约束的作用是确保 emp 表中的 dept_id 值必须在 dept 表的 id 列中存在，从而保证了参照完整性。</p>\n<p>添加了外键约束之后，我们再到dept表(父表)删除id为1的记录，然后看一下会发生什么现象。 此时将会报错，不能删除或更新父表记录，因为存在外键约束。</p>\n<p><code>1451 - Cannot delete or update a parent row: a foreign key constraint fails (hj.emp, CONSTRAINT fk_emp_dept FOREIGN KEY (dept_id) REFERENCES dept (id))</code></p>\n<p> 删除外键</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> 外键名称<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> emp <span class=\"token keyword\">drop</span> <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> fk_emp_dept<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>删除&#x2F;更新行为</strong></p>\n<p>添加了外键之后，再删除父表数据时产生的约束行为，我们就称为删除&#x2F;更新行为。</p>\n<p>具体的删除&#x2F;更新行为有以下几种:</p>\n<table>\n<thead>\n<tr>\n<th>行为</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NO ACTION</td>\n<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。 (与 RESTRICT 一致) 默认行为</td>\n</tr>\n<tr>\n<td>RESTRICT</td>\n<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。 (与 NO ACTION 一致) 默认行为</td>\n</tr>\n<tr>\n<td>CASCADE</td>\n<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录。</td>\n</tr>\n<tr>\n<td>SET NULL</td>\n<td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（这就要求该外键允许取null）。</td>\n</tr>\n<tr>\n<td>SET DEFAULT</td>\n<td>父表有变更时，子表将外键列设置成一个默认的值 (Innodb不支持)</td>\n</tr>\n</tbody></table>\n<p>具体语法为:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">CONSTRAINT</span> 外键名称 <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>外键字段<span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span>\n主表名 <span class=\"token punctuation\">(</span>主表字段名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">UPDATE</span> 行为 <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DELETE</span> 行为<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>小案例：CASCADE行为下  修改父表id为1的记录，将id修改为6</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> emp <span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> kf_emp_dept_id <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> dept<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">on</span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">cascade</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">cascade</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">update</span> dept <span class=\"token keyword\">set</span> id <span class=\"token operator\">=</span> <span class=\"token number\">6</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">delete</span> form dept <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们发现:</p>\n<p>原来在子表中dept_id值为1的记录，现在也变为6了，这就是cascade级联的效果。</p>\n<p>父表的数据删除成功了，但是子表中关联的记录也被级联删除了。</p>\n<p> SET NULL</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> emp <span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> fk_emp_dept_id <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> dept<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">on</span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">set</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">set</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> dept <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">update</span> dept <span class=\"token keyword\">set</span> id <span class=\"token operator\">=</span> <span class=\"token number\">7</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>父表的记录是可以正常的删除的，父表的数据删除&#x2F;跟新之后，再打开子表 emp，我们发现子表emp的dept_id字段，原来dept_id为1的数据，现在都被置为NULL了。</p>\n<h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><h3 id=\"多表关系\"><a href=\"#多表关系\" class=\"headerlink\" title=\"多表关系\"></a>多表关系</h3><p><strong>一对多(多对一)</strong> </p>\n<p>如：部门 与 员工的关系，一个部门对应多个员工，一个员工对应一个部门</p>\n<p>实现: 在多的一方建立外键，指向一的一方的主键</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> emp<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'ID'</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>\nname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token keyword\">int</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'年龄'</span><span class=\"token punctuation\">,</span>\njob <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'职位'</span><span class=\"token punctuation\">,</span>\nsalary <span class=\"token keyword\">int</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'薪资'</span><span class=\"token punctuation\">,</span>\nentrydate <span class=\"token keyword\">date</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'入职时间'</span><span class=\"token punctuation\">,</span>\nmanagerid <span class=\"token keyword\">int</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'直属领导ID'</span><span class=\"token punctuation\">,</span>\ndept_id <span class=\"token keyword\">int</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'部门ID'</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">constraint</span> fk_emp_dept_id <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> dept<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">on</span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">cascade</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">cascade</span>\n<span class=\"token punctuation\">)</span><span class=\"token keyword\">comment</span> <span class=\"token string\">'员工表'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> dept<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'ID'</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>\nname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'部门名称'</span>\n<span class=\"token punctuation\">)</span><span class=\"token keyword\">comment</span> <span class=\"token string\">'部门表'</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>多对多</strong></p>\n<p>如： 学生 与 课程的关系， 一个学生可以选修多门课程，一门课程也可以供多个学生选择</p>\n<p>实现: 建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> course<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'主键ID'</span><span class=\"token punctuation\">,</span>\nname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'课程名称'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'课程表'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> tb_user<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'主键ID'</span><span class=\"token punctuation\">,</span>\nname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token keyword\">int</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'年龄'</span><span class=\"token punctuation\">,</span>\ngender <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'1: 男 , 2: 女'</span><span class=\"token punctuation\">,</span>\nphone <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'手机号'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户基本信息表'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> tb_user_edu<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'主键ID'</span><span class=\"token punctuation\">,</span>\ndegree <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'学历'</span><span class=\"token punctuation\">,</span>\nmajor <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'专业'</span><span class=\"token punctuation\">,</span>\nprimaryschool <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'小学'</span><span class=\"token punctuation\">,</span>\nmiddleschool <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'中学'</span><span class=\"token punctuation\">,</span>\nuniversity <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'大学'</span><span class=\"token punctuation\">,</span>\nuserid <span class=\"token keyword\">int</span> <span class=\"token keyword\">unique</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户ID'</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">constraint</span> fk_userid <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>userid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> tb_user<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户教育信息表'</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>一对一</strong></p>\n<p>如：用户 与 用户详情的关系， 一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率</p>\n<p>实现: 在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> tb_user<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'主键ID'</span><span class=\"token punctuation\">,</span>\nname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token keyword\">int</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'年龄'</span><span class=\"token punctuation\">,</span>\ngender <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'1: 男 , 2: 女'</span><span class=\"token punctuation\">,</span>\nphone <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'手机号'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户基本信息表'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> tb_user_edu<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'主键ID'</span><span class=\"token punctuation\">,</span>\ndegree <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'学历'</span><span class=\"token punctuation\">,</span>\nmajor <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'专业'</span><span class=\"token punctuation\">,</span>\nprimaryschool <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'小学'</span><span class=\"token punctuation\">,</span>\nmiddleschool <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'中学'</span><span class=\"token punctuation\">,</span>\nuniversity <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'大学'</span><span class=\"token punctuation\">,</span>\nuserid <span class=\"token keyword\">int</span> <span class=\"token keyword\">unique</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户ID'</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">constraint</span> fk_userid <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>userid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> tb_user<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户教育信息表'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"多表查询概述\"><a href=\"#多表查询概述\" class=\"headerlink\" title=\"多表查询概述\"></a>多表查询概述</h3><p>要执行多表查询，就只需要使用逗号分隔多张表即可，如： <code>select * from emp , dept;</code></p>\n<p> 具体的执行结果如下:</p>\n<p>我们看到查询结果中包含了大量的结果集，总共102条记录，而这其实就是员工表emp所有的记录(17) 与 部门表dept所有记录(6) 的所有组合情况，这种现象称之为笛卡尔积。接下来，就来简单介绍下笛卡尔积。</p>\n<p>笛卡尔积: 笛卡尔乘积是指在数学中，两个集合A集合 和 B集合的所有组合情况。</p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230517170652868.png\" alt=\"image-20230517170652868\"></p>\n<p>而在多表查询中，我们是需要消除无效的笛卡尔积的，只保留两张表关联部分的数据。</p>\n<p><img src=\"C:\\Users\\hlw\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230517170716867.png\" alt=\"image-20230517170716867\"></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token punctuation\">,</span> dept <span class=\"token keyword\">where</span> emp<span class=\"token punctuation\">.</span>dept_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>连接查询分类</strong></p>\n<p>​\t内连接：相当于查询A、B交集部分数据 </p>\n<p>​\t外连接：</p>\n<p>​\t\t左外连接：查询左表所有数据，以及两张表交集部分数据</p>\n<p>​\t\t右外连接：查询右表所有数据，以及两张表交集部分数据</p>\n<p>​\t自连接：当前表与自身的连接查询，自连接必须使用表别名</p>\n<p><strong>内连接</strong></p>\n<p>内连接的语法分为两种: 隐式内连接、显式内连接。</p>\n<p>隐式内连接</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 字段列表 <span class=\"token keyword\">FROM</span> 表<span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">WHERE</span> 条件 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>显式内连接</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 字段列表 <span class=\"token keyword\">FROM</span> 表<span class=\"token number\">1</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">INNER</span> <span class=\"token punctuation\">]</span> <span class=\"token keyword\">JOIN</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">ON</span> 连接条件 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>小案例：查询每一个员工的姓名 , 及关联的部门的名称 (隐式内连接实现)</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"> <span class=\"token comment\">-- 隐式内连接实现</span>\n<span class=\"token keyword\">select</span> emp<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">,</span>dept <span class=\"token keyword\">where</span> emp<span class=\"token punctuation\">.</span>dept_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">select</span> emp<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">join</span> dept <span class=\"token keyword\">on</span> emp<span class=\"token punctuation\">.</span>dept_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>外连接</strong></p>\n<p>外连接分为两种，分别是：左外连接 和 右外连接</p>\n<p>具体的语法结构为：</p>\n<p>左外连接 </p>\n<p>相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 字段列表 <span class=\"token keyword\">FROM</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">LEFT</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">OUTER</span> <span class=\"token punctuation\">]</span> <span class=\"token keyword\">JOIN</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">ON</span> 条件 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 小案例：查询emp表的所有数据, 和对应的部门信息</p>\n<p>分析：要查询emp的所有数据，所以是不能内连接查询的，需要考虑使用外连接查询。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> e<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">from</span> emp e <span class=\"token keyword\">left</span> <span class=\"token keyword\">outer</span> <span class=\"token keyword\">join</span> dept d <span class=\"token keyword\">on</span> e<span class=\"token punctuation\">.</span>dept_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">select</span> e<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">from</span> emp e <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> dept d <span class=\"token keyword\">on</span> e<span class=\"token punctuation\">.</span>dept_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>小案例： 查询dept表的所有数据, 和对应的员工信息(右外连接)</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> dept<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> emp<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">right</span> <span class=\"token keyword\">outer</span> <span class=\"token keyword\">join</span> dept <span class=\"token keyword\">on</span> emp<span class=\"token punctuation\">.</span>dept_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>左外连接和右外连接是可以相互替换的，只需要调整在连接查询时SQL中，表结构的先后顺序就可以了。而我们在日常开发使用时，更偏向于左外连接。</p>\n<p><strong>自连接</strong></p>\n<p>顾名思义，就是自己连接自己，也就是把一张表连接查询多次。</p>\n<p>查询语法</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 字段列表 <span class=\"token keyword\">FROM</span> 表A 别名A <span class=\"token keyword\">JOIN</span> 表A 别名B <span class=\"token keyword\">ON</span> 条件 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>小案例：查询员工 及其 所属领导的名字，如果员工没有领导, 也需要查询出来</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">from</span> emp a <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> emp b <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>managerid <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在自连接查询中，必须要为表起别名，要不然我们不清楚所指定的条件、返回的字段，到底是哪一张表的字段。</p>\n<p><strong>联合查询</strong></p>\n<p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 字段列表 <span class=\"token keyword\">FROM</span> 表A <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">UNION</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">ALL</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">SELECT</span> 字段列表 <span class=\"token keyword\">FROM</span> 表B <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。如果多条查询语句查询出来的结果，字段数量不一致，在进行union&#x2F;union all联合查询时，将会报错</p>\n<p>union all 会将全部的数据直接合并在一起，union 会对合并之后的数据去重。</p>\n<p><strong>子查询</strong></p>\n<p>SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询</p>\n<p>语法</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> t1 <span class=\"token keyword\">WHERE</span> column1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> column1 <span class=\"token keyword\">FROM</span> t2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>子查询外部的语句可以是INSERT &#x2F; UPDATE &#x2F; DELETE &#x2F; SELECT 的任何一个。</p>\n<p>根据子查询位置，分为：WHERE之后\t\t FROM之后\t\tSELECT之后</p>\n<p>标量子查询 ：子查询返回的结果是单个值\t\t常用的操作符：&#x3D;   &lt;&gt;   &gt;   &gt;&#x3D;   &lt;  &lt;&#x3D; </p>\n<p>案例：查询 “销售部” 的所有员工信息</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> dept_id <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> dept <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'销售部'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>列子查询</strong></p>\n<p>子查询返回的结果是一列（可以是多行），这种子查询称为列子查询。</p>\n<p>常用的操作符：IN 、NOT IN 、 ANY 、SOME 、 ALL</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IN</td>\n<td>在指定的集合范围之内，多选一</td>\n</tr>\n<tr>\n<td>NOT IN</td>\n<td>不在指定的集合范围之内</td>\n</tr>\n<tr>\n<td>ANY</td>\n<td>子查询返回列表中，有任意一个满足即可</td>\n</tr>\n<tr>\n<td>SOME</td>\n<td>与ANY等同，使用SOME的地方都可以使用ANY</td>\n</tr>\n<tr>\n<td>ALL</td>\n<td>子查询返回列表的所有值都必须满足</td>\n</tr>\n</tbody></table>\n<p>小案例：查询 “销售部” 和 “市场部” 的所有员工信息</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> id <span class=\"token operator\">in</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> dept <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'销售部'</span> <span class=\"token operator\">or</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'市场部'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p> 小案例：查询比 财务部 所有人工资都高的员工信息</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> salary <span class=\"token operator\">></span> <span class=\"token keyword\">all</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">select</span> salary <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> dept_id <span class=\"token operator\">=</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> dept <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'财务部'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>行子查询</strong></p>\n<p>子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。</p>\n<p>常用的操作符：&#x3D; 、&lt;&gt; 、IN 、NOT IN</p>\n<p>小案例：查询与 “张无忌” 的薪资及直属领导相同的员工信息 ;</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> <span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">,</span>managerid<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> salary<span class=\"token punctuation\">,</span> managerid <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span><span class=\"token string\">'张无忌'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>表子查询</strong></p>\n<p>子查询返回的结果是多行多列，这种子查询称为表子查询。常用的操作符：IN</p>\n<p>小案例：查询与 “鹿杖客” , “宋远桥” 的职位和薪资相同的员工信息</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> <span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">select</span> job<span class=\"token punctuation\">,</span> salary <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span>\n<span class=\"token string\">'鹿杖客'</span> <span class=\"token operator\">or</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'宋远桥'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>小案例：查询入职日期是 “2006-01-01” 之后的员工信息 , 及其部门信息</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token identifier\"><span class=\"token punctuation\">`</span><span class=\"token punctuation\">`</span><span class=\"token punctuation\">`</span><span class=\"token punctuation\">`</span></span>\n\n 小案例：查询员工的姓名、年龄、职位、部门信息 （隐式内连接）\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n小案例： 查询年龄小于30岁的员工的姓名、年龄、职位、部门信息（显式内连接）\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n小案例：查询拥有员工的部门ID、部门名称\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n小案例：查询所有年龄大于40岁的员工, 及其归属的部门名称; 如果员工没有分配部门, 也需要展示出来(外连接)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n小案例：查询所有员工的工资等级\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n小案例：查询 &quot;研发部&quot; 所有员工的信息及 工资等级\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n小案例： 查询 &quot;研发部&quot; 员工的平均工资\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n小案例： 查询工资比 &quot;灭绝&quot; 高的员工信息。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n小案例： 查询比平均薪资高的员工信息\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n小案例：查询低于本部门平均工资的员工信息\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n小案例：查询所有的部门信息, 并统计部门的员工人数\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n小案例：查询所有学生的选课情况, 展示出学生名称, 学号, 课程名称\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre><code>\n</code></pre>\n","text":"约束概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。 目的：保证数据库中数据的正确、有效性和完整性。 约束 描述 关键词 非空约束 限制该字段的数据不能为null NOT NULL 唯一约束 保证该字段的所有数据都是唯一、不重复的 UNIQUE 主键约束 主键是一行...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":12,"path":"api/tags/MySQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">约束</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">多表查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">多表关系</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">多表查询概述</span></a></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MySQL事务","uid":"c1f6d722cc4602038235f2e7924e8ff2","slug":"MySQL-事务","date":"2023-05-17T13:51:38.000Z","updated":"2023-06-27T09:47:04.792Z","comments":true,"path":"api/articles/MySQL-事务.json","keywords":null,"cover":[],"text":"事务事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。默认MySQL的事务是自动提交的，也就是说，当执行完一条DML语句时，MySQL会立即隐式的提交事务。 事务操作未控制事务 测试...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":12,"path":"api/tags/MySQL.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"MySQL_DCL_函数","uid":"8f9e88b96addebc57d8b075bdae2d985","slug":"MySQL-DCL-函数","date":"2023-05-16T08:56:15.000Z","updated":"2023-06-29T12:14:34.704Z","comments":true,"path":"api/articles/MySQL-DCL-函数.json","keywords":null,"cover":[],"text":"DCLData Control Language(数据控制语言)，用来管理数据库用户、控制数据库的访问权限。 管理用户查询用户 select * from mysql.user; 其中 Host代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":12,"path":"api/tags/MySQL.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
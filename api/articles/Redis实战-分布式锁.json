{"title":"Redis实战-分布式锁","uid":"ccca64486565a23a9fbb5012df3ad7c1","slug":"Redis实战-分布式锁","date":"2023-06-04T10:10:53.000Z","updated":"2023-06-14T14:21:44.273Z","comments":true,"path":"api/articles/Redis实战-分布式锁.json","keywords":null,"cover":[],"content":"<h2 id=\"4、分布式锁\"><a href=\"#4、分布式锁\" class=\"headerlink\" title=\"4、分布式锁\"></a>4、分布式锁</h2><h3 id=\"基本原理和实现方式对比\"><a href=\"#基本原理和实现方式对比\" class=\"headerlink\" title=\"基本原理和实现方式对比\"></a>基本原理和实现方式对比</h3><p>分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。</p>\n<p>分布式锁的核心思想就是让大家都使用同一把锁，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路</p>\n<p><img src=\"/../assets/images/redis%E5%AE%9E%E6%88%9833.png\" alt=\"1653374296906\"></p>\n<p>分布式锁应该满足以下条件：</p>\n<p>可见性：多个线程都能看到相同的结果，注意：这个地方说的可见性并不是并发编程中指的内存可见性，只是说多个进程之间都能感知到变化的意思</p>\n<p>互斥：互斥是分布式锁的最基本的条件，使得程序串行执行</p>\n<p>高可用：程序不易崩溃，时时刻刻都保证较高的可用性</p>\n<p>高性能：由于加锁本身就让性能降低，所有对于分布式锁本身需要他就较高的加锁性能和释放锁性能</p>\n<p>安全性：安全也是程序中必不可少的一环</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653381992018.png\" alt=\"1653381992018\"></p>\n<p>常见的分布式锁有三种</p>\n<p>Mysql：mysql本身就带有锁机制，但是由于mysql性能本身一般，所以采用分布式锁的情况下，其实使用mysql作为分布式锁比较少见</p>\n<p>Redis：redis作为分布式锁是非常常见的一种使用方式，现在企业级开发中基本都使用redis或者zookeeper作为分布式锁，利用setnx这个方法，如果插入key成功，则表示获得到了锁，如果有人插入成功，其他人插入失败则表示无法获得到锁，利用这套逻辑来实现分布式锁</p>\n<p>Zookeeper：zookeeper也是企业级开发中较好的一个实现分布式锁的方案<img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653382219377.png\" alt=\"1653382219377\"></p>\n<h3 id=\"Redis分布式锁的实现核心思路\"><a href=\"#Redis分布式锁的实现核心思路\" class=\"headerlink\" title=\"Redis分布式锁的实现核心思路\"></a>Redis分布式锁的实现核心思路</h3><p>实现分布式锁时需要实现的两个基本方法：</p>\n<ul>\n<li><p>获取锁：</p>\n<ul>\n<li>互斥：确保只能有一个线程获取锁</li>\n<li>非阻塞：尝试一次，成功返回true，失败返回false</li>\n</ul>\n</li>\n<li><p>释放锁：</p>\n<ul>\n<li>手动释放</li>\n<li>超时释放：获取锁时添加一个超时时间</li>\n</ul>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653382669900.png\" alt=\"1653382669900\"></p>\n</li>\n</ul>\n<p>核心思路：</p>\n<p>我们利用redis 的setnx 方法，当有多个线程进入时，我们就利用该方法，第一个线程进入时，redis 中就有这个key 了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁的哥们，等待一定时间后重试即可</p>\n<p> <img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653382830810.png\" alt=\"1653382830810\"></p>\n<h3 id=\"StringRedisTemplate实现分布式锁\"><a href=\"#StringRedisTemplate实现分布式锁\" class=\"headerlink\" title=\"StringRedisTemplate实现分布式锁\"></a>StringRedisTemplate实现分布式锁</h3><ul>\n<li>加锁逻辑</li>\n</ul>\n<p><strong>锁的基本接口</strong></p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1656079017728.png\" alt=\"1656079017728\"></p>\n<p><strong>SimpleRedisLock</strong></p>\n<p>利用setnx方法进行加锁，同时增加过期时间，防止死锁，此方法可以保证加锁和增加过期时间具有<strong>原子性</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">KEY_PREFIX</span><span class=\"token operator\">=</span><span class=\"token string\">\"lock:\"</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeoutSec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取线程标示</span>\n    <span class=\"token class-name\">String</span> threadId <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 获取锁</span>\n    <span class=\"token class-name\">Boolean</span> success <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KEY_PREFIX</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">,</span> threadId <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> timeoutSec<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRUE</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>释放锁逻辑</li>\n</ul>\n<p>SimpleRedisLock</p>\n<p>释放锁，防止删除别人的锁</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//通过del删除锁</span>\n    stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KEY_PREFIX</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>修改业务代码</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">seckillVoucher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> voucherId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 1.查询优惠券</span>\n      <span class=\"token class-name\">SeckillVoucher</span> voucher <span class=\"token operator\">=</span> seckillVoucherService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>voucherId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 2.判断秒杀是否开始</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getBeginTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 尚未开始</span>\n          <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒杀尚未开始！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">// 3.判断秒杀是否已经结束</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getEndTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBefore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 已经结束</span>\n          <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒杀已经结束！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">// 4.判断库存是否充足</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>voucher<span class=\"token punctuation\">.</span><span class=\"token function\">getStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 库存不足</span>\n          <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"库存不足！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token class-name\">Long</span> userId <span class=\"token operator\">=</span> <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//创建锁对象(新增代码)</span>\n      <span class=\"token class-name\">SimpleRedisLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleRedisLock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order:\"</span> <span class=\"token operator\">+</span> userId<span class=\"token punctuation\">,</span> stringRedisTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//获取锁对象</span>\n      <span class=\"token keyword\">boolean</span> isLock <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//加锁失败</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不允许重复下单\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">//获取代理对象(事务)</span>\n          <span class=\"token class-name\">IVoucherOrderService</span> proxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IVoucherOrderService</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">AopContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">createVoucherOrder</span><span class=\"token punctuation\">(</span>voucherId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">//释放锁</span>\n          lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Redis分布式锁误删情况说明\"><a href=\"#Redis分布式锁误删情况说明\" class=\"headerlink\" title=\"Redis分布式锁误删情况说明\"></a>Redis分布式锁误删情况说明</h3><p>逻辑说明：</p>\n<p>持有锁的线程在锁的内部出现了阻塞，导致他的锁自动释放，这时其他线程，线程2来尝试获得锁，就拿到了这把锁，然后线程2在持有锁执行过程中，线程1反应过来，继续执行，而线程1执行过程中，走到了删除锁逻辑，此时就会把本应该属于线程2的锁进行删除，这就是误删别人锁的情况说明</p>\n<p>解决方案：解决方案就是在每个线程释放锁的时候，去判断一下当前这把锁是否属于自己，如果属于自己，则不进行锁的删除，假设还是上边的情况，线程1卡顿，锁自动释放，线程2进入到锁的内部执行逻辑，此时线程1反应过来，然后删除锁，但是线程1，一看当前这把锁不是属于自己，于是不进行删除锁逻辑，当线程2走到删除锁逻辑时，如果没有卡过自动释放锁的时间点，则判断当前这把锁是属于自己的，于是删除这把锁。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653385920025.png\" alt=\"1653385920025\"></p>\n<h3 id=\"解决Redis分布式锁误删问题\"><a href=\"#解决Redis分布式锁误删问题\" class=\"headerlink\" title=\"解决Redis分布式锁误删问题\"></a>解决Redis分布式锁误删问题</h3><p>需求：修改之前的分布式锁实现，满足：在获取锁时存入线程标示（可以用UUID表示）在释放锁时先获取锁中的线程标示，判断是否与当前线程标示一致</p>\n<ul>\n<li>如果一致则释放锁</li>\n<li>如果不一致则不释放锁</li>\n</ul>\n<p>核心逻辑：在存入锁时，放入自己线程的标识，在删除锁时，判断当前这把锁的标识是不是自己存入的，如果是，则进行删除，如果不是，则不进行删除。</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653387398820.png\" alt=\"1653387398820\"></p>\n<p>具体代码如下：加锁</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">ID_PREFIX</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeoutSec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 获取线程标示</span>\n   <span class=\"token class-name\">String</span> threadId <span class=\"token operator\">=</span> <span class=\"token constant\">ID_PREFIX</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// 获取锁</span>\n   <span class=\"token class-name\">Boolean</span> success <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KEY_PREFIX</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">,</span> timeoutSec<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRUE</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>释放锁</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取线程标示</span>\n    <span class=\"token class-name\">String</span> threadId <span class=\"token operator\">=</span> <span class=\"token constant\">ID_PREFIX</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 获取锁中的标示</span>\n    <span class=\"token class-name\">String</span> id <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KEY_PREFIX</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 判断标示是否一致</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 释放锁</span>\n        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KEY_PREFIX</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"分布式锁的原子性问题\"><a href=\"#分布式锁的原子性问题\" class=\"headerlink\" title=\"分布式锁的原子性问题\"></a>分布式锁的原子性问题</h3><p>更为极端的误删逻辑说明：</p>\n<p>线程1现在持有锁之后，在执行业务逻辑过程中，他正准备删除锁，而且已经走到了条件判断的过程中，比如他已经拿到了当前这把锁确实是属于他自己的，正准备删除锁，但是此时他的锁到期了，那么此时线程2进来，但是线程1他会接着往后执行，当他卡顿结束后，他直接就会执行删除锁那行代码，相当于条件判断并没有起到作用，这就是删锁时的原子性问题，之所以有这个问题，是因为线程1的拿锁，比较是不是自己的锁，删锁，实际上并不是原子性的，我们要防止刚才的情况发生，</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653387764938.png\" alt=\"1653387764938\"></p>\n<h3 id=\"Lua脚本解决多条命令原子性问题\"><a href=\"#Lua脚本解决多条命令原子性问题\" class=\"headerlink\" title=\"Lua脚本解决多条命令原子性问题\"></a>Lua脚本解决多条命令原子性问题</h3><p>Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。Lua是一种编程语言，它的基本语法大家可以参考网站：<a href=\"https://www.runoob.com/lua/lua-tutorial.html%EF%BC%8C%E8%BF%99%E9%87%8C%E9%87%8D%E7%82%B9%E4%BB%8B%E7%BB%8DRedis%E6%8F%90%E4%BE%9B%E7%9A%84%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8lua%E5%8E%BB%E6%93%8D%E4%BD%9Credis%EF%BC%8C%E5%8F%88%E8%83%BD%E4%BF%9D%E8%AF%81%E4%BB%96%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%8B%BF%E9%94%81%EF%BC%8C%E6%AF%94%E9%94%81%EF%BC%8C%E5%88%A0%E9%94%81%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8E%9F%E5%AD%90%E6%80%A7%E5%8A%A8%E4%BD%9C%E4%BA%86%E3%80%82\">https://www.runoob.com/lua/lua-tutorial.html，这里重点介绍Redis提供的调用函数，我们可以使用lua去操作redis，又能保证他的原子性，这样就可以实现拿锁，比锁，删锁是一个原子性动作了。</a></p>\n<p>Redis提供的调用函数，语法如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'命令名称'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'其它参数'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如要执行set name jack，则脚本是这样：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token operator\">#</span> 执行 set name jack\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'set'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jack'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>例如要先执行set name Rose，再执行get name，则脚本如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token operator\">#</span> 先执行 set name jack\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'set'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Rose'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">#</span> 再执行 get name\n<span class=\"token keyword\">local</span> name <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">#</span> 返回\n<span class=\"token keyword\">return</span> name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>写好脚本以后，需要用Redis命令来调用脚本，调用脚本的常见命令如下：</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653392181413.png\" alt=\"1653392181413\"></p>\n<p>例如，我们要执行 redis.call(‘set’, ‘name’, ‘jack’) 这个脚本，语法如下：</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653392218531.png\" alt=\"1653392218531\"></p>\n<p>如果脚本中的key、value不想写死，可以作为参数传递。key类型参数会放入KEYS数组，其它参数会放入ARGV数组，在脚本中可以从KEYS和ARGV数组获取这些参数：</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653392438917.png\" alt=\"1653392438917\"></p>\n<p>释放锁的业务流程是这样的</p>\n<p>​\t1、获取锁中的线程标示</p>\n<p>​\t2、判断是否与指定的标示（当前线程标示）一致</p>\n<p>​\t3、如果一致则释放锁（删除）</p>\n<p>​\t4、如果不一致则什么都不做</p>\n<p>最终我们操作redis的拿锁比锁删锁的lua脚本就会变成这样</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 这里的 KEYS[1] 就是锁的key，这里的ARGV[1] 就是当前线程标示</span>\n<span class=\"token comment\">-- 获取锁中的标示，判断是否与当前线程标示一致</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n  <span class=\"token comment\">-- 一致，则删除锁</span>\n  <span class=\"token keyword\">return</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DEL'</span><span class=\"token punctuation\">,</span> KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token comment\">-- 不一致，则直接返回</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"利用Java代码调用Lua脚本改造分布式锁\"><a href=\"#利用Java代码调用Lua脚本改造分布式锁\" class=\"headerlink\" title=\"利用Java代码调用Lua脚本改造分布式锁\"></a>利用Java代码调用Lua脚本改造分布式锁</h3><p>lua脚本本身并不需要大家花费太多时间去研究，只需要知道如何调用，大致是什么意思即可，所以在笔记中并不会详细的去解释这些lua表达式的含义。</p>\n<p>我们的<code>RedisTemplate</code>中，可以利用<code>execute</code>方法去执行lua脚本，参数对应关系就如下图</p>\n<p><img src=\"D:/Java成神之路/7、2022版Redis入门到精通/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653393304844.png\" alt=\"1653393304844\"></p>\n<p><strong>Java代码</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token constant\">UNLOCK_SCRIPT</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token constant\">UNLOCK_SCRIPT</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token constant\">UNLOCK_SCRIPT</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unlock.lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token constant\">UNLOCK_SCRIPT</span><span class=\"token punctuation\">.</span><span class=\"token function\">setResultType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 调用lua脚本</span>\n    stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>\n            <span class=\"token constant\">UNLOCK_SCRIPT</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KEY_PREFIX</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token constant\">ID_PREFIX</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n经过以上代码改造后，我们就能够实现 拿锁比锁删锁的原子性动作了<span class=\"token operator\">~</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>总结：</p>\n<p>基于Redis的分布式锁实现思路：</p>\n<ul>\n<li>利用set nx ex获取锁，并设置过期时间，保存线程标示</li>\n<li>释放锁时先判断线程标示是否与自己一致，一致则删除锁<ul>\n<li>特性：<ul>\n<li>利用set nx满足互斥性</li>\n<li>利用set ex保证故障时锁依然能释放，避免死锁，提高安全性</li>\n<li>利用Redis集群保证高可用和高并发特性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>总结：利用添加过期时间，防止死锁问题的发生，但是有了过期时间之后，可能出现误删别人锁的问题，这个问题我们开始是利用删之前 通过拿锁，比锁，删锁这个逻辑来解决的，也就是删之前判断一下当前这把锁是否是属于自己的，但是现在还有原子性问题，也就是我们没法保证拿锁比锁删锁是一个原子性的动作，最后通过lua表达式来解决这个问题</p>\n<p>但是目前还剩下一个问题锁不住，什么是锁不住呢，如果当过期时间到了之后，如果可以续期，是不是后边的问题都不会发生了，那么续期问题怎么解决呢，可以依赖于我们接下来要学习redission啦</p>\n","text":"4、分布式锁基本原理和实现方式对比分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。 分布式锁的核心思想就是让大家都使用同一把锁，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路 分布式锁应该满足以下条件： 可见性：...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":14,"path":"api/tags/redis.json"},{"name":"Redis实战","slug":"Redis实战","count":10,"path":"api/tags/Redis实战.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81\"><span class=\"toc-text\">4、分布式锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">基本原理和实现方式对比</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%A0%B8%E5%BF%83%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">Redis分布式锁的实现核心思路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#StringRedisTemplate%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81\"><span class=\"toc-text\">StringRedisTemplate实现分布式锁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%AF%AF%E5%88%A0%E6%83%85%E5%86%B5%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">Redis分布式锁误删情况说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%AF%AF%E5%88%A0%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">解决Redis分布式锁误删问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">分布式锁的原子性问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lua%E8%84%9A%E6%9C%AC%E8%A7%A3%E5%86%B3%E5%A4%9A%E6%9D%A1%E5%91%BD%E4%BB%A4%E5%8E%9F%E5%AD%90%E6%80%A7%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">Lua脚本解决多条命令原子性问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8Java%E4%BB%A3%E7%A0%81%E8%B0%83%E7%94%A8Lua%E8%84%9A%E6%9C%AC%E6%94%B9%E9%80%A0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81\"><span class=\"toc-text\">利用Java代码调用Lua脚本改造分布式锁</span></a></li></ol></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Redis实战-Redission分布式锁","uid":"b241352e87f784e0f5d32e5898f90895","slug":"Redis实战-Redission分布式锁","date":"2023-06-04T14:29:14.000Z","updated":"2023-06-14T14:22:32.062Z","comments":true,"path":"api/articles/Redis实战-Redission分布式锁.json","keywords":null,"cover":[],"text":"分布式锁-redission分布式锁-redission的功能基于setnx实现的分布式锁存在下面的问题： 重入问题：重入问题是指 获得锁的线程可以再次进入到相同的锁的代码块中，可重入锁的意义在于防止死锁 不可重试：是指目前的分布式只能尝试一次，合理的情况是：当线程在获得锁失败后...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":14,"path":"api/tags/redis.json"},{"name":"Redis实战","slug":"Redis实战","count":10,"path":"api/tags/Redis实战.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"Redis实战-秒杀","uid":"a08c023de37b091e96339da5fe4c6318","slug":"Redis实战-秒杀","date":"2023-06-04T08:36:56.000Z","updated":"2023-06-14T14:23:40.092Z","comments":true,"path":"api/articles/Redis实战-秒杀.json","keywords":null,"cover":[],"text":"秒杀全局唯一ID当用户抢购时，就会生成订单并保存到订单表中，而订单表如果使用数据库自增ID就存在一些问题： id的规律性太明显 受单表数据量的限制 场景分析：如果我们的id具有太明显的规则，用户或者说商业对手很容易猜测出来我们的一些敏感信息，比如商城在一天时间内，卖出了多少单，这...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":14,"path":"api/tags/redis.json"},{"name":"Redis实战","slug":"Redis实战","count":10,"path":"api/tags/Redis实战.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}
{"title":"Redis基础","uid":"b6845422ba4775a7cab0c414606e3ecd","slug":"Redis基础","date":"2023-06-02T14:33:03.000Z","updated":"2023-06-03T15:50:35.971Z","comments":true,"path":"api/articles/Redis基础.json","keywords":null,"cover":[],"content":"<h3 id=\"认识NoSQL\"><a href=\"#认识NoSQL\" class=\"headerlink\" title=\"认识NoSQL\"></a>认识NoSQL</h3><p><strong>NoSql</strong>可以翻译做Not Only Sql（不仅仅是SQL），或者是No Sql（非Sql的）数据库。是相对于传统关系型数据库而言，有很大差异的一种特殊的数据库，因此也称之为<strong>非关系型数据库</strong>。</p>\n<h4 id=\"结构化与非结构化\"><a href=\"#结构化与非结构化\" class=\"headerlink\" title=\"结构化与非结构化\"></a>结构化与非结构化</h4><p>​\t\t传统关系型数据库是结构化数据，每一张表都有严格的约束信息：字段名.字段数据类型.字段约束等等信息，插入的数据必须遵守这些约束</p>\n<p>​\t\tNoSql则对数据库格式没有严格约束，往往形式松散，自由。</p>\n<h4 id=\"关联和非关联\"><a href=\"#关联和非关联\" class=\"headerlink\" title=\"关联和非关联\"></a>关联和非关联</h4><p>​\t\t传统数据库的表与表之间往往存在关联，例如外键</p>\n<p>​\t\t非关系型数据库不存在关联关系，要维护关系要么靠代码中的业务逻辑，要么靠数据之间的耦合：</p>\n<h4 id=\"查询方式\"><a href=\"#查询方式\" class=\"headerlink\" title=\"查询方式\"></a>查询方式</h4><p>​\t\t传统关系型数据库会基于Sql语句做查询，语法有统一标准；</p>\n<p>​\t\t而不同的非关系数据库查询语法差异极大，五花八门各种各样。</p>\n<h4 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h4><p>​\t\t传统关系型数据库能满足事务ACID的原则。</p>\n<p>​\t\t非关系型数据库往往不支持事务，或者不能严格保证ACID的特性，只能实现基本的一致性。</p>\n<h4 id=\"在存储方式-扩展性-查询性能上关系型与非关系型也都有着显著差异\"><a href=\"#在存储方式-扩展性-查询性能上关系型与非关系型也都有着显著差异\" class=\"headerlink\" title=\"在存储方式.扩展性.查询性能上关系型与非关系型也都有着显著差异\"></a>在存储方式.扩展性.查询性能上关系型与非关系型也都有着显著差异</h4><ul>\n<li>存储方式<ul>\n<li>关系型数据库基于磁盘进行存储，会有大量的磁盘IO，对性能有一定影响</li>\n<li>非关系型数据库，他们的操作更多的是依赖于内存来操作，内存的读写速度会非常快，性能自然会好一些</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>扩展性<ul>\n<li>关系型数据库集群模式一般是主从，主从数据一致，起到数据备份的作用，称为垂直扩展。</li>\n<li>非关系型数据库可以将数据拆分，存储在不同机器上，可以保存海量数据，解决内存大小有限的问题。称为水平扩展。</li>\n<li>关系型数据库因为表之间存在关联关系，如果做水平扩展会给数据查询带来很多麻烦</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"认识Redis\"><a href=\"#认识Redis\" class=\"headerlink\" title=\"认识Redis\"></a>认识Redis</h3><p><strong>特征</strong>：</p>\n<ul>\n<li>键值（key-value）型，value支持多种不同数据结构，功能丰富</li>\n<li>单线程，每个命令具备原子性</li>\n<li>低延迟，速度快（基于内存.IO多路复用.良好的编码）。</li>\n<li>支持数据持久化</li>\n<li>支持主从集群.分片集群</li>\n<li>支持多语言客户端</li>\n</ul>\n<h5 id=\"安装Redis\"><a href=\"#安装Redis\" class=\"headerlink\" title=\"安装Redis\"></a>安装Redis</h5><p>Linux版本为CentOS 7.</p>\n<p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：<code>yum install -y gcc tcl</code></p>\n<p>上传安装包到&#x2F;usr&#x2F;local&#x2F;src 目录并解压：<code>tar -xzf redis-6.2.6.tar.gz</code></p>\n<p>解压后进入redis目录：<code>cd redis-6.2.6</code></p>\n<p>运行编译命令：<code>make &amp;&amp; make install</code></p>\n<p>默认的安装路径是在 <code>/usr/local/bin</code>目录下</p>\n<p>该目录已经默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p>\n<ul>\n<li>redis-cli：是redis提供的命令行客户端</li>\n<li>redis-server：是redis的服务端启动脚本</li>\n<li>redis-sentinel：是redis的哨兵启动脚本</li>\n</ul>\n<h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><p><strong>默认启动</strong>：<code>redis-server </code>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p>\n<p><strong>指定配置启动</strong></p>\n<p>让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件</p>\n<p>先将这个配置文件备份一份：<code>cp redis.conf redis.conf.bck</code></p>\n<p>修改redis.conf文件中的一些配置：</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token comment\"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span>\n<span class=\"token key attr-name\">bind</span> <span class=\"token value attr-value\">0.0.0.0</span>\n<span class=\"token comment\"># 守护进程，修改为yes后即可后台运行</span>\n<span class=\"token key attr-name\">daemonize</span> <span class=\"token value attr-value\">yes </span>\n<span class=\"token comment\"># 密码，设置后访问Redis必须输入密码</span>\n<span class=\"token key attr-name\">requirepass</span> <span class=\"token value attr-value\">123321</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Redis的其它常见配置：</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token comment\"># 监听的端口</span>\n<span class=\"token key attr-name\">port</span> <span class=\"token value attr-value\">6379</span>\n<span class=\"token comment\"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志.持久化等文件会保存在这个目录</span>\n<span class=\"token key attr-name\">dir</span> <span class=\"token value attr-value\">.</span>\n<span class=\"token comment\"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span>\n<span class=\"token key attr-name\">databases</span> <span class=\"token value attr-value\">1</span>\n<span class=\"token comment\"># 设置redis能够使用的最大内存</span>\n<span class=\"token key attr-name\">maxmemory</span> <span class=\"token value attr-value\">512mb</span>\n<span class=\"token comment\"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span>\n<span class=\"token key attr-name\">logfile</span> <span class=\"token value attr-value\">\"redis.log\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>启动Redis：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 进入redis安装目录 </span>\n<span class=\"token builtin class-name\">cd</span> /usr/local/src/redis-6.2.6\n<span class=\"token comment\"># 启动</span>\nredis-server redis.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>停止服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span>\n<span class=\"token comment\"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span>\nredis-cli <span class=\"token parameter variable\">-u</span> <span class=\"token number\">123321</span> <span class=\"token function\">shutdown</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"开机自启\"><a href=\"#开机自启\" class=\"headerlink\" title=\"开机自启\"></a>开机自启</h4><p>我们也可以通过配置来实现开机自启。</p>\n<p>首先，新建一个系统服务文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> /etc/systemd/system/redis.service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>内容如下：</p>\n<pre class=\"line-numbers language-conf\" data-language=\"conf\"><code class=\"language-conf\">[Unit]\nDescription&#x3D;redis-server\nAfter&#x3D;network.target\n\n[Service]\nType&#x3D;forking\nExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;src&#x2F;redis-6.2.6&#x2F;redis.conf\nPrivateTmp&#x3D;true\n\n[Install]\nWantedBy&#x3D;multi-user.target<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后重载系统服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl daemon-reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>现在可以用下面这组命令来操作redis了：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 启动</span>\nsystemctl start redis\n<span class=\"token comment\"># 停止</span>\nsystemctl stop redis\n<span class=\"token comment\"># 重启</span>\nsystemctl restart redis\n<span class=\"token comment\"># 查看状态</span>\nsystemctl status redis<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行下面的命令，可以让redis开机自启：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl <span class=\"token builtin class-name\">enable</span> redis<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Redis常见命令\"><a href=\"#Redis常见命令\" class=\"headerlink\" title=\"Redis常见命令\"></a>Redis常见命令</h3><h4 id=\"Redis数据结构介绍\"><a href=\"#Redis数据结构介绍\" class=\"headerlink\" title=\"Redis数据结构介绍\"></a>Redis数据结构介绍</h4><p>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样：</p>\n<p><img src=\"D:\\Java成神之路\\7、2022版Redis入门到精通\\Redis-笔记资料\\01-入门篇\\讲义\\Redis注释版\\assets\\1652887393157.png\" alt=\"1652887393157\"></p>\n<p>可以通过Help命令来帮助我们去查看命令</p>\n<h3 id=\"4-2-Redis-通用命令\"><a href=\"#4-2-Redis-通用命令\" class=\"headerlink\" title=\"4.2 Redis 通用命令\"></a>4.2 Redis 通用命令</h3><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p>\n<ul>\n<li>KEYS：查看符合模板的所有key</li>\n<li>DEL：删除一个指定的key</li>\n<li>EXISTS：判断key是否存在</li>\n<li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li>\n<li>TTL：查看一个KEY的剩余有效期</li>\n</ul>\n<p>通过help [command] 查看一个命令的具体用法</p>\n<p><img src=\"D:\\Java成神之路\\7、2022版Redis入门到精通\\Redis-笔记资料\\01-入门篇\\讲义\\Redis注释版\\assets\\1652887865189.png\" alt=\"1652887865189\"></p>\n<p>不推荐使用keys 命令，因为这个命令在key过多的情况下，效率不高</p>\n<ul>\n<li>DEL、KEYS</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">help</span> del\n\n  DEL key <span class=\"token punctuation\">[</span>key <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\n  summary: Delete a key\n  since: <span class=\"token number\">1.0</span>.0\n  group: generic\n\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> del name <span class=\"token comment\">#删除单个</span>\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>  <span class=\"token comment\">#成功删除1个</span>\n\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> MSET k1 v1 k2 v2 k3 v3 <span class=\"token comment\">#批量添加数据</span>\nOK\n\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> keys *\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"k3\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"k2\"</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"k1\"</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span>\n\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> del k1 k2 k3 k4\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span>   <span class=\"token comment\">#此处返回的是成功删除的key，由于redis中只有k1,k2,k3 所以只成功删除3个，最终返回</span>\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>EXISTS</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">help</span> EXISTS\n\n  EXISTS key <span class=\"token punctuation\">[</span>key <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\n  summary: Determine <span class=\"token keyword\">if</span> a key exists\n  since: <span class=\"token number\">1.0</span>.0\n  group: generic\n\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> exists age\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> exists name\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>EXPIRE</li>\n<li>TTL</li>\n</ul>\n<p>内存非常宝贵，对于一些数据，我们应当给他一些过期时间，当过期时间到了之后，他就会自动被删除~</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> expire age <span class=\"token number\">10</span>\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl age\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">8</span>\n\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl age\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">6</span>\n\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl age\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token parameter variable\">-2</span>\n\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl age\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token parameter variable\">-2</span>  <span class=\"token comment\">#当这个key过期了，那么此时查询出来就是-2 </span>\n\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> keys *\n<span class=\"token punctuation\">(</span>empty list or <span class=\"token builtin class-name\">set</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> age <span class=\"token number\">10</span> <span class=\"token comment\">#如果没有设置过期时间</span>\nOK\n\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl age\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token parameter variable\">-1</span>  <span class=\"token comment\"># ttl的返回值就是-1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"String命令\"><a href=\"#String命令\" class=\"headerlink\" title=\"String命令\"></a>String命令</h3><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p>\n<p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p>\n<ul>\n<li>string：普通字符串</li>\n<li>int：整数类型，可以做自增.自减操作</li>\n<li>float：浮点类型，可以做自增.自减操作</li>\n</ul>\n<p>String的常见命令有：</p>\n<ul>\n<li><p>SET：添加或者修改已经存在的一个String类型的键值对</p>\n</li>\n<li><p>GET：根据key获取String类型的value</p>\n</li>\n<li><p>MSET：批量添加多个String类型的键值对</p>\n</li>\n<li><p>MGET：根据多个key获取多个String类型的value</p>\n</li>\n<li><p>INCR：让一个整型的key自增1</p>\n</li>\n<li><p>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</p>\n</li>\n<li><p>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</p>\n</li>\n<li><p>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</p>\n</li>\n<li><p>SETEX：添加一个String类型的键值对，并且指定有效期</p>\n</li>\n<li><p>SETNX  常用作分布式锁</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> help setnx\n\n  <span class=\"token constant\">SETNX</span> key value\n  summary<span class=\"token operator\">:</span> <span class=\"token class-name\">Set</span> the value of a key<span class=\"token punctuation\">,</span> only <span class=\"token keyword\">if</span> the key does not exist\n  since<span class=\"token operator\">:</span> <span class=\"token number\">1.0</span><span class=\"token number\">.0</span>\n  group<span class=\"token operator\">:</span> string\n\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> set name <span class=\"token class-name\">Jack</span>  <span class=\"token comment\">//设置名称</span>\n<span class=\"token constant\">OK</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> setnx name lisi <span class=\"token comment\">//如果key不存在，则添加成功</span>\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> get name <span class=\"token comment\">//由于name已经存在，所以lisi的操作失败</span>\n<span class=\"token string\">\"Jack\"</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> setnx name2 lisi <span class=\"token comment\">//name2 不存在，所以操作成功</span>\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> get name2 \n<span class=\"token string\">\"lisi\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>SETEX</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setex name <span class=\"token number\">10</span> jack\nOK\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl name\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Redis命令-Key的层级结构\"><a href=\"#Redis命令-Key的层级结构\" class=\"headerlink\" title=\"Redis命令-Key的层级结构\"></a>Redis命令-Key的层级结构</h3><p>我们可以通过给key添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p>\n<p>Redis的key允许有多个单词形成层级结构，多个单词之间用’ : ‘ 隔开，格式如下：</p>\n<p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p>\n<p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：</p>\n<table>\n<thead>\n<tr>\n<th><strong>KEY</strong></th>\n<th><strong>VALUE</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>heima:user:1</td>\n<td>{“id”:1, “name”: “Jack”, “age”: 21}</td>\n</tr>\n<tr>\n<td>heima:product:1</td>\n<td>{“id”:1, “name”: “小米11”, “price”: 4999}</td>\n</tr>\n</tbody></table>\n<h3 id=\"Hash命令\"><a href=\"#Hash命令\" class=\"headerlink\" title=\"Hash命令\"></a>Hash命令</h3><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p>\n<p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：</p>\n<p><img src=\"D:\\Java成神之路\\7、2022版Redis入门到精通\\Redis-笔记资料\\01-入门篇\\讲义\\Redis注释版\\assets\\1652941995945.png\" alt=\"1652941995945\"></p>\n<p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p>\n<p><img src=\"D:\\Java成神之路\\7、2022版Redis入门到精通\\Redis-笔记资料\\01-入门篇\\讲义\\Redis注释版\\assets\\1652942027719.png\" alt=\"1652942027719\"></p>\n<p><strong>Hash类型的常见命令</strong></p>\n<ul>\n<li><p>HSET key field value：添加或者修改hash类型key的field的值</p>\n</li>\n<li><p>HGET key field：获取一个hash类型key的field的值</p>\n</li>\n<li><p>HMSET：批量添加多个hash类型key的field的值</p>\n</li>\n<li><p>HMGET：批量获取多个hash类型key的field的值</p>\n</li>\n<li><p>HGETALL：获取一个hash类型的key中的所有的field和value</p>\n</li>\n<li><p>HKEYS：获取一个hash类型的key中的所有的field</p>\n</li>\n<li><p>HINCRBY:让一个hash类型key的字段值自增并指定步长</p>\n</li>\n<li><p>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</p>\n</li>\n</ul>\n<p><strong>贴心小提示</strong>：哈希结构也是我们以后实际开发中常用的命令哟</p>\n<ul>\n<li>HSET和HGET</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HSET</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">3</span> name <span class=\"token class-name\">Lucy</span><span class=\"token comment\">//大key是 heima:user:3 小key是name，小value是Lucy</span>\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HSET</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">3</span> age <span class=\"token number\">21</span><span class=\"token comment\">// 如果操作不存在的数据，则是新增</span>\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HSET</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">3</span> age <span class=\"token number\">17</span> <span class=\"token comment\">//如果操作存在的数据，则是修改</span>\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HGET</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">3</span> name \n<span class=\"token string\">\"Lucy\"</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HGET</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">3</span> age\n<span class=\"token string\">\"17\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>HMSET和HMGET</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HMSET</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">4</span> name <span class=\"token class-name\">HanMeiMei</span>\n<span class=\"token constant\">OK</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HMSET</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">4</span> name <span class=\"token class-name\">LiLei</span> age <span class=\"token number\">20</span> sex man\n<span class=\"token constant\">OK</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HMGET</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">4</span> name age sex\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"LiLei\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"20\"</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"man\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>HGETALL</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HGETALL</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">4</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"LiLei\"</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"20\"</span>\n<span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"sex\"</span>\n<span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"man\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>HKEYS和HVALS</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HKEYS</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">4</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"sex\"</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HVALS</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">4</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"LiLei\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"20\"</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"man\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>HINCRBY</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HINCRBY</span>  heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">4</span> age <span class=\"token number\">2</span>\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">22</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HVALS</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">4</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"LiLei\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"22\"</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"man\"</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HINCRBY</span>  heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">4</span> age <span class=\"token operator\">-</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>HSETNX</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HGETALL</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">3</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"Lucy\"</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"17\"</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HSETNX</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">3</span> sex woman\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">HGETALL</span> heima<span class=\"token operator\">:</span>user<span class=\"token operator\">:</span><span class=\"token number\">3</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"Lucy\"</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"17\"</span>\n<span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"sex\"</span>\n<span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"woman\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"List命令\"><a href=\"#List命令\" class=\"headerlink\" title=\"List命令\"></a>List命令</h3><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p>\n<p>特征也与LinkedList类似：</p>\n<ul>\n<li>有序</li>\n<li>元素可以重复</li>\n<li>插入和删除快</li>\n<li>查询速度一般</li>\n</ul>\n<p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p>\n<p><strong>List的常见命令有：</strong></p>\n<ul>\n<li>LPUSH key element … ：向列表左侧插入一个或多个元素</li>\n<li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li>\n<li>RPUSH key element … ：向列表右侧插入一个或多个元素</li>\n<li>RPOP key：移除并返回列表右侧的第一个元素</li>\n<li>LRANGE key star end：返回一段角标范围内的所有元素</li>\n<li>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li>\n</ul>\n<p><img src=\"D:\\Java成神之路\\7、2022版Redis入门到精通\\Redis-笔记资料\\01-入门篇\\讲义\\Redis注释版\\Redis.assets\\1652943604992.png\" alt=\"1652943604992\"></p>\n<ul>\n<li>LPUSH和RPUSH</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">LPUSH</span> users <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">RPUSH</span> users <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span>\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>LPOP和RPOP</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">LPOP</span> users\n<span class=\"token string\">\"3\"</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">RPOP</span> users\n<span class=\"token string\">\"6\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>LRANGE</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">LRANGE</span> users <span class=\"token number\">1</span> <span class=\"token number\">2</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"4\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Set命令\"><a href=\"#Set命令\" class=\"headerlink\" title=\"Set命令\"></a>Set命令</h3><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p>\n<ul>\n<li>无序</li>\n<li>元素不可重复</li>\n<li>查找快</li>\n<li>支持交集.并集.差集等功能</li>\n</ul>\n<p><strong>Set类型的常见命令</strong></p>\n<ul>\n<li>SADD key member … ：向set中添加一个或多个元素</li>\n<li>SREM key member … : 移除set中的指定元素</li>\n<li>SCARD key： 返回set中元素的个数</li>\n<li>SISMEMBER key member：判断一个元素是否存在于set中</li>\n<li>SMEMBERS：获取set中的所有元素</li>\n<li>SINTER key1 key2 … ：求key1与key2的交集</li>\n<li>SDIFF key1 key2 … ：求key1与key2的差集</li>\n<li>SUNION key1 key2 ..：求key1和key2的并集</li>\n</ul>\n<p>例如两个集合：s1和s2:</p>\n<p><img src=\"https://i.imgur.com/ha8x86R.png\"></p>\n<p>求交集：SINTER s1 s2</p>\n<p>求s1与s2的不同：SDIFF s1 s2</p>\n<p><img src=\"https://i.imgur.com/L9vTv2X.png\"></p>\n<p><strong>具体命令</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> sadd s1 a b c\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> smembers s1\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"c\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"b\"</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"a\"</span>\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> srem s1 a\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n    \n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">SISMEMBER</span> s1 a\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span>\n    \n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">SISMEMBER</span> s1 b\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n    \n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token class-name\">SCARD</span> s1\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>案例</strong></p>\n<p>将下列数据用Redis的Set集合来存储：</p>\n<ul>\n<li>张三的好友有：李四.王五.赵六</li>\n<li>李四的好友有：王五.麻子.二狗</li>\n</ul>\n<p>利用Set的命令实现下列功能：</p>\n<ul>\n<li>计算张三的好友有几人</li>\n<li>计算张三和李四有哪些共同好友</li>\n<li>查询哪些人是张三的好友却不是李四的好友</li>\n<li>查询张三和李四的好友总共有哪些人</li>\n<li>判断李四是否是张三的好友</li>\n<li>判断张三是否是李四的好友</li>\n<li>将李四从张三的好友列表中移除</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">SADD</span> zs lisi wangwu zhaoliu\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span>\n    \n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">SADD</span> ls wangwu mazi ergou\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span>\n    \n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token class-name\">SCARD</span> zs\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span>\n    \n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">SINTER</span> zs ls\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"wangwu\"</span>\n    \n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">SDIFF</span> zs ls\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"zhaoliu\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lisi\"</span>\n    \n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">SUNION</span> zs ls\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"wangwu\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"zhaoliu\"</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lisi\"</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mazi\"</span>\n<span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"ergou\"</span>\n    \n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">SISMEMBER</span> zs lisi\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n    \n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">SISMEMBER</span> ls zhangsan\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span>\n    \n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">SREM</span> zs lisi\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n    \n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token constant\">SMEMBERS</span> zs\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"zhaoliu\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"wangwu\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"SortedSet类型\"><a href=\"#SortedSet类型\" class=\"headerlink\" title=\"SortedSet类型\"></a>SortedSet类型</h3><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p>\n<p>SortedSet具备下列特性：</p>\n<ul>\n<li>可排序</li>\n<li>元素不重复</li>\n<li>查询速度快</li>\n</ul>\n<p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p>\n<p>SortedSet的常见命令有：</p>\n<ul>\n<li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li>\n<li>ZREM key member：删除sorted set中的一个指定元素</li>\n<li>ZSCORE key member : 获取sorted set中的指定元素的score值</li>\n<li>ZRANK key member：获取sorted set 中的指定元素的排名</li>\n<li>ZCARD key：获取sorted set中的元素个数</li>\n<li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li>\n<li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li>\n<li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li>\n<li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li>\n<li>ZDIFF.ZINTER.ZUNION：求差集.交集.并集</li>\n</ul>\n<p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p>\n<ul>\n<li><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</li>\n<li><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</li>\n</ul>\n<h2 id=\"Redis的Java客户端-Jedis\"><a href=\"#Redis的Java客户端-Jedis\" class=\"headerlink\" title=\"Redis的Java客户端-Jedis\"></a>Redis的Java客户端-Jedis</h2><p>其中Java客户端也包含很多：</p>\n<p>推荐使用的java客户端，包括：</p>\n<ul>\n<li>Jedis和Lettuce：这两个主要是提供了Redis命令对应的API，方便我们操作Redis，而SpringDataRedis又对这两种做了抽象和封装，因此直接以SpringDataRedis</li>\n<li>Redisson：是在Redis基础上实现了分布式的可伸缩的java数据结构，例如Map.Queue等，而且支持跨进程的同步机制：Lock.Semaphore等待，比较适合用来实现特殊的功能需求。</li>\n</ul>\n<h3 id=\"Jedis快速入门\"><a href=\"#Jedis快速入门\" class=\"headerlink\" title=\"Jedis快速入门\"></a>Jedis快速入门</h3><p><strong>入门案例详细步骤</strong></p>\n<p>案例分析：</p>\n<p>1）引入依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!--jedis--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>redis.clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jedis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.7.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--单元测试--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.junit.jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit-jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.7.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2）建立连接</p>\n<p>新建一个单元测试类，内容如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Jedis</span> jedis<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@BeforeEach</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1.建立连接</span>\n    jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.150.101\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//1.1 连接池的方式建立连接</span>\n    <span class=\"token comment\">//jedis = JedisConnectionFactory.getJedis();</span>\n    <span class=\"token comment\">// 2.设置密码</span>\n    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123321\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3.选择库</span>\n    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>3）测试：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 存入数据</span>\n    <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"虎哥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result = \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 获取数据</span>\n    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">testHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 插入hash数据</span>\n    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"21\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 获取</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hgetAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>4）释放资源</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AfterEach</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jedis <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Jedis连接池\"><a href=\"#Jedis连接池\" class=\"headerlink\" title=\"Jedis连接池\"></a>Jedis连接池</h3><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐使用Jedis连接池代替Jedis的直连方式</p>\n<p>有关池化思想，并不仅仅是这里会使用，很多地方都有，比如说我们的数据库连接池，比如我们tomcat中的线程池，这些都是池化思想的体现。</p>\n<h4 id=\"创建Jedis的连接池\"><a href=\"#创建Jedis的连接池\" class=\"headerlink\" title=\"创建Jedis的连接池\"></a>创建Jedis的连接池</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JedisConnectionFacotry</span> <span class=\"token punctuation\">&#123;</span>\n\n     <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">JedisPool</span> jedisPool<span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">//配置连接池</span>\n         <span class=\"token class-name\">JedisPoolConfig</span> poolConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMinIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxWaitMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\">//创建连接池对象</span>\n         jedisPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPool</span><span class=\"token punctuation\">(</span>poolConfig<span class=\"token punctuation\">,</span>\n                 <span class=\"token string\">\"192.168.150.101\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123321\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Jedis</span> <span class=\"token function\">getJedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> jedisPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>代码说明：</strong></p>\n<ul>\n<li><p>1） JedisConnectionFacotry：工厂设计模式是实际开发中非常常用的一种设计模式，我们可以使用工厂，去降低代的耦合，比如Spring中的Bean的创建，就用到了工厂设计模式</p>\n</li>\n<li><p>2）静态代码块：随着类的加载而加载，确保只能执行一次，我们在加载当前工厂类的时候，就可以执行static的操作完成对 连接池的初始化</p>\n</li>\n<li><p>3）最后提供返回连接池中连接的方法.</p>\n</li>\n</ul>\n<h4 id=\"改造原始代码\"><a href=\"#改造原始代码\" class=\"headerlink\" title=\"改造原始代码\"></a>改造原始代码</h4><p><strong>代码说明:</strong></p>\n<ul>\n<li><p>在我们完成了使用工厂设计模式来完成代码的编写之后，我们在获得连接时，就可以通过工厂来获得，而不用直接去new对象，降低耦合，并且使用的还是连接池对象。</p>\n</li>\n<li><p>当我们使用了连接池后，当我们关闭连接其实并不是关闭，而是将Jedis还回连接池的。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"> <span class=\"token annotation punctuation\">@BeforeEach</span>\n <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n     <span class=\"token comment\">//建立连接</span>\n     <span class=\"token comment\">/*jedis = new Jedis(\"127.0.0.1\",6379);*/</span>\n     jedis <span class=\"token operator\">=</span> <span class=\"token class-name\">JedisConnectionFacotry</span><span class=\"token punctuation\">.</span><span class=\"token function\">getJedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//选择库</span>\n     jedis<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@AfterEach</span>\n <span class=\"token keyword\">void</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jedis <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"SpringDataRedis\"><a href=\"#SpringDataRedis\" class=\"headerlink\" title=\"SpringDataRedis\"></a>SpringDataRedis</h2><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a href=\"https://spring.io/projects/spring-data-redis\">https://spring.io/projects/spring-data-redis</a></p>\n<ul>\n<li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li>\n<li>提供了RedisTemplate统一API来操作Redis</li>\n<li>支持Redis的发布订阅模型</li>\n<li>支持Redis哨兵和Redis集群</li>\n<li>支持基于Lettuce的响应式编程</li>\n<li>支持基于JDK.JSON.字符串.Spring对象的数据序列化及反序列化</li>\n<li>支持基于Redis的JDKCollection实现</li>\n</ul>\n<p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p>\n<p><img src=\"/../assets/images/redis03.png\" alt=\"1652976773295\"></p>\n<h3 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h3><p>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单：</p>\n<ul>\n<li>引入spring-boot-starter-data-redis依赖</li>\n<li>在application.yml配置Redis信息</li>\n<li>注入RedisTemplate</li>\n</ul>\n<h4 id=\"导入pom坐标\"><a href=\"#导入pom坐标\" class=\"headerlink\" title=\"导入pom坐标\"></a>导入pom坐标</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--redis依赖--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--common-pool--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.commons<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>commons-pool2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--Jackson依赖--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.150.101\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span>\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123321</span>\n    <span class=\"token key atrule\">lettuce</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">pool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">max-active</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span>  <span class=\"token comment\">#最大连接</span>\n        <span class=\"token key atrule\">max-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span>   <span class=\"token comment\">#最大空闲连接</span>\n        <span class=\"token key atrule\">min-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>   <span class=\"token comment\">#最小空闲连接</span>\n        <span class=\"token key atrule\">max-wait</span><span class=\"token punctuation\">:</span> 100ms <span class=\"token comment\">#连接等待时间</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisDemoApplicationTests</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> redisTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 写入一条String数据</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"虎哥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取string数据</span>\n        <span class=\"token class-name\">Object</span> name <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"数据序列化器\"><a href=\"#数据序列化器\" class=\"headerlink\" title=\"数据序列化器\"></a>数据序列化器</h3><p>RedisTemplate可以接收任意Object作为值写入Redis</p>\n<p>只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化</p>\n<p>JDK序列化缺点：</p>\n<ul>\n<li>可读性差</li>\n<li>内存占用较大</li>\n</ul>\n<p>我们可以自定义RedisTemplate的序列化方式，代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 创建RedisTemplate对象</span>\n        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置连接工厂</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建JSON序列化工具</span>\n        <span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span> jsonRedisSerializer <span class=\"token operator\">=</span> \n            \t\t\t\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置Key的序列化</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置Value的序列化</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>jsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>jsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 返回</span>\n        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题，如图：</p>\n<p><img src=\"/../assets/images/redis02.png\" alt=\"1653054602930\"></p>\n<p>这里采用了JSON序列化来代替默认的JDK序列化方式。整体可读性有了很大提升，并且能将Java对象自动的序列化为JSON字符串，并且查询时能自动把JSON反序列化为Java对象。不过，为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销。</p>\n<p>为了减少内存的消耗，我们可以采用手动序列化的方式，换句话说，就是不借助默认的序列化器，而是我们自己来控制序列化的动作，同时，我们只采用String的序列化器，这样，在存储value时，我们就不需要在内存中就不用多存储数据，从而节约我们的内存空间</p>\n<p><img src=\"/../assets/images/redis01.png\" alt=\"1653054744832\"></p>\n<p>这种用法比较普遍，因此SpringDataRedis就提供了RedisTemplate的子类：StringRedisTemplate，它的key和value的序列化方式默认就是String方式。</p>\n<p>省去了我们自定义RedisTemplate的序列化方式的步骤，而是直接使用：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisStringTests</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 写入一条String数据</span>\n        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"verify:phone:13600527634\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"124143\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取string数据</span>\n        <span class=\"token class-name\">Object</span> name <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectMapper</span> mapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testSaveUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JsonProcessingException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 创建对象</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"虎哥\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 手动序列化</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 写入数据</span>\n        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:200\"</span><span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 获取数据</span>\n        <span class=\"token class-name\">String</span> jsonUser <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:200\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 手动反序列化</span>\n        <span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>jsonUser<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1 = \"</span> <span class=\"token operator\">+</span> user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那个class数据已经不在了，节约了空间</p>\n<p><img src=\"D:\\Java成神之路\\7、2022版Redis入门到精通\\Redis-笔记资料\\01-入门篇\\讲义\\Redis注释版\\Redis.assets\\1653054945211.png\" alt=\"1653054945211\"></p>\n<p>小结：</p>\n<p>RedisTemplate的两种序列化实践方案：</p>\n<ul>\n<li><p>方案一：</p>\n<ul>\n<li>自定义RedisTemplate</li>\n<li>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li>\n</ul>\n</li>\n<li><p>方案二：</p>\n<ul>\n<li>使用StringRedisTemplate</li>\n<li>写入Redis时，手动把对象序列化为JSON</li>\n<li>读取Redis时，手动把读取到的JSON反序列化为对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Hash结构操作\"><a href=\"#Hash结构操作\" class=\"headerlink\" title=\"Hash结构操作\"></a>Hash结构操作</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisStringTests</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:400\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"虎哥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:400\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"21\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> entries <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:400\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entries = \"</span> <span class=\"token operator\">+</span> entries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"认识NoSQLNoSql可以翻译做Not Only Sql（不仅仅是SQL），或者是No Sql（非Sql的）数据库。是相对于传统关系型数据库而言，有很大差异的一种特殊的数据库，因此也称之为非关系型数据库。 结构化与非结构化​ 传统关系型数据库是结构化数据，每一张表都有严格的约束...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[],"tags":[{"name":"redis","slug":"redis","count":1,"path":"api/tags/redis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E8%AF%86NoSQL\"><span class=\"toc-text\">认识NoSQL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E5%8C%96%E4%B8%8E%E9%9D%9E%E7%BB%93%E6%9E%84%E5%8C%96\"><span class=\"toc-text\">结构化与非结构化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E8%81%94%E5%92%8C%E9%9D%9E%E5%85%B3%E8%81%94\"><span class=\"toc-text\">关联和非关联</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">查询方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">事务</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F-%E6%89%A9%E5%B1%95%E6%80%A7-%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%B8%8A%E5%85%B3%E7%B3%BB%E5%9E%8B%E4%B8%8E%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E4%B9%9F%E9%83%BD%E6%9C%89%E7%9D%80%E6%98%BE%E8%91%97%E5%B7%AE%E5%BC%82\"><span class=\"toc-text\">在存储方式.扩展性.查询性能上关系型与非关系型也都有着显著差异</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E8%AF%86Redis\"><span class=\"toc-text\">认识Redis</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85Redis\"><span class=\"toc-text\">安装Redis</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">启动</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF\"><span class=\"toc-text\">开机自启</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redis%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">Redis常见命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">Redis数据结构介绍</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-Redis-%E9%80%9A%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">4.2 Redis 通用命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#String%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">String命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redis%E5%91%BD%E4%BB%A4-Key%E7%9A%84%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">Redis命令-Key的层级结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hash%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">Hash命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#List%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">List命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Set%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">Set命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SortedSet%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">SortedSet类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis%E7%9A%84Java%E5%AE%A2%E6%88%B7%E7%AB%AF-Jedis\"><span class=\"toc-text\">Redis的Java客户端-Jedis</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Jedis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">Jedis快速入门</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Jedis%E8%BF%9E%E6%8E%A5%E6%B1%A0\"><span class=\"toc-text\">Jedis连接池</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAJedis%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%B1%A0\"><span class=\"toc-text\">创建Jedis的连接池</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%94%B9%E9%80%A0%E5%8E%9F%E5%A7%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">改造原始代码</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SpringDataRedis\"><span class=\"toc-text\">SpringDataRedis</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">快速入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5pom%E5%9D%90%E6%A0%87\"><span class=\"toc-text\">导入pom坐标</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">配置文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">测试代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8\"><span class=\"toc-text\">数据序列化器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hash%E7%BB%93%E6%9E%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">Hash结构操作</span></a></li></ol>","author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java设计原则中，组合优先于继承","uid":"3790eb53c6264ff24e57195f4b6f77f1","slug":"Java设计原则中，组合优先于继承","date":"2023-06-03T13:35:14.000Z","updated":"2023-06-03T14:13:46.326Z","comments":true,"path":"api/articles/Java设计原则中，组合优先于继承.json","keywords":null,"cover":[],"text":"Java 设计原则中，为什么反复强调组合要优先于继承？在《阿里巴巴Java开发手册》中有一条规定：谨慎使用继承的方式进行扩展，优先使用组合的方式实现。 为什么不推荐使用继承 是面向对象的四大特性之一，用来表示类之间的is-a关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"设计模式","slug":"设计模式","count":18,"path":"api/tags/设计模式.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}},"next_post":{"title":"MDC实现链路追踪","uid":"4f10da7078fbc31ecbcb9fd541bf0d6b","slug":"MDC实现简单的链路追踪","date":"2023-06-02T12:36:15.000Z","updated":"2023-06-02T14:15:45.078Z","comments":true,"path":"api/articles/MDC实现简单的链路追踪.json","keywords":null,"cover":null,"text":"MDC实现链路追踪先明确Filter、HandlerInterceptor 和 AOP 的执行流程在 Spring Boot 应用程序中，Filter、HandlerInterceptor 和 AOP 切面都是拦截器组件，在请求处理过程中扮演不同的角色，各自负责不同的任务。在一个...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"链路追踪","slug":"链路追踪","count":1,"path":"api/tags/链路追踪.json"},{"name":"日志","slug":"日志","count":1,"path":"api/tags/日志.json"}],"author":{"name":"大宝贝的程序员","slug":"blog-author","avatar":"/img/header.jpg","link":"/","description":"Java实习生,即将入职场的小白","socials":{"github":"https://github.com/hjllsh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://mp.csdn.net/mp_blog/manage/article","juejin":"","customs":{}}}}}